
FreeRtosTestProjectWithoutHal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800c358  0800c358  0001c358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c450  0800c450  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c450  0800c450  0001c450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c458  0800c458  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c458  0800c458  0001c458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c45c  0800c45c  0001c45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000524c  20000094  0800c4f4  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200052e0  0800c4f4  000252e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c7dd  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000053db  00000000  00000000  0004c8a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020d8  00000000  00000000  00051c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001eb8  00000000  00000000  00053d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000078d1  00000000  00000000  00055c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d536  00000000  00000000  0005d4e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3d60  00000000  00000000  0007aa17  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015e777  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ca4  00000000  00000000  0015e7f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c340 	.word	0x0800c340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800c340 	.word	0x0800c340

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vTaskForModbus>:
/* USER CODE BEGIN 0 */

/*-----------------------------------------------------------*/
/* Обмен по ModBus */
void vTaskForModbus( void *pvParameters )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]

  for( ;; )
 80004d8:	e7fe      	b.n	80004d8 <vTaskForModbus+0x8>

080004da <vTaskForSPI>:
  vTaskDelete( NULL );
}
/*-----------------------------------------------------------*/
/* Обмен по SPI */
void vTaskForSPI( void *pvParameters )
{
 80004da:	b480      	push	{r7}
 80004dc:	b083      	sub	sp, #12
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]

  for( ;; )
 80004e2:	e7fe      	b.n	80004e2 <vTaskForSPI+0x8>

080004e4 <vTaskForUART>:
  vTaskDelete( NULL );
}

/* Обмен по UART */
void vTaskForUART( void *pvParameters )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]

  for( ;; )
 80004ec:	e7fe      	b.n	80004ec <vTaskForUART+0x8>

080004ee <vTaskForDisplay>:
  vTaskDelete( NULL );
}

/* Работа с драйвером дисплея */
void vTaskForDisplay( void *pvParameters )
{
 80004ee:	b480      	push	{r7}
 80004f0:	b087      	sub	sp, #28
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]

  int displayNumbers[4];

  for( ;; )
 80004f6:	e7fe      	b.n	80004f6 <vTaskForDisplay+0x8>

080004f8 <vTaskForPorts>:
  vTaskDelete( NULL );
}

/* Работа с портами */
void vTaskForPorts( void *pvParameters )
{
 80004f8:	b480      	push	{r7}
 80004fa:	b087      	sub	sp, #28
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	int portNumbers[4];

  for( ;; )
 8000500:	e7fe      	b.n	8000500 <vTaskForPorts+0x8>

08000502 <vTaskForADCSensorIn4>:
  vTaskDelete( NULL );
}

/* Работа с драйвером дисплея */
void vTaskForADCSensorIn4( void *pvParameters )
{
 8000502:	b480      	push	{r7}
 8000504:	b087      	sub	sp, #28
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]

  int displayNumbers[4];

  for( ;; )
 800050a:	e7fe      	b.n	800050a <vTaskForADCSensorIn4+0x8>

0800050c <vTaskForADCSensorIn5>:
 }
  vTaskDelete( NULL );
}

void vTaskForADCSensorIn5( void *pvParameters )
{
 800050c:	b480      	push	{r7}
 800050e:	b087      	sub	sp, #28
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]

  int displayNumbers[4];

  for( ;; )
 8000514:	e7fe      	b.n	8000514 <vTaskForADCSensorIn5+0x8>

08000516 <vTaskForI2C>:
  vTaskDelete( NULL );
}

/* Обмен по I2C */
void vTaskForI2C( void *pvParameters )
{
 8000516:	b480      	push	{r7}
 8000518:	b087      	sub	sp, #28
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]

  int I2CNumbers[4];

  for( ;; )
 800051e:	e7fe      	b.n	800051e <vTaskForI2C+0x8>

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000526:	f000 fe93 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052a:	f000 f897 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052e:	f000 fa51 	bl	80009d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000532:	f000 f967 	bl	8000804 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000536:	f000 f993 	bl	8000860 <MX_I2S3_Init>
  MX_SPI1_Init();
 800053a:	f000 f9c1 	bl	80008c0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800053e:	f000 f9f5 	bl	800092c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000542:	f000 fa1d 	bl	8000980 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000546:	f000 f90b 	bl	8000760 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800054a:	f008 fb8b 	bl	8008c64 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800054e:	4a30      	ldr	r2, [pc, #192]	; (8000610 <main+0xf0>)
 8000550:	2100      	movs	r1, #0
 8000552:	4830      	ldr	r0, [pc, #192]	; (8000614 <main+0xf4>)
 8000554:	f008 fbf0 	bl	8008d38 <osThreadNew>
 8000558:	4602      	mov	r2, r0
 800055a:	4b2f      	ldr	r3, [pc, #188]	; (8000618 <main+0xf8>)
 800055c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800055e:	f008 fbb5 	bl	8008ccc <osKernelStart>
   //DDRF |= (1 << DDF0) | (1 << DDF1);

   /* Создать задачу 1, заметьте,  что реальная программа должна
   /* проверять возвращаемое  значение, чтобы убедиться,
   /* что задача создана успешно */
   xTaskCreate( vTaskForModbus,  /* Указатель на функцию, реализующую задачу */
 8000562:	2300      	movs	r3, #0
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2301      	movs	r3, #1
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2300      	movs	r3, #0
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	492b      	ldr	r1, [pc, #172]	; (800061c <main+0xfc>)
 8000570:	482b      	ldr	r0, [pc, #172]	; (8000620 <main+0x100>)
 8000572:	f009 fcf5 	bl	8009f60 <xTaskCreate>
       NULL,  /* Параметр, передаваемый задаче, – не используется */
       1,  /* Приоритет = 1 */
       NULL );  /* Получение дескриптора задачи – не используется */

   /* Создать задачу 2 */
   xTaskCreate(vTaskForSPI,  (signed char *) "vTaskForSPI", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8000576:	2300      	movs	r3, #0
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2301      	movs	r3, #1
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2300      	movs	r3, #0
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	4928      	ldr	r1, [pc, #160]	; (8000624 <main+0x104>)
 8000584:	4828      	ldr	r0, [pc, #160]	; (8000628 <main+0x108>)
 8000586:	f009 fceb 	bl	8009f60 <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForADCSensorIn4,  (signed char *) "vTaskForADCSensorIn4", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 800058a:	2300      	movs	r3, #0
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2301      	movs	r3, #1
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	4925      	ldr	r1, [pc, #148]	; (800062c <main+0x10c>)
 8000598:	4825      	ldr	r0, [pc, #148]	; (8000630 <main+0x110>)
 800059a:	f009 fce1 	bl	8009f60 <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForADCSensorIn5,  (signed char *) "vTaskForADCSensorIn5", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 800059e:	2300      	movs	r3, #0
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	2280      	movs	r2, #128	; 0x80
 80005aa:	4922      	ldr	r1, [pc, #136]	; (8000634 <main+0x114>)
 80005ac:	4822      	ldr	r0, [pc, #136]	; (8000638 <main+0x118>)
 80005ae:	f009 fcd7 	bl	8009f60 <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForUART,  (signed char *) "vTaskForUART", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 80005b2:	2300      	movs	r3, #0
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2280      	movs	r2, #128	; 0x80
 80005be:	491f      	ldr	r1, [pc, #124]	; (800063c <main+0x11c>)
 80005c0:	481f      	ldr	r0, [pc, #124]	; (8000640 <main+0x120>)
 80005c2:	f009 fccd 	bl	8009f60 <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForDisplay,  (signed  char *) "vTaskForDisplay", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 80005c6:	2300      	movs	r3, #0
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	491c      	ldr	r1, [pc, #112]	; (8000644 <main+0x124>)
 80005d4:	481c      	ldr	r0, [pc, #112]	; (8000648 <main+0x128>)
 80005d6:	f009 fcc3 	bl	8009f60 <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForPorts,  (signed  char *) "vTaskForPorts", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 80005da:	2300      	movs	r3, #0
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2301      	movs	r3, #1
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	2280      	movs	r2, #128	; 0x80
 80005e6:	4919      	ldr	r1, [pc, #100]	; (800064c <main+0x12c>)
 80005e8:	4819      	ldr	r0, [pc, #100]	; (8000650 <main+0x130>)
 80005ea:	f009 fcb9 	bl	8009f60 <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForI2C,  (signed  char *) "vTaskForI2C", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 80005ee:	2300      	movs	r3, #0
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	4916      	ldr	r1, [pc, #88]	; (8000654 <main+0x134>)
 80005fc:	4816      	ldr	r0, [pc, #88]	; (8000658 <main+0x138>)
 80005fe:	f009 fcaf 	bl	8009f60 <xTaskCreate>

   /* Запустить планировщик. Задачи начнут выполняться. */
   vTaskStartScheduler();
 8000602:	f009 fe25 	bl	800a250 <vTaskStartScheduler>

   return 0;
 8000606:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000608:	4618      	mov	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	0800c414 	.word	0x0800c414
 8000614:	08000bd1 	.word	0x08000bd1
 8000618:	200049cc 	.word	0x200049cc
 800061c:	0800c364 	.word	0x0800c364
 8000620:	080004d1 	.word	0x080004d1
 8000624:	0800c374 	.word	0x0800c374
 8000628:	080004db 	.word	0x080004db
 800062c:	0800c380 	.word	0x0800c380
 8000630:	08000503 	.word	0x08000503
 8000634:	0800c398 	.word	0x0800c398
 8000638:	0800050d 	.word	0x0800050d
 800063c:	0800c3b0 	.word	0x0800c3b0
 8000640:	080004e5 	.word	0x080004e5
 8000644:	0800c3c0 	.word	0x0800c3c0
 8000648:	080004ef 	.word	0x080004ef
 800064c:	0800c3d0 	.word	0x0800c3d0
 8000650:	080004f9 	.word	0x080004f9
 8000654:	0800c3e0 	.word	0x0800c3e0
 8000658:	08000517 	.word	0x08000517

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b098      	sub	sp, #96	; 0x60
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f00b fda5 	bl	800c1ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <SystemClock_Config+0xfc>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	4a30      	ldr	r2, [pc, #192]	; (8000758 <SystemClock_Config+0xfc>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069c:	6413      	str	r3, [r2, #64]	; 0x40
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <SystemClock_Config+0xfc>)
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b2b      	ldr	r3, [pc, #172]	; (800075c <SystemClock_Config+0x100>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a2a      	ldr	r2, [pc, #168]	; (800075c <SystemClock_Config+0x100>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b8:	6013      	str	r3, [r2, #0]
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <SystemClock_Config+0x100>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c6:	2301      	movs	r3, #1
 80006c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006da:	2308      	movs	r3, #8
 80006dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006de:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e8:	2307      	movs	r3, #7
 80006ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fdd1 	bl	8004298 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006fc:	f000 fa84 	bl	8000c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	2105      	movs	r1, #5
 800071e:	4618      	mov	r0, r3
 8000720:	f004 f82a 	bl	8004778 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800072a:	f000 fa6d 	bl	8000c08 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800072e:	2301      	movs	r3, #1
 8000730:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000732:	23c0      	movs	r3, #192	; 0xc0
 8000734:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	4618      	mov	r0, r3
 8000740:	f004 fa3e 	bl	8004bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800074a:	f000 fa5d 	bl	8000c08 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3760      	adds	r7, #96	; 0x60
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000774:	4a21      	ldr	r2, [pc, #132]	; (80007fc <MX_ADC1_Init+0x9c>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <MX_ADC1_Init+0x98>)
 800077a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800077e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_ADC1_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007a2:	4a17      	ldr	r2, [pc, #92]	; (8000800 <MX_ADC1_Init+0xa0>)
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007bc:	2201      	movs	r2, #1
 80007be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007c2:	f000 fda9 	bl	8001318 <HAL_ADC_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007cc:	f000 fa1c 	bl	8000c08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007d0:	230e      	movs	r3, #14
 80007d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007e2:	f000 fddd 	bl	80013a0 <HAL_ADC_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007ec:	f000 fa0c 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20004a64 	.word	0x20004a64
 80007fc:	40012000 	.word	0x40012000
 8000800:	0f000001 	.word	0x0f000001

08000804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_I2C1_Init+0x50>)
 800080a:	4a13      	ldr	r2, [pc, #76]	; (8000858 <MX_I2C1_Init+0x54>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_I2C1_Init+0x50>)
 8000810:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_I2C1_Init+0x58>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_I2C1_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_I2C1_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_I2C1_Init+0x50>)
 8000822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000826:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_I2C1_Init+0x50>)
 8000842:	f002 ff51 	bl	80036e8 <HAL_I2C_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800084c:	f000 f9dc 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20004a10 	.word	0x20004a10
 8000858:	40005400 	.word	0x40005400
 800085c:	000186a0 	.word	0x000186a0

08000860 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_I2S3_Init+0x54>)
 8000866:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <MX_I2S3_Init+0x58>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_I2S3_Init+0x54>)
 800086c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000870:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_I2S3_Init+0x54>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_I2S3_Init+0x54>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_I2S3_Init+0x54>)
 8000880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000884:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_I2S3_Init+0x54>)
 8000888:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <MX_I2S3_Init+0x5c>)
 800088a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_I2S3_Init+0x54>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_I2S3_Init+0x54>)
 8000894:	2200      	movs	r2, #0
 8000896:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_I2S3_Init+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_I2S3_Init+0x54>)
 80008a0:	f003 f85a 	bl	8003958 <HAL_I2S_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008aa:	f000 f9ad 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20004b44 	.word	0x20004b44
 80008b8:	40003c00 	.word	0x40003c00
 80008bc:	00017700 	.word	0x00017700

080008c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_SPI1_Init+0x64>)
 80008c6:	4a18      	ldr	r2, [pc, #96]	; (8000928 <MX_SPI1_Init+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_SPI1_Init+0x64>)
 80008cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_SPI1_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_SPI1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_SPI1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_SPI1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_SPI1_Init+0x64>)
 80008ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_SPI1_Init+0x64>)
 80008f4:	2238      	movs	r2, #56	; 0x38
 80008f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_SPI1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_SPI1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_SPI1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_SPI1_Init+0x64>)
 800090c:	220a      	movs	r2, #10
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_SPI1_Init+0x64>)
 8000912:	f004 fa93 	bl	8004e3c <HAL_SPI_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800091c:	f000 f974 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20004aac 	.word	0x20004aac
 8000928:	40013000 	.word	0x40013000

0800092c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <MX_USART2_UART_Init+0x50>)
 8000934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000938:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800093c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000964:	f004 fd0c 	bl	8005380 <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800096e:	f000 f94b 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20004b04 	.word	0x20004b04
 800097c:	40004400 	.word	0x40004400

08000980 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART3_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 800098c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000990:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART3_UART_Init+0x4c>)
 80009b8:	f004 fce2 	bl	8005380 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 f921 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200049d0 	.word	0x200049d0
 80009d0:	40004800 	.word	0x40004800

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	4b71      	ldr	r3, [pc, #452]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a70      	ldr	r2, [pc, #448]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b6e      	ldr	r3, [pc, #440]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0310 	and.w	r3, r3, #16
 8000a02:	61bb      	str	r3, [r7, #24]
 8000a04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	4b6a      	ldr	r3, [pc, #424]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a69      	ldr	r2, [pc, #420]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b67      	ldr	r3, [pc, #412]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b63      	ldr	r3, [pc, #396]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a62      	ldr	r2, [pc, #392]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b60      	ldr	r3, [pc, #384]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b5c      	ldr	r3, [pc, #368]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a5b      	ldr	r2, [pc, #364]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b59      	ldr	r3, [pc, #356]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	4b55      	ldr	r3, [pc, #340]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a54      	ldr	r2, [pc, #336]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b52      	ldr	r3, [pc, #328]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b4e      	ldr	r3, [pc, #312]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a4d      	ldr	r2, [pc, #308]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b4b      	ldr	r3, [pc, #300]	; (8000bb4 <MX_GPIO_Init+0x1e0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2108      	movs	r1, #8
 8000a96:	4848      	ldr	r0, [pc, #288]	; (8000bb8 <MX_GPIO_Init+0x1e4>)
 8000a98:	f001 f91c 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	4846      	ldr	r0, [pc, #280]	; (8000bbc <MX_GPIO_Init+0x1e8>)
 8000aa2:	f001 f917 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000aac:	4844      	ldr	r0, [pc, #272]	; (8000bc0 <MX_GPIO_Init+0x1ec>)
 8000aae:	f001 f911 	bl	8001cd4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	483b      	ldr	r0, [pc, #236]	; (8000bb8 <MX_GPIO_Init+0x1e4>)
 8000aca:	f000 ff69 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4835      	ldr	r0, [pc, #212]	; (8000bbc <MX_GPIO_Init+0x1e8>)
 8000ae6:	f000 ff5b 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000aea:	2308      	movs	r3, #8
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000afa:	2305      	movs	r3, #5
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	482d      	ldr	r0, [pc, #180]	; (8000bbc <MX_GPIO_Init+0x1e8>)
 8000b06:	f000 ff4b 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <MX_GPIO_Init+0x1f0>)
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	482a      	ldr	r0, [pc, #168]	; (8000bc8 <MX_GPIO_Init+0x1f4>)
 8000b1e:	f000 ff3f 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b22:	2304      	movs	r3, #4
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4825      	ldr	r0, [pc, #148]	; (8000bcc <MX_GPIO_Init+0x1f8>)
 8000b36:	f000 ff33 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	481d      	ldr	r0, [pc, #116]	; (8000bcc <MX_GPIO_Init+0x1f8>)
 8000b58:	f000 ff22 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b5c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b60:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <MX_GPIO_Init+0x1ec>)
 8000b76:	f000 ff13 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b7a:	2320      	movs	r3, #32
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <MX_GPIO_Init+0x1ec>)
 8000b8e:	f000 ff07 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_GPIO_Init+0x1f0>)
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_GPIO_Init+0x1e4>)
 8000ba6:	f000 fefb 	bl	80019a0 <HAL_GPIO_Init>

}
 8000baa:	bf00      	nop
 8000bac:	3730      	adds	r7, #48	; 0x30
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40020800 	.word	0x40020800
 8000bc0:	40020c00 	.word	0x40020c00
 8000bc4:	10120000 	.word	0x10120000
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000bd8:	f00a ffa8 	bl	800bb2c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f008 f951 	bl	8008e84 <osDelay>
 8000be2:	e7fb      	b.n	8000bdc <StartDefaultTask+0xc>

08000be4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bf6:	f000 fb4d 	bl	8001294 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40010000 	.word	0x40010000

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <Error_Handler+0x6>

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_MspInit+0x54>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a11      	ldr	r2, [pc, #68]	; (8000c64 <HAL_MspInit+0x54>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_MspInit+0x54>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_MspInit+0x54>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_MspInit+0x54>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_MspInit+0x54>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	210f      	movs	r1, #15
 8000c52:	f06f 0001 	mvn.w	r0, #1
 8000c56:	f000 fe79 	bl	800194c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <HAL_ADC_MspInit+0x7c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d127      	bne.n	8000cda <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_ADC_MspInit+0x80>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <HAL_ADC_MspInit+0x80>)
 8000c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_ADC_MspInit+0x80>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_ADC_MspInit+0x80>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_ADC_MspInit+0x80>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_ADC_MspInit+0x80>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cc2:	2330      	movs	r3, #48	; 0x30
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_ADC_MspInit+0x84>)
 8000cd6:	f000 fe63 	bl	80019a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40012000 	.word	0x40012000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020800 	.word	0x40020800

08000cf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_I2C_MspInit+0x84>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12c      	bne.n	8000d6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d34:	2312      	movs	r3, #18
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d40:	2304      	movs	r3, #4
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480c      	ldr	r0, [pc, #48]	; (8000d7c <HAL_I2C_MspInit+0x8c>)
 8000d4c:	f000 fe28 	bl	80019a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_I2C_MspInit+0x88>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40005400 	.word	0x40005400
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020400 	.word	0x40020400

08000d80 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <HAL_I2S_MspInit+0xc0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d14a      	bne.n	8000e38 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a26      	ldr	r2, [pc, #152]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a1f      	ldr	r2, [pc, #124]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <HAL_I2S_MspInit+0xc4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000df6:	2310      	movs	r3, #16
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e06:	2306      	movs	r3, #6
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <HAL_I2S_MspInit+0xc8>)
 8000e12:	f000 fdc5 	bl	80019a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e16:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e28:	2306      	movs	r3, #6
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <HAL_I2S_MspInit+0xcc>)
 8000e34:	f000 fdb4 	bl	80019a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40003c00 	.word	0x40003c00
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40020800 	.word	0x40020800

08000e50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <HAL_SPI_MspInit+0x84>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d12b      	bne.n	8000eca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000eaa:	23e0      	movs	r3, #224	; 0xe0
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eba:	2305      	movs	r3, #5
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <HAL_SPI_MspInit+0x8c>)
 8000ec6:	f000 fd6b 	bl	80019a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40013000 	.word	0x40013000
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000

08000ee0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08e      	sub	sp, #56	; 0x38
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a51      	ldr	r2, [pc, #324]	; (8001044 <HAL_UART_MspInit+0x164>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d14a      	bne.n	8000f98 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
 8000f06:	4b50      	ldr	r3, [pc, #320]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a4f      	ldr	r2, [pc, #316]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b4d      	ldr	r3, [pc, #308]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1a:	623b      	str	r3, [r7, #32]
 8000f1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	4b49      	ldr	r3, [pc, #292]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a48      	ldr	r2, [pc, #288]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b46      	ldr	r3, [pc, #280]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	4b42      	ldr	r3, [pc, #264]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a41      	ldr	r2, [pc, #260]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b3f      	ldr	r3, [pc, #252]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f56:	2304      	movs	r3, #4
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f66:	2307      	movs	r3, #7
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4836      	ldr	r0, [pc, #216]	; (800104c <HAL_UART_MspInit+0x16c>)
 8000f72:	f000 fd15 	bl	80019a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f76:	2340      	movs	r3, #64	; 0x40
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f86:	2307      	movs	r3, #7
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8e:	4619      	mov	r1, r3
 8000f90:	482f      	ldr	r0, [pc, #188]	; (8001050 <HAL_UART_MspInit+0x170>)
 8000f92:	f000 fd05 	bl	80019a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f96:	e050      	b.n	800103a <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART3)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a2d      	ldr	r2, [pc, #180]	; (8001054 <HAL_UART_MspInit+0x174>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d14b      	bne.n	800103a <HAL_UART_MspInit+0x15a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a27      	ldr	r2, [pc, #156]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b25      	ldr	r3, [pc, #148]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a20      	ldr	r2, [pc, #128]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a19      	ldr	r2, [pc, #100]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_UART_MspInit+0x168>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ff6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001008:	2307      	movs	r3, #7
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	4811      	ldr	r0, [pc, #68]	; (8001058 <HAL_UART_MspInit+0x178>)
 8001014:	f000 fcc4 	bl	80019a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800102a:	2307      	movs	r3, #7
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <HAL_UART_MspInit+0x170>)
 8001036:	f000 fcb3 	bl	80019a0 <HAL_GPIO_Init>
}
 800103a:	bf00      	nop
 800103c:	3738      	adds	r7, #56	; 0x38
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40004400 	.word	0x40004400
 8001048:	40023800 	.word	0x40023800
 800104c:	40020000 	.word	0x40020000
 8001050:	40020c00 	.word	0x40020c00
 8001054:	40004800 	.word	0x40004800
 8001058:	40020400 	.word	0x40020400

0800105c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	2019      	movs	r0, #25
 8001072:	f000 fc6b 	bl	800194c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001076:	2019      	movs	r0, #25
 8001078:	f000 fc84 	bl	8001984 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <HAL_InitTick+0xa4>)
 8001082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001084:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <HAL_InitTick+0xa4>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6453      	str	r3, [r2, #68]	; 0x44
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <HAL_InitTick+0xa4>)
 800108e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001098:	f107 0210 	add.w	r2, r7, #16
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 fd5a 	bl	8004b5c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80010a8:	f003 fd44 	bl	8004b34 <HAL_RCC_GetPCLK2Freq>
 80010ac:	4603      	mov	r3, r0
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b4:	4a13      	ldr	r2, [pc, #76]	; (8001104 <HAL_InitTick+0xa8>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	0c9b      	lsrs	r3, r3, #18
 80010bc:	3b01      	subs	r3, #1
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_InitTick+0xac>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <HAL_InitTick+0xb0>)
 80010c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <HAL_InitTick+0xac>)
 80010c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_InitTick+0xac>)
 80010d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_InitTick+0xac>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_InitTick+0xac>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010e0:	4809      	ldr	r0, [pc, #36]	; (8001108 <HAL_InitTick+0xac>)
 80010e2:	f003 ff0f 	bl	8004f04 <HAL_TIM_Base_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d104      	bne.n	80010f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010ec:	4806      	ldr	r0, [pc, #24]	; (8001108 <HAL_InitTick+0xac>)
 80010ee:	f003 ff3e 	bl	8004f6e <HAL_TIM_Base_Start_IT>
 80010f2:	4603      	mov	r3, r0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3730      	adds	r7, #48	; 0x30
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	431bde83 	.word	0x431bde83
 8001108:	20004b8c 	.word	0x20004b8c
 800110c:	40010000 	.word	0x40010000

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <NMI_Handler+0x4>

08001116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler+0x4>

08001122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <UsageFault_Handler+0x4>

0800112e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001142:	f003 ff38 	bl	8004fb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20004b8c 	.word	0x20004b8c

08001150 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <OTG_FS_IRQHandler+0x10>)
 8001156:	f001 f865 	bl	8002224 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20005018 	.word	0x20005018

08001164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <_sbrk+0x5c>)
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <_sbrk+0x60>)
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <_sbrk+0x64>)
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <_sbrk+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d207      	bcs.n	80011a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001194:	f00a ffcc 	bl	800c130 <__errno>
 8001198:	4602      	mov	r2, r0
 800119a:	230c      	movs	r3, #12
 800119c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	e009      	b.n	80011b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <_sbrk+0x64>)
 80011b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20020000 	.word	0x20020000
 80011c4:	00000400 	.word	0x00000400
 80011c8:	200000b0 	.word	0x200000b0
 80011cc:	200052e0 	.word	0x200052e0

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <SystemInit+0x28>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011da:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <SystemInit+0x28>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <SystemInit+0x28>)
 80011e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ea:	609a      	str	r2, [r3, #8]
#endif
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001234 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001200:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001202:	e003      	b.n	800120c <LoopCopyDataInit>

08001204 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001206:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001208:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800120a:	3104      	adds	r1, #4

0800120c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800120c:	480b      	ldr	r0, [pc, #44]	; (800123c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001210:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001212:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001214:	d3f6      	bcc.n	8001204 <CopyDataInit>
  ldr  r2, =_sbss
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001218:	e002      	b.n	8001220 <LoopFillZerobss>

0800121a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800121a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800121c:	f842 3b04 	str.w	r3, [r2], #4

08001220 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001222:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001224:	d3f9      	bcc.n	800121a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001226:	f7ff ffd3 	bl	80011d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122a:	f00a ff87 	bl	800c13c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff f977 	bl	8000520 <main>
  bx  lr    
 8001232:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001234:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001238:	0800c460 	.word	0x0800c460
  ldr  r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001240:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001244:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001248:	200052e0 	.word	0x200052e0

0800124c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <HAL_Init+0x40>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_Init+0x40>)
 8001266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_Init+0x40>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 fb5c 	bl	8001936 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff feec 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001284:	f7ff fcc4 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20004bcc 	.word	0x20004bcc

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20004bcc 	.word	0x20004bcc

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_Delay+0x40>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000008 	.word	0x20000008

08001318 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e033      	b.n	8001396 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fc96 	bl	8000c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2b00      	cmp	r3, #0
 8001354:	d118      	bne.n	8001388 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800135e:	f023 0302 	bic.w	r3, r3, #2
 8001362:	f043 0202 	orr.w	r2, r3, #2
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f93a 	bl	80015e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f023 0303 	bic.w	r3, r3, #3
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	641a      	str	r2, [r3, #64]	; 0x40
 8001386:	e001      	b.n	800138c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x1c>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e105      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x228>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b09      	cmp	r3, #9
 80013ca:	d925      	bls.n	8001418 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68d9      	ldr	r1, [r3, #12]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	4613      	mov	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	3b1e      	subs	r3, #30
 80013e2:	2207      	movs	r2, #7
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43da      	mvns	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	400a      	ands	r2, r1
 80013f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68d9      	ldr	r1, [r3, #12]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	4603      	mov	r3, r0
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4403      	add	r3, r0
 800140a:	3b1e      	subs	r3, #30
 800140c:	409a      	lsls	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	e022      	b.n	800145e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6919      	ldr	r1, [r3, #16]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	2207      	movs	r2, #7
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	400a      	ands	r2, r1
 800143a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6919      	ldr	r1, [r3, #16]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	4603      	mov	r3, r0
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4403      	add	r3, r0
 8001454:	409a      	lsls	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b06      	cmp	r3, #6
 8001464:	d824      	bhi.n	80014b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	3b05      	subs	r3, #5
 8001478:	221f      	movs	r2, #31
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	400a      	ands	r2, r1
 8001486:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	3b05      	subs	r3, #5
 80014a2:	fa00 f203 	lsl.w	r2, r0, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
 80014ae:	e04c      	b.n	800154a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b0c      	cmp	r3, #12
 80014b6:	d824      	bhi.n	8001502 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	3b23      	subs	r3, #35	; 0x23
 80014ca:	221f      	movs	r2, #31
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43da      	mvns	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	400a      	ands	r2, r1
 80014d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	3b23      	subs	r3, #35	; 0x23
 80014f4:	fa00 f203 	lsl.w	r2, r0, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001500:	e023      	b.n	800154a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	3b41      	subs	r3, #65	; 0x41
 8001514:	221f      	movs	r2, #31
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	400a      	ands	r2, r1
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	4618      	mov	r0, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	3b41      	subs	r3, #65	; 0x41
 800153e:	fa00 f203 	lsl.w	r2, r0, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <HAL_ADC_ConfigChannel+0x234>)
 800154c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <HAL_ADC_ConfigChannel+0x238>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d109      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1cc>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b12      	cmp	r3, #18
 800155e:	d105      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_ADC_ConfigChannel+0x238>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d123      	bne.n	80015be <HAL_ADC_ConfigChannel+0x21e>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b10      	cmp	r3, #16
 800157c:	d003      	beq.n	8001586 <HAL_ADC_ConfigChannel+0x1e6>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b11      	cmp	r3, #17
 8001584:	d11b      	bne.n	80015be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b10      	cmp	r3, #16
 8001598:	d111      	bne.n	80015be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_ADC_ConfigChannel+0x23c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <HAL_ADC_ConfigChannel+0x240>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	0c9a      	lsrs	r2, r3, #18
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	e002      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f9      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40012300 	.word	0x40012300
 80015d8:	40012000 	.word	0x40012000
 80015dc:	20000000 	.word	0x20000000
 80015e0:	431bde83 	.word	0x431bde83

080015e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ec:	4b79      	ldr	r3, [pc, #484]	; (80017d4 <ADC_Init+0x1f0>)
 80015ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	431a      	orrs	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	021a      	lsls	r2, r3, #8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800163c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800165e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6899      	ldr	r1, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	4a58      	ldr	r2, [pc, #352]	; (80017d8 <ADC_Init+0x1f4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d022      	beq.n	80016c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800168a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6899      	ldr	r1, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6899      	ldr	r1, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	e00f      	b.n	80016e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0202 	bic.w	r2, r2, #2
 80016f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6899      	ldr	r1, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7e1b      	ldrb	r3, [r3, #24]
 80016fc:	005a      	lsls	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d01b      	beq.n	8001748 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800171e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800172e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6859      	ldr	r1, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	3b01      	subs	r3, #1
 800173c:	035a      	lsls	r2, r3, #13
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	e007      	b.n	8001758 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001756:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	3b01      	subs	r3, #1
 8001774:	051a      	lsls	r2, r3, #20
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800178c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6899      	ldr	r1, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800179a:	025a      	lsls	r2, r3, #9
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6899      	ldr	r1, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	029a      	lsls	r2, r3, #10
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40012300 	.word	0x40012300
 80017d8:	0f000001 	.word	0x0f000001

080017dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180e:	4a04      	ldr	r2, [pc, #16]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60d3      	str	r3, [r2, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db0b      	blt.n	800186a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	4907      	ldr	r1, [pc, #28]	; (8001878 <__NVIC_EnableIRQ+0x38>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	2001      	movs	r0, #1
 8001862:	fa00 f202 	lsl.w	r2, r0, r2
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	; (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	; 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff ff4c 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800195e:	f7ff ff61 	bl	8001824 <__NVIC_GetPriorityGrouping>
 8001962:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	6978      	ldr	r0, [r7, #20]
 800196a:	f7ff ffb1 	bl	80018d0 <NVIC_EncodePriority>
 800196e:	4602      	mov	r2, r0
 8001970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff80 	bl	800187c <__NVIC_SetPriority>
}
 800197c:	bf00      	nop
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ff54 	bl	8001840 <__NVIC_EnableIRQ>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	e16b      	b.n	8001c94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019bc:	2201      	movs	r2, #1
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	f040 815a 	bne.w	8001c8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d00b      	beq.n	80019fa <HAL_GPIO_Init+0x5a>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d007      	beq.n	80019fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ee:	2b11      	cmp	r3, #17
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d130      	bne.n	8001a5c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a30:	2201      	movs	r2, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 0201 	and.w	r2, r3, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0xfc>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b12      	cmp	r3, #18
 8001a9a:	d123      	bne.n	8001ae4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	08da      	lsrs	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3208      	adds	r2, #8
 8001aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	220f      	movs	r2, #15
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	08da      	lsrs	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3208      	adds	r2, #8
 8001ade:	69b9      	ldr	r1, [r7, #24]
 8001ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0203 	and.w	r2, r3, #3
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80b4 	beq.w	8001c8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ca8 <HAL_GPIO_Init+0x308>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a5e      	ldr	r2, [pc, #376]	; (8001ca8 <HAL_GPIO_Init+0x308>)
 8001b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b5c      	ldr	r3, [pc, #368]	; (8001ca8 <HAL_GPIO_Init+0x308>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b42:	4a5a      	ldr	r2, [pc, #360]	; (8001cac <HAL_GPIO_Init+0x30c>)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a51      	ldr	r2, [pc, #324]	; (8001cb0 <HAL_GPIO_Init+0x310>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d02b      	beq.n	8001bc6 <HAL_GPIO_Init+0x226>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a50      	ldr	r2, [pc, #320]	; (8001cb4 <HAL_GPIO_Init+0x314>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d025      	beq.n	8001bc2 <HAL_GPIO_Init+0x222>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4f      	ldr	r2, [pc, #316]	; (8001cb8 <HAL_GPIO_Init+0x318>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d01f      	beq.n	8001bbe <HAL_GPIO_Init+0x21e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4e      	ldr	r2, [pc, #312]	; (8001cbc <HAL_GPIO_Init+0x31c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d019      	beq.n	8001bba <HAL_GPIO_Init+0x21a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4d      	ldr	r2, [pc, #308]	; (8001cc0 <HAL_GPIO_Init+0x320>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_GPIO_Init+0x216>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4c      	ldr	r2, [pc, #304]	; (8001cc4 <HAL_GPIO_Init+0x324>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00d      	beq.n	8001bb2 <HAL_GPIO_Init+0x212>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4b      	ldr	r2, [pc, #300]	; (8001cc8 <HAL_GPIO_Init+0x328>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d007      	beq.n	8001bae <HAL_GPIO_Init+0x20e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4a      	ldr	r2, [pc, #296]	; (8001ccc <HAL_GPIO_Init+0x32c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d101      	bne.n	8001baa <HAL_GPIO_Init+0x20a>
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	e00e      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001baa:	2308      	movs	r3, #8
 8001bac:	e00c      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001bae:	2306      	movs	r3, #6
 8001bb0:	e00a      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	e008      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e004      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_GPIO_Init+0x228>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f002 0203 	and.w	r2, r2, #3
 8001bce:	0092      	lsls	r2, r2, #2
 8001bd0:	4093      	lsls	r3, r2
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd8:	4934      	ldr	r1, [pc, #208]	; (8001cac <HAL_GPIO_Init+0x30c>)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be6:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <HAL_GPIO_Init+0x330>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c0a:	4a31      	ldr	r2, [pc, #196]	; (8001cd0 <HAL_GPIO_Init+0x330>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c10:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <HAL_GPIO_Init+0x330>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c34:	4a26      	ldr	r2, [pc, #152]	; (8001cd0 <HAL_GPIO_Init+0x330>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c3a:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_GPIO_Init+0x330>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c5e:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <HAL_GPIO_Init+0x330>)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c64:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_GPIO_Init+0x330>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c88:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <HAL_GPIO_Init+0x330>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3301      	adds	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b0f      	cmp	r3, #15
 8001c98:	f67f ae90 	bls.w	80019bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3724      	adds	r7, #36	; 0x24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40013800 	.word	0x40013800
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40021400 	.word	0x40021400
 8001cc8:	40021800 	.word	0x40021800
 8001ccc:	40021c00 	.word	0x40021c00
 8001cd0:	40013c00 	.word	0x40013c00

08001cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf0:	e003      	b.n	8001cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	041a      	lsls	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	619a      	str	r2, [r3, #24]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d08:	b08f      	sub	sp, #60	; 0x3c
 8001d0a:	af0a      	add	r7, sp, #40	; 0x28
 8001d0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e054      	b.n	8001dc2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f009 ff4e 	bl	800bbd4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 ff4e 	bl	8005bf8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	687e      	ldr	r6, [r7, #4]
 8001d64:	466d      	mov	r5, sp
 8001d66:	f106 0410 	add.w	r4, r6, #16
 8001d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d7a:	1d33      	adds	r3, r6, #4
 8001d7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d7e:	6838      	ldr	r0, [r7, #0]
 8001d80:	f003 fec8 	bl	8005b14 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 ff45 	bl	8005c1a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	687e      	ldr	r6, [r7, #4]
 8001d98:	466d      	mov	r5, sp
 8001d9a:	f106 0410 	add.w	r4, r6, #16
 8001d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001daa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dae:	1d33      	adds	r3, r6, #4
 8001db0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db2:	6838      	ldr	r0, [r7, #0]
 8001db4:	f004 f858 	bl	8005e68 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001dca:	b590      	push	{r4, r7, lr}
 8001dcc:	b089      	sub	sp, #36	; 0x24
 8001dce:	af04      	add	r7, sp, #16
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	4608      	mov	r0, r1
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4603      	mov	r3, r0
 8001dda:	70fb      	strb	r3, [r7, #3]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	70bb      	strb	r3, [r7, #2]
 8001de0:	4613      	mov	r3, r2
 8001de2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_HCD_HC_Init+0x28>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e07f      	b.n	8001ef2 <HAL_HCD_HC_Init+0x128>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	440b      	add	r3, r1
 8001e08:	333d      	adds	r3, #61	; 0x3d
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e0e:	78fa      	ldrb	r2, [r7, #3]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	440b      	add	r3, r1
 8001e1c:	3338      	adds	r3, #56	; 0x38
 8001e1e:	787a      	ldrb	r2, [r7, #1]
 8001e20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e22:	78fa      	ldrb	r2, [r7, #3]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	3340      	adds	r3, #64	; 0x40
 8001e32:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e34:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e36:	78fa      	ldrb	r2, [r7, #3]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	3339      	adds	r3, #57	; 0x39
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e4a:	78fa      	ldrb	r2, [r7, #3]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	333f      	adds	r3, #63	; 0x3f
 8001e5a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	78bb      	ldrb	r3, [r7, #2]
 8001e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e68:	b2d8      	uxtb	r0, r3
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	440b      	add	r3, r1
 8001e76:	333a      	adds	r3, #58	; 0x3a
 8001e78:	4602      	mov	r2, r0
 8001e7a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001e7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	da0a      	bge.n	8001e9a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	333b      	adds	r3, #59	; 0x3b
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	e009      	b.n	8001eae <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001e9a:	78fa      	ldrb	r2, [r7, #3]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	440b      	add	r3, r1
 8001ea8:	333b      	adds	r3, #59	; 0x3b
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001eae:	78fa      	ldrb	r2, [r7, #3]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	333c      	adds	r3, #60	; 0x3c
 8001ebe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ec2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	787c      	ldrb	r4, [r7, #1]
 8001eca:	78ba      	ldrb	r2, [r7, #2]
 8001ecc:	78f9      	ldrb	r1, [r7, #3]
 8001ece:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ed0:	9302      	str	r3, [sp, #8]
 8001ed2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	4623      	mov	r3, r4
 8001ee0:	f004 f944 	bl	800616c <USB_HC_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}

08001efa <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_HCD_HC_Halt+0x1e>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e00f      	b.n	8001f38 <HAL_HCD_HC_Halt+0x3e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f004 fb80 	bl	800662e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	4608      	mov	r0, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	70fb      	strb	r3, [r7, #3]
 8001f52:	460b      	mov	r3, r1
 8001f54:	70bb      	strb	r3, [r7, #2]
 8001f56:	4613      	mov	r3, r2
 8001f58:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f5a:	78fa      	ldrb	r2, [r7, #3]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	440b      	add	r3, r1
 8001f68:	333b      	adds	r3, #59	; 0x3b
 8001f6a:	78ba      	ldrb	r2, [r7, #2]
 8001f6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	333f      	adds	r3, #63	; 0x3f
 8001f7e:	787a      	ldrb	r2, [r7, #1]
 8001f80:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f82:	7c3b      	ldrb	r3, [r7, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d114      	bne.n	8001fb2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	3342      	adds	r3, #66	; 0x42
 8001f98:	2203      	movs	r2, #3
 8001f9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	333d      	adds	r3, #61	; 0x3d
 8001fac:	7f3a      	ldrb	r2, [r7, #28]
 8001fae:	701a      	strb	r2, [r3, #0]
 8001fb0:	e009      	b.n	8001fc6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	3342      	adds	r3, #66	; 0x42
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001fc6:	787b      	ldrb	r3, [r7, #1]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	f200 80d6 	bhi.w	800217a <HAL_HCD_HC_SubmitRequest+0x23a>
 8001fce:	a201      	add	r2, pc, #4	; (adr r2, 8001fd4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd4:	08001fe5 	.word	0x08001fe5
 8001fd8:	08002165 	.word	0x08002165
 8001fdc:	08002051 	.word	0x08002051
 8001fe0:	080020db 	.word	0x080020db
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001fe4:	7c3b      	ldrb	r3, [r7, #16]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	f040 80c9 	bne.w	800217e <HAL_HCD_HC_SubmitRequest+0x23e>
 8001fec:	78bb      	ldrb	r3, [r7, #2]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f040 80c5 	bne.w	800217e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001ff4:	8b3b      	ldrh	r3, [r7, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d109      	bne.n	800200e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001ffa:	78fa      	ldrb	r2, [r7, #3]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	440b      	add	r3, r1
 8002008:	3351      	adds	r3, #81	; 0x51
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	440b      	add	r3, r1
 800201c:	3351      	adds	r3, #81	; 0x51
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10a      	bne.n	800203a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	3342      	adds	r3, #66	; 0x42
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002038:	e0a1      	b.n	800217e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	440b      	add	r3, r1
 8002048:	3342      	adds	r3, #66	; 0x42
 800204a:	2202      	movs	r2, #2
 800204c:	701a      	strb	r2, [r3, #0]
      break;
 800204e:	e096      	b.n	800217e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002050:	78bb      	ldrb	r3, [r7, #2]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d120      	bne.n	8002098 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	3351      	adds	r3, #81	; 0x51
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10a      	bne.n	8002082 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800206c:	78fa      	ldrb	r2, [r7, #3]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	440b      	add	r3, r1
 800207a:	3342      	adds	r3, #66	; 0x42
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002080:	e07e      	b.n	8002180 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	440b      	add	r3, r1
 8002090:	3342      	adds	r3, #66	; 0x42
 8002092:	2202      	movs	r2, #2
 8002094:	701a      	strb	r2, [r3, #0]
      break;
 8002096:	e073      	b.n	8002180 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	440b      	add	r3, r1
 80020a6:	3350      	adds	r3, #80	; 0x50
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10a      	bne.n	80020c4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	3342      	adds	r3, #66	; 0x42
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
      break;
 80020c2:	e05d      	b.n	8002180 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	3342      	adds	r3, #66	; 0x42
 80020d4:	2202      	movs	r2, #2
 80020d6:	701a      	strb	r2, [r3, #0]
      break;
 80020d8:	e052      	b.n	8002180 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80020da:	78bb      	ldrb	r3, [r7, #2]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d120      	bne.n	8002122 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020e0:	78fa      	ldrb	r2, [r7, #3]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	3351      	adds	r3, #81	; 0x51
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10a      	bne.n	800210c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020f6:	78fa      	ldrb	r2, [r7, #3]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	3342      	adds	r3, #66	; 0x42
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800210a:	e039      	b.n	8002180 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800210c:	78fa      	ldrb	r2, [r7, #3]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	3342      	adds	r3, #66	; 0x42
 800211c:	2202      	movs	r2, #2
 800211e:	701a      	strb	r2, [r3, #0]
      break;
 8002120:	e02e      	b.n	8002180 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	3350      	adds	r3, #80	; 0x50
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10a      	bne.n	800214e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	440b      	add	r3, r1
 8002146:	3342      	adds	r3, #66	; 0x42
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
      break;
 800214c:	e018      	b.n	8002180 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	440b      	add	r3, r1
 800215c:	3342      	adds	r3, #66	; 0x42
 800215e:	2202      	movs	r2, #2
 8002160:	701a      	strb	r2, [r3, #0]
      break;
 8002162:	e00d      	b.n	8002180 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	3342      	adds	r3, #66	; 0x42
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
      break;
 8002178:	e002      	b.n	8002180 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800217a:	bf00      	nop
 800217c:	e000      	b.n	8002180 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800217e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	3344      	adds	r3, #68	; 0x44
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	8b39      	ldrh	r1, [r7, #24]
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4403      	add	r3, r0
 80021a4:	3348      	adds	r3, #72	; 0x48
 80021a6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	440b      	add	r3, r1
 80021b6:	335c      	adds	r3, #92	; 0x5c
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	334c      	adds	r3, #76	; 0x4c
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	3339      	adds	r3, #57	; 0x39
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	440b      	add	r3, r1
 80021f2:	335d      	adds	r3, #93	; 0x5d
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	3338      	adds	r3, #56	; 0x38
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	18d1      	adds	r1, r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	f004 f8b4 	bl	8006380 <USB_HC_StartXfer>
 8002218:	4603      	mov	r3, r0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop

08002224 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f003 fdd1 	bl	8005de2 <USB_GetMode>
 8002240:	4603      	mov	r3, r0
 8002242:	2b01      	cmp	r3, #1
 8002244:	f040 80ef 	bne.w	8002426 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f003 fdb5 	bl	8005dbc <USB_ReadInterrupts>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80e5 	beq.w	8002424 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f003 fdac 	bl	8005dbc <USB_ReadInterrupts>
 8002264:	4603      	mov	r3, r0
 8002266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800226e:	d104      	bne.n	800227a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002278:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f003 fd9c 	bl	8005dbc <USB_ReadInterrupts>
 8002284:	4603      	mov	r3, r0
 8002286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800228e:	d104      	bne.n	800229a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002298:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 fd8c 	bl	8005dbc <USB_ReadInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022ae:	d104      	bne.n	80022ba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f003 fd7c 	bl	8005dbc <USB_ReadInterrupts>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d103      	bne.n	80022d6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2202      	movs	r2, #2
 80022d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 fd6e 	bl	8005dbc <USB_ReadInterrupts>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ea:	d115      	bne.n	8002318 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022f4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d108      	bne.n	8002318 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f009 fce2 	bl	800bcd0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fe64 	bl	8005fe0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f003 fd4d 	bl	8005dbc <USB_ReadInterrupts>
 8002322:	4603      	mov	r3, r0
 8002324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800232c:	d102      	bne.n	8002334 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f001 f966 	bl	8003600 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f003 fd3f 	bl	8005dbc <USB_ReadInterrupts>
 800233e:	4603      	mov	r3, r0
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b08      	cmp	r3, #8
 8002346:	d106      	bne.n	8002356 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f009 fca5 	bl	800bc98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2208      	movs	r2, #8
 8002354:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f003 fd2e 	bl	8005dbc <USB_ReadInterrupts>
 8002360:	4603      	mov	r3, r0
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800236a:	d138      	bne.n	80023de <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f004 f94b 	bl	800660c <USB_HC_ReadInterrupt>
 8002376:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	e025      	b.n	80023ca <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d018      	beq.n	80023c4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023a8:	d106      	bne.n	80023b8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	4619      	mov	r1, r3
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f8cf 	bl	8002554 <HCD_HC_IN_IRQHandler>
 80023b6:	e005      	b.n	80023c4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	4619      	mov	r1, r3
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fcfd 	bl	8002dbe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3301      	adds	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d3d4      	bcc.n	800237e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f003 fcea 	bl	8005dbc <USB_ReadInterrupts>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d101      	bne.n	80023f6 <HAL_HCD_IRQHandler+0x1d2>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_HCD_IRQHandler+0x1d4>
 80023f6:	2300      	movs	r3, #0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d014      	beq.n	8002426 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0210 	bic.w	r2, r2, #16
 800240a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f001 f84b 	bl	80034a8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699a      	ldr	r2, [r3, #24]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0210 	orr.w	r2, r2, #16
 8002420:	619a      	str	r2, [r3, #24]
 8002422:	e000      	b.n	8002426 <HAL_HCD_IRQHandler+0x202>
      return;
 8002424:	bf00      	nop
    }
  }
}
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_HCD_Start+0x16>
 800243e:	2302      	movs	r3, #2
 8002440:	e013      	b.n	800246a <HAL_HCD_Start+0x3e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f003 fbc1 	bl	8005bd6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2101      	movs	r1, #1
 800245a:	4618      	mov	r0, r3
 800245c:	f003 fe24 	bl	80060a8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_HCD_Stop+0x16>
 8002484:	2302      	movs	r3, #2
 8002486:	e00d      	b.n	80024a4 <HAL_HCD_Stop+0x32>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f004 fa05 	bl	80068a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 fdcb 	bl	8006054 <USB_ResetPort>
 80024be:	4603      	mov	r3, r0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	335c      	adds	r3, #92	; 0x5c
 80024e4:	781b      	ldrb	r3, [r3, #0]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	440b      	add	r3, r1
 800250c:	334c      	adds	r3, #76	; 0x4c
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f003 fe0d 	bl	8006148 <USB_GetCurrentFrame>
 800252e:	4603      	mov	r3, r0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f003 fde8 	bl	800611a <USB_GetHostSpeed>
 800254a:	4603      	mov	r3, r0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b04      	cmp	r3, #4
 8002582:	d119      	bne.n	80025b8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002590:	461a      	mov	r2, r3
 8002592:	2304      	movs	r3, #4
 8002594:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	0151      	lsls	r1, r2, #5
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	440a      	add	r2, r1
 80025ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	60d3      	str	r3, [r2, #12]
 80025b6:	e0ce      	b.n	8002756 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ce:	d12c      	bne.n	800262a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	461a      	mov	r2, r3
 80025de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	335d      	adds	r3, #93	; 0x5d
 80025f4:	2207      	movs	r2, #7
 80025f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	0151      	lsls	r1, r2, #5
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	440a      	add	r2, r1
 800260e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f004 f803 	bl	800662e <USB_HC_Halt>
 8002628:	e095      	b.n	8002756 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b20      	cmp	r3, #32
 800263e:	d109      	bne.n	8002654 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	461a      	mov	r2, r3
 800264e:	2320      	movs	r3, #32
 8002650:	6093      	str	r3, [r2, #8]
 8002652:	e080      	b.n	8002756 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b08      	cmp	r3, #8
 8002668:	d134      	bne.n	80026d4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4413      	add	r3, r2
 8002672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	0151      	lsls	r1, r2, #5
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	440a      	add	r2, r1
 8002680:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002684:	f043 0302 	orr.w	r3, r3, #2
 8002688:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	335d      	adds	r3, #93	; 0x5d
 800269a:	2205      	movs	r2, #5
 800269c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026aa:	461a      	mov	r2, r3
 80026ac:	2310      	movs	r3, #16
 80026ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	461a      	mov	r2, r3
 80026be:	2308      	movs	r3, #8
 80026c0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 ffae 	bl	800662e <USB_HC_Halt>
 80026d2:	e040      	b.n	8002756 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ea:	d134      	bne.n	8002756 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	0151      	lsls	r1, r2, #5
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	440a      	add	r2, r1
 8002702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f003 ff89 	bl	800662e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	461a      	mov	r2, r3
 800272a:	2310      	movs	r3, #16
 800272c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	440b      	add	r3, r1
 800273c:	335d      	adds	r3, #93	; 0x5d
 800273e:	2208      	movs	r2, #8
 8002740:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274e:	461a      	mov	r2, r3
 8002750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002754:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800276c:	d122      	bne.n	80027b4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4413      	add	r3, r2
 8002776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	0151      	lsls	r1, r2, #5
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	440a      	add	r2, r1
 8002784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f003 ff48 	bl	800662e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027aa:	461a      	mov	r2, r3
 80027ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027b0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80027b2:	e300      	b.n	8002db6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	f040 80fd 	bne.w	80029c6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01b      	beq.n	800280c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	440b      	add	r3, r1
 80027e2:	3348      	adds	r3, #72	; 0x48
 80027e4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	0159      	lsls	r1, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	440b      	add	r3, r1
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80027f8:	1ad1      	subs	r1, r2, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4403      	add	r3, r0
 8002808:	334c      	adds	r3, #76	; 0x4c
 800280a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	335d      	adds	r3, #93	; 0x5d
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	3358      	adds	r3, #88	; 0x58
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	461a      	mov	r2, r3
 8002842:	2301      	movs	r3, #1
 8002844:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	333f      	adds	r3, #63	; 0x3f
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	440b      	add	r3, r1
 800286a:	333f      	adds	r3, #63	; 0x3f
 800286c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800286e:	2b02      	cmp	r3, #2
 8002870:	d121      	bne.n	80028b6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	0151      	lsls	r1, r2, #5
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	440a      	add	r2, r1
 8002888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f003 fec6 	bl	800662e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ae:	461a      	mov	r2, r3
 80028b0:	2310      	movs	r3, #16
 80028b2:	6093      	str	r3, [r2, #8]
 80028b4:	e070      	b.n	8002998 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	333f      	adds	r3, #63	; 0x3f
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d12a      	bne.n	8002922 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	0151      	lsls	r1, r2, #5
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	440a      	add	r2, r1
 80028e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028ea:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	440b      	add	r3, r1
 80028fa:	335c      	adds	r3, #92	; 0x5c
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	b2d8      	uxtb	r0, r3
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	440b      	add	r3, r1
 8002912:	335c      	adds	r3, #92	; 0x5c
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	4601      	mov	r1, r0
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f009 f9e6 	bl	800bcec <HAL_HCD_HC_NotifyURBChange_Callback>
 8002920:	e03a      	b.n	8002998 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	333f      	adds	r3, #63	; 0x3f
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d12f      	bne.n	8002998 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	335c      	adds	r3, #92	; 0x5c
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	440b      	add	r3, r1
 800295a:	3350      	adds	r3, #80	; 0x50
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	f083 0301 	eor.w	r3, r3, #1
 8002962:	b2d8      	uxtb	r0, r3
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	3350      	adds	r3, #80	; 0x50
 8002974:	4602      	mov	r2, r0
 8002976:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	b2d8      	uxtb	r0, r3
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	335c      	adds	r3, #92	; 0x5c
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	4601      	mov	r1, r0
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f009 f9aa 	bl	800bcec <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	3350      	adds	r3, #80	; 0x50
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	f083 0301 	eor.w	r3, r3, #1
 80029ae:	b2d8      	uxtb	r0, r3
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	440b      	add	r3, r1
 80029be:	3350      	adds	r3, #80	; 0x50
 80029c0:	4602      	mov	r2, r0
 80029c2:	701a      	strb	r2, [r3, #0]
}
 80029c4:	e1f7      	b.n	8002db6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b02      	cmp	r3, #2
 80029da:	f040 811a 	bne.w	8002c12 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	0151      	lsls	r1, r2, #5
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	440a      	add	r2, r1
 80029f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f8:	f023 0302 	bic.w	r3, r3, #2
 80029fc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	440b      	add	r3, r1
 8002a0c:	335d      	adds	r3, #93	; 0x5d
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d10a      	bne.n	8002a2a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	335c      	adds	r3, #92	; 0x5c
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
 8002a28:	e0d9      	b.n	8002bde <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	335d      	adds	r3, #93	; 0x5d
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d10a      	bne.n	8002a56 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	335c      	adds	r3, #92	; 0x5c
 8002a50:	2205      	movs	r2, #5
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e0c3      	b.n	8002bde <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	335d      	adds	r3, #93	; 0x5d
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b06      	cmp	r3, #6
 8002a6a:	d00a      	beq.n	8002a82 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	335d      	adds	r3, #93	; 0x5d
 8002a7c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d156      	bne.n	8002b30 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	440b      	add	r3, r1
 8002a90:	3358      	adds	r3, #88	; 0x58
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	1c59      	adds	r1, r3, #1
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4403      	add	r3, r0
 8002aa4:	3358      	adds	r3, #88	; 0x58
 8002aa6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3358      	adds	r3, #88	; 0x58
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d914      	bls.n	8002ae8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	440b      	add	r3, r1
 8002acc:	3358      	adds	r3, #88	; 0x58
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	440b      	add	r3, r1
 8002ae0:	335c      	adds	r3, #92	; 0x5c
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	e009      	b.n	8002afc <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	440b      	add	r3, r1
 8002af6:	335c      	adds	r3, #92	; 0x5c
 8002af8:	2202      	movs	r2, #2
 8002afa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b12:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b1a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e056      	b.n	8002bde <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	335d      	adds	r3, #93	; 0x5d
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d123      	bne.n	8002b8e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	335c      	adds	r3, #92	; 0x5c
 8002b56:	2202      	movs	r2, #2
 8002b58:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b70:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b78:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	461a      	mov	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	e027      	b.n	8002bde <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	440b      	add	r3, r1
 8002b9c:	335d      	adds	r3, #93	; 0x5d
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b07      	cmp	r3, #7
 8002ba2:	d11c      	bne.n	8002bde <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3358      	adds	r3, #88	; 0x58
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	1c59      	adds	r1, r3, #1
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4403      	add	r3, r0
 8002bc6:	3358      	adds	r3, #88	; 0x58
 8002bc8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	335c      	adds	r3, #92	; 0x5c
 8002bda:	2204      	movs	r2, #4
 8002bdc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bea:	461a      	mov	r2, r3
 8002bec:	2302      	movs	r3, #2
 8002bee:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	b2d8      	uxtb	r0, r3
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	335c      	adds	r3, #92	; 0x5c
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	4601      	mov	r1, r0
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f009 f86e 	bl	800bcec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c10:	e0d1      	b.n	8002db6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c24:	2b80      	cmp	r3, #128	; 0x80
 8002c26:	d13e      	bne.n	8002ca6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	0151      	lsls	r1, r2, #5
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	440a      	add	r2, r1
 8002c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c42:	f043 0302 	orr.w	r3, r3, #2
 8002c46:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	3358      	adds	r3, #88	; 0x58
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	1c59      	adds	r1, r3, #1
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4403      	add	r3, r0
 8002c6a:	3358      	adds	r3, #88	; 0x58
 8002c6c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	335d      	adds	r3, #93	; 0x5d
 8002c7e:	2206      	movs	r2, #6
 8002c80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f003 fcce 	bl	800662e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	6093      	str	r3, [r2, #8]
}
 8002ca4:	e087      	b.n	8002db6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d17c      	bne.n	8002db6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	440b      	add	r3, r1
 8002cca:	333f      	adds	r3, #63	; 0x3f
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d122      	bne.n	8002d18 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	440b      	add	r3, r1
 8002ce0:	3358      	adds	r3, #88	; 0x58
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	0151      	lsls	r1, r2, #5
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	440a      	add	r2, r1
 8002cfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f003 fc8c 	bl	800662e <USB_HC_Halt>
 8002d16:	e045      	b.n	8002da4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	333f      	adds	r3, #63	; 0x3f
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	333f      	adds	r3, #63	; 0x3f
 8002d3e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d12f      	bne.n	8002da4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	3358      	adds	r3, #88	; 0x58
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d121      	bne.n	8002da4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	440b      	add	r3, r1
 8002d6e:	335d      	adds	r3, #93	; 0x5d
 8002d70:	2203      	movs	r2, #3
 8002d72:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	0151      	lsls	r1, r2, #5
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	440a      	add	r2, r1
 8002d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d8e:	f043 0302 	orr.w	r3, r3, #2
 8002d92:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f003 fc45 	bl	800662e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db0:	461a      	mov	r2, r3
 8002db2:	2310      	movs	r3, #16
 8002db4:	6093      	str	r3, [r2, #8]
}
 8002db6:	bf00      	nop
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d119      	bne.n	8002e22 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	0151      	lsls	r1, r2, #5
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	440a      	add	r2, r1
 8002e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e1a:	f043 0302 	orr.w	r3, r3, #2
 8002e1e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002e20:	e33e      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d141      	bne.n	8002ebc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e44:	461a      	mov	r2, r3
 8002e46:	2320      	movs	r3, #32
 8002e48:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	333d      	adds	r3, #61	; 0x3d
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	f040 831f 	bne.w	80034a0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	333d      	adds	r3, #61	; 0x3d
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	440b      	add	r3, r1
 8002e84:	335c      	adds	r3, #92	; 0x5c
 8002e86:	2202      	movs	r2, #2
 8002e88:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	0151      	lsls	r1, r2, #5
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	440a      	add	r2, r1
 8002ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f003 fbba 	bl	800662e <USB_HC_Halt>
}
 8002eba:	e2f1      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b40      	cmp	r3, #64	; 0x40
 8002ed0:	d13f      	bne.n	8002f52 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	335d      	adds	r3, #93	; 0x5d
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	440b      	add	r3, r1
 8002ef4:	333d      	adds	r3, #61	; 0x3d
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	440b      	add	r3, r1
 8002f08:	3358      	adds	r3, #88	; 0x58
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	0151      	lsls	r1, r2, #5
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	440a      	add	r2, r1
 8002f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f28:	f043 0302 	orr.w	r3, r3, #2
 8002f2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f003 fb78 	bl	800662e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2340      	movs	r3, #64	; 0x40
 8002f4e:	6093      	str	r3, [r2, #8]
}
 8002f50:	e2a6      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f68:	d122      	bne.n	8002fb0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	0151      	lsls	r1, r2, #5
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	440a      	add	r2, r1
 8002f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 fb4a 	bl	800662e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fac:	6093      	str	r3, [r2, #8]
}
 8002fae:	e277      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d135      	bne.n	8003032 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3358      	adds	r3, #88	; 0x58
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	0151      	lsls	r1, r2, #5
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	440a      	add	r2, r1
 8002ff0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ff4:	f043 0302 	orr.w	r3, r3, #2
 8002ff8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f003 fb12 	bl	800662e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4413      	add	r3, r2
 8003012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003016:	461a      	mov	r2, r3
 8003018:	2301      	movs	r3, #1
 800301a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	440b      	add	r3, r1
 800302a:	335d      	adds	r3, #93	; 0x5d
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]
}
 8003030:	e236      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b08      	cmp	r3, #8
 8003046:	d12b      	bne.n	80030a0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003054:	461a      	mov	r2, r3
 8003056:	2308      	movs	r3, #8
 8003058:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	0151      	lsls	r1, r2, #5
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	440a      	add	r2, r1
 8003070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f003 fad2 	bl	800662e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	440b      	add	r3, r1
 8003098:	335d      	adds	r3, #93	; 0x5d
 800309a:	2205      	movs	r2, #5
 800309c:	701a      	strb	r2, [r3, #0]
}
 800309e:	e1ff      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b10      	cmp	r3, #16
 80030b4:	d155      	bne.n	8003162 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	440b      	add	r3, r1
 80030c4:	3358      	adds	r3, #88	; 0x58
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	440b      	add	r3, r1
 80030d8:	335d      	adds	r3, #93	; 0x5d
 80030da:	2203      	movs	r2, #3
 80030dc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	333d      	adds	r3, #61	; 0x3d
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d114      	bne.n	800311e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	440b      	add	r3, r1
 8003102:	333c      	adds	r3, #60	; 0x3c
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	440b      	add	r3, r1
 8003118:	333d      	adds	r3, #61	; 0x3d
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4413      	add	r3, r2
 8003126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	0151      	lsls	r1, r2, #5
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	440a      	add	r2, r1
 8003134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003138:	f043 0302 	orr.w	r3, r3, #2
 800313c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	4611      	mov	r1, r2
 8003148:	4618      	mov	r0, r3
 800314a:	f003 fa70 	bl	800662e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4413      	add	r3, r2
 8003156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315a:	461a      	mov	r2, r3
 800315c:	2310      	movs	r3, #16
 800315e:	6093      	str	r3, [r2, #8]
}
 8003160:	e19e      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d12b      	bne.n	80031d0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	0151      	lsls	r1, r2, #5
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	440a      	add	r2, r1
 800318e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003192:	f043 0302 	orr.w	r3, r3, #2
 8003196:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 fa43 	bl	800662e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	335d      	adds	r3, #93	; 0x5d
 80031b8:	2206      	movs	r2, #6
 80031ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c8:	461a      	mov	r2, r3
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	6093      	str	r3, [r2, #8]
}
 80031ce:	e167      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e6:	d135      	bne.n	8003254 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	0151      	lsls	r1, r2, #5
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	440a      	add	r2, r1
 80031fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003202:	f043 0302 	orr.w	r3, r3, #2
 8003206:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f003 fa0b 	bl	800662e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003224:	461a      	mov	r2, r3
 8003226:	2310      	movs	r3, #16
 8003228:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4413      	add	r3, r2
 8003232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003236:	461a      	mov	r2, r3
 8003238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800323c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	440b      	add	r3, r1
 800324c:	335d      	adds	r3, #93	; 0x5d
 800324e:	2208      	movs	r2, #8
 8003250:	701a      	strb	r2, [r3, #0]
}
 8003252:	e125      	b.n	80034a0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b02      	cmp	r3, #2
 8003268:	f040 811a 	bne.w	80034a0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4413      	add	r3, r2
 8003274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	0151      	lsls	r1, r2, #5
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	440a      	add	r2, r1
 8003282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003286:	f023 0302 	bic.w	r3, r3, #2
 800328a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	440b      	add	r3, r1
 800329a:	335d      	adds	r3, #93	; 0x5d
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d137      	bne.n	8003312 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	440b      	add	r3, r1
 80032b0:	335c      	adds	r3, #92	; 0x5c
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	333f      	adds	r3, #63	; 0x3f
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d00b      	beq.n	80032e4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	333f      	adds	r3, #63	; 0x3f
 80032dc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032de:	2b03      	cmp	r3, #3
 80032e0:	f040 80c5 	bne.w	800346e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	440b      	add	r3, r1
 80032f2:	3351      	adds	r3, #81	; 0x51
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	f083 0301 	eor.w	r3, r3, #1
 80032fa:	b2d8      	uxtb	r0, r3
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	440b      	add	r3, r1
 800330a:	3351      	adds	r3, #81	; 0x51
 800330c:	4602      	mov	r2, r0
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e0ad      	b.n	800346e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	335d      	adds	r3, #93	; 0x5d
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d10a      	bne.n	800333e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	335c      	adds	r3, #92	; 0x5c
 8003338:	2202      	movs	r2, #2
 800333a:	701a      	strb	r2, [r3, #0]
 800333c:	e097      	b.n	800346e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	335d      	adds	r3, #93	; 0x5d
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d10a      	bne.n	800336a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	440b      	add	r3, r1
 8003362:	335c      	adds	r3, #92	; 0x5c
 8003364:	2202      	movs	r2, #2
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	e081      	b.n	800346e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	335d      	adds	r3, #93	; 0x5d
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b05      	cmp	r3, #5
 800337e:	d10a      	bne.n	8003396 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	440b      	add	r3, r1
 800338e:	335c      	adds	r3, #92	; 0x5c
 8003390:	2205      	movs	r2, #5
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	e06b      	b.n	800346e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	440b      	add	r3, r1
 80033a4:	335d      	adds	r3, #93	; 0x5d
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b06      	cmp	r3, #6
 80033aa:	d00a      	beq.n	80033c2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	440b      	add	r3, r1
 80033ba:	335d      	adds	r3, #93	; 0x5d
 80033bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d155      	bne.n	800346e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	440b      	add	r3, r1
 80033d0:	3358      	adds	r3, #88	; 0x58
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	1c59      	adds	r1, r3, #1
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4403      	add	r3, r0
 80033e4:	3358      	adds	r3, #88	; 0x58
 80033e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	440b      	add	r3, r1
 80033f6:	3358      	adds	r3, #88	; 0x58
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d914      	bls.n	8003428 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	440b      	add	r3, r1
 800340c:	3358      	adds	r3, #88	; 0x58
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	440b      	add	r3, r1
 8003420:	335c      	adds	r3, #92	; 0x5c
 8003422:	2204      	movs	r2, #4
 8003424:	701a      	strb	r2, [r3, #0]
 8003426:	e009      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	440b      	add	r3, r1
 8003436:	335c      	adds	r3, #92	; 0x5c
 8003438:	2202      	movs	r2, #2
 800343a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003452:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800345a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003468:	461a      	mov	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4413      	add	r3, r2
 8003476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347a:	461a      	mov	r2, r3
 800347c:	2302      	movs	r3, #2
 800347e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	b2d8      	uxtb	r0, r3
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	440b      	add	r3, r1
 8003492:	335c      	adds	r3, #92	; 0x5c
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	4601      	mov	r1, r0
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f008 fc26 	bl	800bcec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80034a0:	bf00      	nop
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	0c5b      	lsrs	r3, r3, #17
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	091b      	lsrs	r3, r3, #4
 80034d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034dc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d003      	beq.n	80034ec <HCD_RXQLVL_IRQHandler+0x44>
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	f000 8082 	beq.w	80035ee <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034ea:	e083      	b.n	80035f4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d07f      	beq.n	80035f2 <HCD_RXQLVL_IRQHandler+0x14a>
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	3344      	adds	r3, #68	; 0x44
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d074      	beq.n	80035f2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	440b      	add	r3, r1
 800351a:	3344      	adds	r3, #68	; 0x44
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	b292      	uxth	r2, r2
 8003522:	4619      	mov	r1, r3
 8003524:	f002 fc21 	bl	8005d6a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	3344      	adds	r3, #68	; 0x44
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	18d1      	adds	r1, r2, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4403      	add	r3, r0
 800354c:	3344      	adds	r3, #68	; 0x44
 800354e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	440b      	add	r3, r1
 800355e:	334c      	adds	r3, #76	; 0x4c
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	18d1      	adds	r1, r2, r3
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4403      	add	r3, r0
 8003574:	334c      	adds	r3, #76	; 0x4c
 8003576:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <HCD_RXQLVL_IRQHandler+0x154>)
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d031      	beq.n	80035f2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	4413      	add	r3, r2
 8003596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035a4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035ac:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ba:	461a      	mov	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	440b      	add	r3, r1
 80035ce:	3350      	adds	r3, #80	; 0x50
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	f083 0301 	eor.w	r3, r3, #1
 80035d6:	b2d8      	uxtb	r0, r3
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	440b      	add	r3, r1
 80035e6:	3350      	adds	r3, #80	; 0x50
 80035e8:	4602      	mov	r2, r0
 80035ea:	701a      	strb	r2, [r3, #0]
      break;
 80035ec:	e001      	b.n	80035f2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80035ee:	bf00      	nop
 80035f0:	e000      	b.n	80035f4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80035f2:	bf00      	nop
  }
}
 80035f4:	bf00      	nop
 80035f6:	3728      	adds	r7, #40	; 0x28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	1ff80000 	.word	0x1ff80000

08003600 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800362c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b02      	cmp	r3, #2
 8003636:	d10b      	bne.n	8003650 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d102      	bne.n	8003648 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f008 fb36 	bl	800bcb4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f043 0302 	orr.w	r3, r3, #2
 800364e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b08      	cmp	r3, #8
 8003658:	d132      	bne.n	80036c0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f043 0308 	orr.w	r3, r3, #8
 8003660:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b04      	cmp	r3, #4
 800366a:	d126      	bne.n	80036ba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d113      	bne.n	800369c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800367a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800367e:	d106      	bne.n	800368e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2102      	movs	r1, #2
 8003686:	4618      	mov	r0, r3
 8003688:	f002 fcaa 	bl	8005fe0 <USB_InitFSLSPClkSel>
 800368c:	e011      	b.n	80036b2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2101      	movs	r1, #1
 8003694:	4618      	mov	r0, r3
 8003696:	f002 fca3 	bl	8005fe0 <USB_InitFSLSPClkSel>
 800369a:	e00a      	b.n	80036b2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d106      	bne.n	80036b2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036aa:	461a      	mov	r2, r3
 80036ac:	f64e 2360 	movw	r3, #60000	; 0xea60
 80036b0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f008 fb2c 	bl	800bd10 <HAL_HCD_PortEnabled_Callback>
 80036b8:	e002      	b.n	80036c0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f008 fb36 	bl	800bd2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d103      	bne.n	80036d2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f043 0320 	orr.w	r3, r3, #32
 80036d0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036d8:	461a      	mov	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	6013      	str	r3, [r2, #0]
}
 80036de:	bf00      	nop
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e11f      	b.n	800393a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd faee 	bl	8000cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	; 0x24
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800373a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800374a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800374c:	f001 f9de 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 8003750:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4a7b      	ldr	r2, [pc, #492]	; (8003944 <HAL_I2C_Init+0x25c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d807      	bhi.n	800376c <HAL_I2C_Init+0x84>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a7a      	ldr	r2, [pc, #488]	; (8003948 <HAL_I2C_Init+0x260>)
 8003760:	4293      	cmp	r3, r2
 8003762:	bf94      	ite	ls
 8003764:	2301      	movls	r3, #1
 8003766:	2300      	movhi	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	e006      	b.n	800377a <HAL_I2C_Init+0x92>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a77      	ldr	r2, [pc, #476]	; (800394c <HAL_I2C_Init+0x264>)
 8003770:	4293      	cmp	r3, r2
 8003772:	bf94      	ite	ls
 8003774:	2301      	movls	r3, #1
 8003776:	2300      	movhi	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0db      	b.n	800393a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a72      	ldr	r2, [pc, #456]	; (8003950 <HAL_I2C_Init+0x268>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0c9b      	lsrs	r3, r3, #18
 800378c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a64      	ldr	r2, [pc, #400]	; (8003944 <HAL_I2C_Init+0x25c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d802      	bhi.n	80037bc <HAL_I2C_Init+0xd4>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	3301      	adds	r3, #1
 80037ba:	e009      	b.n	80037d0 <HAL_I2C_Init+0xe8>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	4a63      	ldr	r2, [pc, #396]	; (8003954 <HAL_I2C_Init+0x26c>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	099b      	lsrs	r3, r3, #6
 80037ce:	3301      	adds	r3, #1
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4956      	ldr	r1, [pc, #344]	; (8003944 <HAL_I2C_Init+0x25c>)
 80037ec:	428b      	cmp	r3, r1
 80037ee:	d80d      	bhi.n	800380c <HAL_I2C_Init+0x124>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1e59      	subs	r1, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80037fe:	3301      	adds	r3, #1
 8003800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003804:	2b04      	cmp	r3, #4
 8003806:	bf38      	it	cc
 8003808:	2304      	movcc	r3, #4
 800380a:	e04f      	b.n	80038ac <HAL_I2C_Init+0x1c4>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d111      	bne.n	8003838 <HAL_I2C_Init+0x150>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1e58      	subs	r0, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	440b      	add	r3, r1
 8003822:	fbb0 f3f3 	udiv	r3, r0, r3
 8003826:	3301      	adds	r3, #1
 8003828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	e012      	b.n	800385e <HAL_I2C_Init+0x176>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1e58      	subs	r0, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6859      	ldr	r1, [r3, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	0099      	lsls	r1, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	fbb0 f3f3 	udiv	r3, r0, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_I2C_Init+0x17e>
 8003862:	2301      	movs	r3, #1
 8003864:	e022      	b.n	80038ac <HAL_I2C_Init+0x1c4>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10e      	bne.n	800388c <HAL_I2C_Init+0x1a4>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1e58      	subs	r0, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6859      	ldr	r1, [r3, #4]
 8003876:	460b      	mov	r3, r1
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	440b      	add	r3, r1
 800387c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003880:	3301      	adds	r3, #1
 8003882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800388a:	e00f      	b.n	80038ac <HAL_I2C_Init+0x1c4>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1e58      	subs	r0, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6859      	ldr	r1, [r3, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	0099      	lsls	r1, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	6809      	ldr	r1, [r1, #0]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6911      	ldr	r1, [r2, #16]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68d2      	ldr	r2, [r2, #12]
 80038e6:	4311      	orrs	r1, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	000186a0 	.word	0x000186a0
 8003948:	001e847f 	.word	0x001e847f
 800394c:	003d08ff 	.word	0x003d08ff
 8003950:	431bde83 	.word	0x431bde83
 8003954:	10624dd3 	.word	0x10624dd3

08003958 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e128      	b.n	8003bbc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d109      	bne.n	800398a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a90      	ldr	r2, [pc, #576]	; (8003bc4 <HAL_I2S_Init+0x26c>)
 8003982:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7fd f9fb 	bl	8000d80 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2202      	movs	r2, #2
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039a0:	f023 030f 	bic.w	r3, r3, #15
 80039a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2202      	movs	r2, #2
 80039ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d060      	beq.n	8003a78 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039be:	2310      	movs	r3, #16
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	e001      	b.n	80039c8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039c4:	2320      	movs	r3, #32
 80039c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d802      	bhi.n	80039d6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039d6:	2001      	movs	r0, #1
 80039d8:	f001 f9d4 	bl	8004d84 <HAL_RCCEx_GetPeriphCLKFreq>
 80039dc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e6:	d125      	bne.n	8003a34 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d010      	beq.n	8003a12 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	461a      	mov	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	3305      	adds	r3, #5
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	e01f      	b.n	8003a52 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	461a      	mov	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	3305      	adds	r3, #5
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	e00e      	b.n	8003a52 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	461a      	mov	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	3305      	adds	r3, #5
 8003a50:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4a5c      	ldr	r2, [pc, #368]	; (8003bc8 <HAL_I2S_Init+0x270>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	08db      	lsrs	r3, r3, #3
 8003a5c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e003      	b.n	8003a80 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d902      	bls.n	8003a8c <HAL_I2S_Init+0x134>
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	2bff      	cmp	r3, #255	; 0xff
 8003a8a:	d907      	bls.n	8003a9c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a90:	f043 0210 	orr.w	r2, r3, #16
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e08f      	b.n	8003bbc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	ea42 0103 	orr.w	r1, r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003aba:	f023 030f 	bic.w	r3, r3, #15
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6851      	ldr	r1, [r2, #4]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6892      	ldr	r2, [r2, #8]
 8003ac6:	4311      	orrs	r1, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	68d2      	ldr	r2, [r2, #12]
 8003acc:	4311      	orrs	r1, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6992      	ldr	r2, [r2, #24]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ade:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d161      	bne.n	8003bac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a38      	ldr	r2, [pc, #224]	; (8003bcc <HAL_I2S_Init+0x274>)
 8003aec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a37      	ldr	r2, [pc, #220]	; (8003bd0 <HAL_I2S_Init+0x278>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <HAL_I2S_Init+0x1a4>
 8003af8:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <HAL_I2S_Init+0x27c>)
 8003afa:	e001      	b.n	8003b00 <HAL_I2S_Init+0x1a8>
 8003afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	4932      	ldr	r1, [pc, #200]	; (8003bd0 <HAL_I2S_Init+0x278>)
 8003b08:	428a      	cmp	r2, r1
 8003b0a:	d101      	bne.n	8003b10 <HAL_I2S_Init+0x1b8>
 8003b0c:	4a31      	ldr	r2, [pc, #196]	; (8003bd4 <HAL_I2S_Init+0x27c>)
 8003b0e:	e001      	b.n	8003b14 <HAL_I2S_Init+0x1bc>
 8003b10:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b14:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b18:	f023 030f 	bic.w	r3, r3, #15
 8003b1c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2b      	ldr	r2, [pc, #172]	; (8003bd0 <HAL_I2S_Init+0x278>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d101      	bne.n	8003b2c <HAL_I2S_Init+0x1d4>
 8003b28:	4b2a      	ldr	r3, [pc, #168]	; (8003bd4 <HAL_I2S_Init+0x27c>)
 8003b2a:	e001      	b.n	8003b30 <HAL_I2S_Init+0x1d8>
 8003b2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b30:	2202      	movs	r2, #2
 8003b32:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a25      	ldr	r2, [pc, #148]	; (8003bd0 <HAL_I2S_Init+0x278>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <HAL_I2S_Init+0x1ea>
 8003b3e:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <HAL_I2S_Init+0x27c>)
 8003b40:	e001      	b.n	8003b46 <HAL_I2S_Init+0x1ee>
 8003b42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b52:	d003      	beq.n	8003b5c <HAL_I2S_Init+0x204>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d103      	bne.n	8003b64 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e001      	b.n	8003b68 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	b299      	uxth	r1, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003b7e:	4303      	orrs	r3, r0
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	430b      	orrs	r3, r1
 8003b84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003b86:	4313      	orrs	r3, r2
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	897b      	ldrh	r3, [r7, #10]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b94:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a0d      	ldr	r2, [pc, #52]	; (8003bd0 <HAL_I2S_Init+0x278>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d101      	bne.n	8003ba4 <HAL_I2S_Init+0x24c>
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <HAL_I2S_Init+0x27c>)
 8003ba2:	e001      	b.n	8003ba8 <HAL_I2S_Init+0x250>
 8003ba4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba8:	897a      	ldrh	r2, [r7, #10]
 8003baa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3720      	adds	r7, #32
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	08003ccf 	.word	0x08003ccf
 8003bc8:	cccccccd 	.word	0xcccccccd
 8003bcc:	08003de5 	.word	0x08003de5
 8003bd0:	40003800 	.word	0x40003800
 8003bd4:	40003400 	.word	0x40003400

08003bd8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	1c9a      	adds	r2, r3, #2
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10e      	bne.n	8003c68 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c58:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ffb8 	bl	8003bd8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c68:	bf00      	nop
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	b292      	uxth	r2, r2
 8003c84:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	1c9a      	adds	r2, r3, #2
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10e      	bne.n	8003cc6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cb6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ff93 	bl	8003bec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b086      	sub	sp, #24
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d13a      	bne.n	8003d60 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d109      	bne.n	8003d08 <I2S_IRQHandler+0x3a>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b40      	cmp	r3, #64	; 0x40
 8003d00:	d102      	bne.n	8003d08 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff ffb4 	bl	8003c70 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d126      	bne.n	8003d60 <I2S_IRQHandler+0x92>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d11f      	bne.n	8003d60 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f043 0202 	orr.w	r2, r3, #2
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ff50 	bl	8003c00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d136      	bne.n	8003dda <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d109      	bne.n	8003d8a <I2S_IRQHandler+0xbc>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d80:	2b80      	cmp	r3, #128	; 0x80
 8003d82:	d102      	bne.n	8003d8a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ff45 	bl	8003c14 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d122      	bne.n	8003dda <I2S_IRQHandler+0x10c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d11b      	bne.n	8003dda <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003db0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dcc:	f043 0204 	orr.w	r2, r3, #4
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff13 	bl	8003c00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dda:	bf00      	nop
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4aa2      	ldr	r2, [pc, #648]	; (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d101      	bne.n	8003e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003dfe:	4ba2      	ldr	r3, [pc, #648]	; (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e00:	e001      	b.n	8003e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a9b      	ldr	r2, [pc, #620]	; (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e1c:	4b9a      	ldr	r3, [pc, #616]	; (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e1e:	e001      	b.n	8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e30:	d004      	beq.n	8003e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f040 8099 	bne.w	8003f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d107      	bne.n	8003e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f925 	bl	80040a0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d107      	bne.n	8003e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f9c8 	bl	8004200 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b40      	cmp	r3, #64	; 0x40
 8003e78:	d13a      	bne.n	8003ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d035      	beq.n	8003ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a7e      	ldr	r2, [pc, #504]	; (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d101      	bne.n	8003e92 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e8e:	4b7e      	ldr	r3, [pc, #504]	; (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e90:	e001      	b.n	8003e96 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4979      	ldr	r1, [pc, #484]	; (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e9e:	428b      	cmp	r3, r1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ea2:	4b79      	ldr	r3, [pc, #484]	; (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ea4:	e001      	b.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ea6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eaa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003eae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ebe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee2:	f043 0202 	orr.w	r2, r3, #2
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff fe88 	bl	8003c00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	f040 80be 	bne.w	8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80b8 	beq.w	8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f16:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a59      	ldr	r2, [pc, #356]	; (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d101      	bne.n	8003f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f22:	4b59      	ldr	r3, [pc, #356]	; (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f24:	e001      	b.n	8003f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4954      	ldr	r1, [pc, #336]	; (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f32:	428b      	cmp	r3, r1
 8003f34:	d101      	bne.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f36:	4b54      	ldr	r3, [pc, #336]	; (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f38:	e001      	b.n	8003f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f42:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f44:	2300      	movs	r3, #0
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5e:	f043 0204 	orr.w	r2, r3, #4
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fe4a 	bl	8003c00 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f6c:	e084      	b.n	8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d107      	bne.n	8003f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8be 	bl	8004104 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d107      	bne.n	8003fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f8fd 	bl	800419c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d12f      	bne.n	800400c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d02a      	beq.n	800400c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fc4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2e      	ldr	r2, [pc, #184]	; (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d101      	bne.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003fd0:	4b2d      	ldr	r3, [pc, #180]	; (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fd2:	e001      	b.n	8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003fd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4929      	ldr	r1, [pc, #164]	; (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fe0:	428b      	cmp	r3, r1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003fe4:	4b28      	ldr	r3, [pc, #160]	; (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fe6:	e001      	b.n	8003fec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003fe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ff0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f043 0202 	orr.w	r2, r3, #2
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff fdfa 	bl	8003c00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b08      	cmp	r3, #8
 8004014:	d131      	bne.n	800407a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d02c      	beq.n	800407a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a17      	ldr	r2, [pc, #92]	; (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d101      	bne.n	800402e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800402a:	4b17      	ldr	r3, [pc, #92]	; (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800402c:	e001      	b.n	8004032 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800402e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4912      	ldr	r1, [pc, #72]	; (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800403a:	428b      	cmp	r3, r1
 800403c:	d101      	bne.n	8004042 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800403e:	4b12      	ldr	r3, [pc, #72]	; (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004040:	e001      	b.n	8004046 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004042:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004046:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800404a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800405a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	f043 0204 	orr.w	r2, r3, #4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff fdc5 	bl	8003c00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004076:	e000      	b.n	800407a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004078:	bf00      	nop
}
 800407a:	bf00      	nop
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40003800 	.word	0x40003800
 8004088:	40003400 	.word	0x40003400

0800408c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	1c99      	adds	r1, r3, #2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6251      	str	r1, [r2, #36]	; 0x24
 80040b2:	881a      	ldrh	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d113      	bne.n	80040fa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d106      	bne.n	80040fa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ffc9 	bl	800408c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	1c99      	adds	r1, r3, #2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6251      	str	r1, [r2, #36]	; 0x24
 8004116:	8819      	ldrh	r1, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <I2SEx_TxISR_I2SExt+0x90>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d101      	bne.n	8004126 <I2SEx_TxISR_I2SExt+0x22>
 8004122:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <I2SEx_TxISR_I2SExt+0x94>)
 8004124:	e001      	b.n	800412a <I2SEx_TxISR_I2SExt+0x26>
 8004126:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800412a:	460a      	mov	r2, r1
 800412c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d121      	bne.n	800418a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a12      	ldr	r2, [pc, #72]	; (8004194 <I2SEx_TxISR_I2SExt+0x90>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d101      	bne.n	8004154 <I2SEx_TxISR_I2SExt+0x50>
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <I2SEx_TxISR_I2SExt+0x94>)
 8004152:	e001      	b.n	8004158 <I2SEx_TxISR_I2SExt+0x54>
 8004154:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	490d      	ldr	r1, [pc, #52]	; (8004194 <I2SEx_TxISR_I2SExt+0x90>)
 8004160:	428b      	cmp	r3, r1
 8004162:	d101      	bne.n	8004168 <I2SEx_TxISR_I2SExt+0x64>
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <I2SEx_TxISR_I2SExt+0x94>)
 8004166:	e001      	b.n	800416c <I2SEx_TxISR_I2SExt+0x68>
 8004168:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800416c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004170:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ff81 	bl	800408c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40003800 	.word	0x40003800
 8004198:	40003400 	.word	0x40003400

0800419c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68d8      	ldr	r0, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	1c99      	adds	r1, r3, #2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041b4:	b282      	uxth	r2, r0
 80041b6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d113      	bne.n	80041f8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041de:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff ff4a 	bl	800408c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a20      	ldr	r2, [pc, #128]	; (8004290 <I2SEx_RxISR_I2SExt+0x90>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <I2SEx_RxISR_I2SExt+0x16>
 8004212:	4b20      	ldr	r3, [pc, #128]	; (8004294 <I2SEx_RxISR_I2SExt+0x94>)
 8004214:	e001      	b.n	800421a <I2SEx_RxISR_I2SExt+0x1a>
 8004216:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800421a:	68d8      	ldr	r0, [r3, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	1c99      	adds	r1, r3, #2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004226:	b282      	uxth	r2, r0
 8004228:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d121      	bne.n	8004286 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a12      	ldr	r2, [pc, #72]	; (8004290 <I2SEx_RxISR_I2SExt+0x90>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <I2SEx_RxISR_I2SExt+0x50>
 800424c:	4b11      	ldr	r3, [pc, #68]	; (8004294 <I2SEx_RxISR_I2SExt+0x94>)
 800424e:	e001      	b.n	8004254 <I2SEx_RxISR_I2SExt+0x54>
 8004250:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	490d      	ldr	r1, [pc, #52]	; (8004290 <I2SEx_RxISR_I2SExt+0x90>)
 800425c:	428b      	cmp	r3, r1
 800425e:	d101      	bne.n	8004264 <I2SEx_RxISR_I2SExt+0x64>
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <I2SEx_RxISR_I2SExt+0x94>)
 8004262:	e001      	b.n	8004268 <I2SEx_RxISR_I2SExt+0x68>
 8004264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004268:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800426c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d106      	bne.n	8004286 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ff03 	bl	800408c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40003800 	.word	0x40003800
 8004294:	40003400 	.word	0x40003400

08004298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e25b      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d075      	beq.n	80043a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042b6:	4ba3      	ldr	r3, [pc, #652]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d00c      	beq.n	80042dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c2:	4ba0      	ldr	r3, [pc, #640]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d112      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ce:	4b9d      	ldr	r3, [pc, #628]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042da:	d10b      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042dc:	4b99      	ldr	r3, [pc, #612]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d05b      	beq.n	80043a0 <HAL_RCC_OscConfig+0x108>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d157      	bne.n	80043a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e236      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fc:	d106      	bne.n	800430c <HAL_RCC_OscConfig+0x74>
 80042fe:	4b91      	ldr	r3, [pc, #580]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a90      	ldr	r2, [pc, #576]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e01d      	b.n	8004348 <HAL_RCC_OscConfig+0xb0>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004314:	d10c      	bne.n	8004330 <HAL_RCC_OscConfig+0x98>
 8004316:	4b8b      	ldr	r3, [pc, #556]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a8a      	ldr	r2, [pc, #552]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800431c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	4b88      	ldr	r3, [pc, #544]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a87      	ldr	r2, [pc, #540]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e00b      	b.n	8004348 <HAL_RCC_OscConfig+0xb0>
 8004330:	4b84      	ldr	r3, [pc, #528]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a83      	ldr	r2, [pc, #524]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	4b81      	ldr	r3, [pc, #516]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a80      	ldr	r2, [pc, #512]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d013      	beq.n	8004378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fc ffb4 	bl	80012bc <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004358:	f7fc ffb0 	bl	80012bc <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e1fb      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436a:	4b76      	ldr	r3, [pc, #472]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0xc0>
 8004376:	e014      	b.n	80043a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fc ffa0 	bl	80012bc <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004380:	f7fc ff9c 	bl	80012bc <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e1e7      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004392:	4b6c      	ldr	r3, [pc, #432]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0xe8>
 800439e:	e000      	b.n	80043a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d063      	beq.n	8004476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ae:	4b65      	ldr	r3, [pc, #404]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ba:	4b62      	ldr	r3, [pc, #392]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d11c      	bne.n	8004400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043c6:	4b5f      	ldr	r3, [pc, #380]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d116      	bne.n	8004400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d2:	4b5c      	ldr	r3, [pc, #368]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <HAL_RCC_OscConfig+0x152>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d001      	beq.n	80043ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e1bb      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ea:	4b56      	ldr	r3, [pc, #344]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4952      	ldr	r1, [pc, #328]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fe:	e03a      	b.n	8004476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d020      	beq.n	800444a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004408:	4b4f      	ldr	r3, [pc, #316]	; (8004548 <HAL_RCC_OscConfig+0x2b0>)
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440e:	f7fc ff55 	bl	80012bc <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004416:	f7fc ff51 	bl	80012bc <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e19c      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004428:	4b46      	ldr	r3, [pc, #280]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004434:	4b43      	ldr	r3, [pc, #268]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4940      	ldr	r1, [pc, #256]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004444:	4313      	orrs	r3, r2
 8004446:	600b      	str	r3, [r1, #0]
 8004448:	e015      	b.n	8004476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800444a:	4b3f      	ldr	r3, [pc, #252]	; (8004548 <HAL_RCC_OscConfig+0x2b0>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fc ff34 	bl	80012bc <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004458:	f7fc ff30 	bl	80012bc <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e17b      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446a:	4b36      	ldr	r3, [pc, #216]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	d030      	beq.n	80044e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d016      	beq.n	80044b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800448a:	4b30      	ldr	r3, [pc, #192]	; (800454c <HAL_RCC_OscConfig+0x2b4>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fc ff14 	bl	80012bc <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004498:	f7fc ff10 	bl	80012bc <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e15b      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044aa:	4b26      	ldr	r3, [pc, #152]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x200>
 80044b6:	e015      	b.n	80044e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b8:	4b24      	ldr	r3, [pc, #144]	; (800454c <HAL_RCC_OscConfig+0x2b4>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044be:	f7fc fefd 	bl	80012bc <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c6:	f7fc fef9 	bl	80012bc <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e144      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80a0 	beq.w	8004632 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f6:	4b13      	ldr	r3, [pc, #76]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004510:	6413      	str	r3, [r2, #64]	; 0x40
 8004512:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <HAL_RCC_OscConfig+0x2ac>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004522:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_RCC_OscConfig+0x2b8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d121      	bne.n	8004572 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452e:	4b08      	ldr	r3, [pc, #32]	; (8004550 <HAL_RCC_OscConfig+0x2b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a07      	ldr	r2, [pc, #28]	; (8004550 <HAL_RCC_OscConfig+0x2b8>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453a:	f7fc febf 	bl	80012bc <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	e011      	b.n	8004566 <HAL_RCC_OscConfig+0x2ce>
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
 8004548:	42470000 	.word	0x42470000
 800454c:	42470e80 	.word	0x42470e80
 8004550:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004554:	f7fc feb2 	bl	80012bc <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e0fd      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004566:	4b81      	ldr	r3, [pc, #516]	; (800476c <HAL_RCC_OscConfig+0x4d4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d106      	bne.n	8004588 <HAL_RCC_OscConfig+0x2f0>
 800457a:	4b7d      	ldr	r3, [pc, #500]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	4a7c      	ldr	r2, [pc, #496]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	6713      	str	r3, [r2, #112]	; 0x70
 8004586:	e01c      	b.n	80045c2 <HAL_RCC_OscConfig+0x32a>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b05      	cmp	r3, #5
 800458e:	d10c      	bne.n	80045aa <HAL_RCC_OscConfig+0x312>
 8004590:	4b77      	ldr	r3, [pc, #476]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a76      	ldr	r2, [pc, #472]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 8004596:	f043 0304 	orr.w	r3, r3, #4
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
 800459c:	4b74      	ldr	r3, [pc, #464]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	4a73      	ldr	r2, [pc, #460]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6713      	str	r3, [r2, #112]	; 0x70
 80045a8:	e00b      	b.n	80045c2 <HAL_RCC_OscConfig+0x32a>
 80045aa:	4b71      	ldr	r3, [pc, #452]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	4a70      	ldr	r2, [pc, #448]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	6713      	str	r3, [r2, #112]	; 0x70
 80045b6:	4b6e      	ldr	r3, [pc, #440]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	4a6d      	ldr	r2, [pc, #436]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 80045bc:	f023 0304 	bic.w	r3, r3, #4
 80045c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d015      	beq.n	80045f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ca:	f7fc fe77 	bl	80012bc <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	e00a      	b.n	80045e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d2:	f7fc fe73 	bl	80012bc <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e0bc      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e8:	4b61      	ldr	r3, [pc, #388]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0ee      	beq.n	80045d2 <HAL_RCC_OscConfig+0x33a>
 80045f4:	e014      	b.n	8004620 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f6:	f7fc fe61 	bl	80012bc <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	e00a      	b.n	8004614 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fc fe5d 	bl	80012bc <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	; 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0a6      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004614:	4b56      	ldr	r3, [pc, #344]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1ee      	bne.n	80045fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d105      	bne.n	8004632 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004626:	4b52      	ldr	r3, [pc, #328]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	4a51      	ldr	r2, [pc, #324]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 800462c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004630:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 8092 	beq.w	8004760 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800463c:	4b4c      	ldr	r3, [pc, #304]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b08      	cmp	r3, #8
 8004646:	d05c      	beq.n	8004702 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d141      	bne.n	80046d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004650:	4b48      	ldr	r3, [pc, #288]	; (8004774 <HAL_RCC_OscConfig+0x4dc>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004656:	f7fc fe31 	bl	80012bc <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465e:	f7fc fe2d 	bl	80012bc <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e078      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004670:	4b3f      	ldr	r3, [pc, #252]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f0      	bne.n	800465e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	019b      	lsls	r3, r3, #6
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	3b01      	subs	r3, #1
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	061b      	lsls	r3, r3, #24
 80046a0:	4933      	ldr	r1, [pc, #204]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a6:	4b33      	ldr	r3, [pc, #204]	; (8004774 <HAL_RCC_OscConfig+0x4dc>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fc fe06 	bl	80012bc <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fc fe02 	bl	80012bc <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e04d      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c6:	4b2a      	ldr	r3, [pc, #168]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x41c>
 80046d2:	e045      	b.n	8004760 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d4:	4b27      	ldr	r3, [pc, #156]	; (8004774 <HAL_RCC_OscConfig+0x4dc>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046da:	f7fc fdef 	bl	80012bc <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e2:	f7fc fdeb 	bl	80012bc <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e036      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f4:	4b1e      	ldr	r3, [pc, #120]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f0      	bne.n	80046e2 <HAL_RCC_OscConfig+0x44a>
 8004700:	e02e      	b.n	8004760 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e029      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800470e:	4b18      	ldr	r3, [pc, #96]	; (8004770 <HAL_RCC_OscConfig+0x4d8>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	429a      	cmp	r2, r3
 8004720:	d11c      	bne.n	800475c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472c:	429a      	cmp	r2, r3
 800472e:	d115      	bne.n	800475c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004736:	4013      	ands	r3, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800473c:	4293      	cmp	r3, r2
 800473e:	d10d      	bne.n	800475c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d106      	bne.n	800475c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d001      	beq.n	8004760 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40007000 	.word	0x40007000
 8004770:	40023800 	.word	0x40023800
 8004774:	42470060 	.word	0x42470060

08004778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0cc      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800478c:	4b68      	ldr	r3, [pc, #416]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d90c      	bls.n	80047b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479a:	4b65      	ldr	r3, [pc, #404]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b63      	ldr	r3, [pc, #396]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d001      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0b8      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d020      	beq.n	8004802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047cc:	4b59      	ldr	r3, [pc, #356]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a58      	ldr	r2, [pc, #352]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e4:	4b53      	ldr	r3, [pc, #332]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a52      	ldr	r2, [pc, #328]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f0:	4b50      	ldr	r3, [pc, #320]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	494d      	ldr	r1, [pc, #308]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d044      	beq.n	8004898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d107      	bne.n	8004826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004816:	4b47      	ldr	r3, [pc, #284]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d119      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e07f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d003      	beq.n	8004836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004832:	2b03      	cmp	r3, #3
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004836:	4b3f      	ldr	r3, [pc, #252]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e06f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004846:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e067      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004856:	4b37      	ldr	r3, [pc, #220]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 0203 	bic.w	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	4934      	ldr	r1, [pc, #208]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	4313      	orrs	r3, r2
 8004866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004868:	f7fc fd28 	bl	80012bc <HAL_GetTick>
 800486c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486e:	e00a      	b.n	8004886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004870:	f7fc fd24 	bl	80012bc <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f241 3288 	movw	r2, #5000	; 0x1388
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e04f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004886:	4b2b      	ldr	r3, [pc, #172]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 020c 	and.w	r2, r3, #12
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	429a      	cmp	r2, r3
 8004896:	d1eb      	bne.n	8004870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004898:	4b25      	ldr	r3, [pc, #148]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d20c      	bcs.n	80048c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	4b22      	ldr	r3, [pc, #136]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b20      	ldr	r3, [pc, #128]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e032      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048cc:	4b19      	ldr	r3, [pc, #100]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4916      	ldr	r1, [pc, #88]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ea:	4b12      	ldr	r3, [pc, #72]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	490e      	ldr	r1, [pc, #56]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048fe:	f000 f821 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 8004902:	4601      	mov	r1, r0
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	4a0a      	ldr	r2, [pc, #40]	; (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 8004910:	5cd3      	ldrb	r3, [r2, r3]
 8004912:	fa21 f303 	lsr.w	r3, r1, r3
 8004916:	4a09      	ldr	r2, [pc, #36]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 8004918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800491a:	4b09      	ldr	r3, [pc, #36]	; (8004940 <HAL_RCC_ClockConfig+0x1c8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7fc fb9c 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40023c00 	.word	0x40023c00
 8004934:	40023800 	.word	0x40023800
 8004938:	0800c438 	.word	0x0800c438
 800493c:	20000000 	.word	0x20000000
 8004940:	20000004 	.word	0x20000004

08004944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	2300      	movs	r3, #0
 8004954:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800495a:	4b63      	ldr	r3, [pc, #396]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	2b04      	cmp	r3, #4
 8004964:	d007      	beq.n	8004976 <HAL_RCC_GetSysClockFreq+0x32>
 8004966:	2b08      	cmp	r3, #8
 8004968:	d008      	beq.n	800497c <HAL_RCC_GetSysClockFreq+0x38>
 800496a:	2b00      	cmp	r3, #0
 800496c:	f040 80b4 	bne.w	8004ad8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004970:	4b5e      	ldr	r3, [pc, #376]	; (8004aec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004972:	60bb      	str	r3, [r7, #8]
       break;
 8004974:	e0b3      	b.n	8004ade <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004976:	4b5e      	ldr	r3, [pc, #376]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004978:	60bb      	str	r3, [r7, #8]
      break;
 800497a:	e0b0      	b.n	8004ade <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800497c:	4b5a      	ldr	r3, [pc, #360]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004984:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004986:	4b58      	ldr	r3, [pc, #352]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d04a      	beq.n	8004a28 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004992:	4b55      	ldr	r3, [pc, #340]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	099b      	lsrs	r3, r3, #6
 8004998:	f04f 0400 	mov.w	r4, #0
 800499c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	ea03 0501 	and.w	r5, r3, r1
 80049a8:	ea04 0602 	and.w	r6, r4, r2
 80049ac:	4629      	mov	r1, r5
 80049ae:	4632      	mov	r2, r6
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	f04f 0400 	mov.w	r4, #0
 80049b8:	0154      	lsls	r4, r2, #5
 80049ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049be:	014b      	lsls	r3, r1, #5
 80049c0:	4619      	mov	r1, r3
 80049c2:	4622      	mov	r2, r4
 80049c4:	1b49      	subs	r1, r1, r5
 80049c6:	eb62 0206 	sbc.w	r2, r2, r6
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	f04f 0400 	mov.w	r4, #0
 80049d2:	0194      	lsls	r4, r2, #6
 80049d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049d8:	018b      	lsls	r3, r1, #6
 80049da:	1a5b      	subs	r3, r3, r1
 80049dc:	eb64 0402 	sbc.w	r4, r4, r2
 80049e0:	f04f 0100 	mov.w	r1, #0
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	00e2      	lsls	r2, r4, #3
 80049ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049ee:	00d9      	lsls	r1, r3, #3
 80049f0:	460b      	mov	r3, r1
 80049f2:	4614      	mov	r4, r2
 80049f4:	195b      	adds	r3, r3, r5
 80049f6:	eb44 0406 	adc.w	r4, r4, r6
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	0262      	lsls	r2, r4, #9
 8004a04:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004a08:	0259      	lsls	r1, r3, #9
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	4621      	mov	r1, r4
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f04f 0400 	mov.w	r4, #0
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4623      	mov	r3, r4
 8004a1c:	f7fb fbd8 	bl	80001d0 <__aeabi_uldivmod>
 8004a20:	4603      	mov	r3, r0
 8004a22:	460c      	mov	r4, r1
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	e049      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a28:	4b2f      	ldr	r3, [pc, #188]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	099b      	lsrs	r3, r3, #6
 8004a2e:	f04f 0400 	mov.w	r4, #0
 8004a32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	ea03 0501 	and.w	r5, r3, r1
 8004a3e:	ea04 0602 	and.w	r6, r4, r2
 8004a42:	4629      	mov	r1, r5
 8004a44:	4632      	mov	r2, r6
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	f04f 0400 	mov.w	r4, #0
 8004a4e:	0154      	lsls	r4, r2, #5
 8004a50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a54:	014b      	lsls	r3, r1, #5
 8004a56:	4619      	mov	r1, r3
 8004a58:	4622      	mov	r2, r4
 8004a5a:	1b49      	subs	r1, r1, r5
 8004a5c:	eb62 0206 	sbc.w	r2, r2, r6
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	f04f 0400 	mov.w	r4, #0
 8004a68:	0194      	lsls	r4, r2, #6
 8004a6a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a6e:	018b      	lsls	r3, r1, #6
 8004a70:	1a5b      	subs	r3, r3, r1
 8004a72:	eb64 0402 	sbc.w	r4, r4, r2
 8004a76:	f04f 0100 	mov.w	r1, #0
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	00e2      	lsls	r2, r4, #3
 8004a80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a84:	00d9      	lsls	r1, r3, #3
 8004a86:	460b      	mov	r3, r1
 8004a88:	4614      	mov	r4, r2
 8004a8a:	195b      	adds	r3, r3, r5
 8004a8c:	eb44 0406 	adc.w	r4, r4, r6
 8004a90:	f04f 0100 	mov.w	r1, #0
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	02a2      	lsls	r2, r4, #10
 8004a9a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a9e:	0299      	lsls	r1, r3, #10
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4614      	mov	r4, r2
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f04f 0400 	mov.w	r4, #0
 8004aae:	461a      	mov	r2, r3
 8004ab0:	4623      	mov	r3, r4
 8004ab2:	f7fb fb8d 	bl	80001d0 <__aeabi_uldivmod>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	460c      	mov	r4, r1
 8004aba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	0c1b      	lsrs	r3, r3, #16
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	60bb      	str	r3, [r7, #8]
      break;
 8004ad6:	e002      	b.n	8004ade <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ad8:	4b04      	ldr	r3, [pc, #16]	; (8004aec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ada:	60bb      	str	r3, [r7, #8]
      break;
 8004adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ade:	68bb      	ldr	r3, [r7, #8]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	00f42400 	.word	0x00f42400
 8004af0:	007a1200 	.word	0x007a1200

08004af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004af8:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004afa:	681b      	ldr	r3, [r3, #0]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20000000 	.word	0x20000000

08004b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b10:	f7ff fff0 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8004b14:	4601      	mov	r1, r0
 8004b16:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	0a9b      	lsrs	r3, r3, #10
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	4a03      	ldr	r2, [pc, #12]	; (8004b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b22:	5cd3      	ldrb	r3, [r2, r3]
 8004b24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	0800c448 	.word	0x0800c448

08004b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b38:	f7ff ffdc 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8004b3c:	4601      	mov	r1, r0
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	0b5b      	lsrs	r3, r3, #13
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	4a03      	ldr	r2, [pc, #12]	; (8004b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b4a:	5cd3      	ldrb	r3, [r2, r3]
 8004b4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40023800 	.word	0x40023800
 8004b58:	0800c448 	.word	0x0800c448

08004b5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	220f      	movs	r2, #15
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b6c:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 0203 	and.w	r2, r3, #3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b78:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b84:	4b0c      	ldr	r3, [pc, #48]	; (8004bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b90:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	08db      	lsrs	r3, r3, #3
 8004b96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b9e:	4b07      	ldr	r3, [pc, #28]	; (8004bbc <HAL_RCC_GetClockConfig+0x60>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 020f 	and.w	r2, r3, #15
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	601a      	str	r2, [r3, #0]
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	40023c00 	.word	0x40023c00

08004bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d035      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004be8:	4b62      	ldr	r3, [pc, #392]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bee:	f7fc fb65 	bl	80012bc <HAL_GetTick>
 8004bf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bf6:	f7fc fb61 	bl	80012bc <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e0b0      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c08:	4b5b      	ldr	r3, [pc, #364]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f0      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	019a      	lsls	r2, r3, #6
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	071b      	lsls	r3, r3, #28
 8004c20:	4955      	ldr	r1, [pc, #340]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c28:	4b52      	ldr	r3, [pc, #328]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c2e:	f7fc fb45 	bl	80012bc <HAL_GetTick>
 8004c32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c34:	e008      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c36:	f7fc fb41 	bl	80012bc <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e090      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c48:	4b4b      	ldr	r3, [pc, #300]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0f0      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 8083 	beq.w	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	4b44      	ldr	r3, [pc, #272]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	4a43      	ldr	r2, [pc, #268]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c70:	6413      	str	r3, [r2, #64]	; 0x40
 8004c72:	4b41      	ldr	r3, [pc, #260]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c7e:	4b3f      	ldr	r3, [pc, #252]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a3e      	ldr	r2, [pc, #248]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c8a:	f7fc fb17 	bl	80012bc <HAL_GetTick>
 8004c8e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c92:	f7fc fb13 	bl	80012bc <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e062      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ca4:	4b35      	ldr	r3, [pc, #212]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cb0:	4b31      	ldr	r3, [pc, #196]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d02f      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d028      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cce:	4b2a      	ldr	r3, [pc, #168]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cd8:	4b29      	ldr	r3, [pc, #164]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cde:	4b28      	ldr	r3, [pc, #160]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ce4:	4a24      	ldr	r2, [pc, #144]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cea:	4b23      	ldr	r3, [pc, #140]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d114      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cf6:	f7fc fae1 	bl	80012bc <HAL_GetTick>
 8004cfa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfc:	e00a      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cfe:	f7fc fadd 	bl	80012bc <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e02a      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d14:	4b18      	ldr	r3, [pc, #96]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0ee      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d2c:	d10d      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d2e:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d42:	490d      	ldr	r1, [pc, #52]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	608b      	str	r3, [r1, #8]
 8004d48:	e005      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	4a0a      	ldr	r2, [pc, #40]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d50:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d54:	6093      	str	r3, [r2, #8]
 8004d56:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d62:	4905      	ldr	r1, [pc, #20]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	42470068 	.word	0x42470068
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	40007000 	.word	0x40007000
 8004d80:	42470e40 	.word	0x42470e40

08004d84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d13d      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004da2:	4b22      	ldr	r3, [pc, #136]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004daa:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d004      	beq.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d12f      	bne.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004db6:	4b1e      	ldr	r3, [pc, #120]	; (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004db8:	617b      	str	r3, [r7, #20]
          break;
 8004dba:	e02f      	b.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004dbc:	4b1b      	ldr	r3, [pc, #108]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dc8:	d108      	bne.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dca:	4b18      	ldr	r3, [pc, #96]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dd2:	4a18      	ldr	r2, [pc, #96]	; (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	e007      	b.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ddc:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de4:	4a14      	ldr	r2, [pc, #80]	; (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004dec:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df2:	099b      	lsrs	r3, r3, #6
 8004df4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e06:	0f1b      	lsrs	r3, r3, #28
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	617b      	str	r3, [r7, #20]
          break;
 8004e14:	e002      	b.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
          break;
 8004e1a:	bf00      	nop
        }
      }
      break;
 8004e1c:	bf00      	nop
    }
  }
  return frequency;
 8004e1e:	697b      	ldr	r3, [r7, #20]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	00bb8000 	.word	0x00bb8000
 8004e34:	007a1200 	.word	0x007a1200
 8004e38:	00f42400 	.word	0x00f42400

08004e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e056      	b.n	8004efc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7fb fff1 	bl	8000e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2202      	movs	r2, #2
 8004e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	ea42 0103 	orr.w	r1, r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	0c1b      	lsrs	r3, r3, #16
 8004ecc:	f003 0104 	and.w	r1, r3, #4
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69da      	ldr	r2, [r3, #28]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e01d      	b.n	8004f52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f815 	bl	8004f5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	4619      	mov	r1, r3
 8004f42:	4610      	mov	r0, r2
 8004f44:	f000 f968 	bl	8005218 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f042 0201 	orr.w	r2, r2, #1
 8004f84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2b06      	cmp	r3, #6
 8004f96:	d007      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d122      	bne.n	8005012 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d11b      	bne.n	8005012 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f06f 0202 	mvn.w	r2, #2
 8004fe2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	f003 0303 	and.w	r3, r3, #3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f8ee 	bl	80051da <HAL_TIM_IC_CaptureCallback>
 8004ffe:	e005      	b.n	800500c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f8e0 	bl	80051c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f8f1 	bl	80051ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b04      	cmp	r3, #4
 800501e:	d122      	bne.n	8005066 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b04      	cmp	r3, #4
 800502c:	d11b      	bne.n	8005066 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f06f 0204 	mvn.w	r2, #4
 8005036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f8c4 	bl	80051da <HAL_TIM_IC_CaptureCallback>
 8005052:	e005      	b.n	8005060 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f8b6 	bl	80051c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f8c7 	bl	80051ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b08      	cmp	r3, #8
 8005072:	d122      	bne.n	80050ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b08      	cmp	r3, #8
 8005080:	d11b      	bne.n	80050ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f06f 0208 	mvn.w	r2, #8
 800508a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2204      	movs	r2, #4
 8005090:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f89a 	bl	80051da <HAL_TIM_IC_CaptureCallback>
 80050a6:	e005      	b.n	80050b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f88c 	bl	80051c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f89d 	bl	80051ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d122      	bne.n	800510e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f003 0310 	and.w	r3, r3, #16
 80050d2:	2b10      	cmp	r3, #16
 80050d4:	d11b      	bne.n	800510e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f06f 0210 	mvn.w	r2, #16
 80050de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2208      	movs	r2, #8
 80050e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f870 	bl	80051da <HAL_TIM_IC_CaptureCallback>
 80050fa:	e005      	b.n	8005108 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f862 	bl	80051c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f873 	bl	80051ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b01      	cmp	r3, #1
 800511a:	d10e      	bne.n	800513a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b01      	cmp	r3, #1
 8005128:	d107      	bne.n	800513a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f06f 0201 	mvn.w	r2, #1
 8005132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7fb fd55 	bl	8000be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b80      	cmp	r3, #128	; 0x80
 8005146:	d10e      	bne.n	8005166 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005152:	2b80      	cmp	r3, #128	; 0x80
 8005154:	d107      	bne.n	8005166 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800515e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f903 	bl	800536c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005170:	2b40      	cmp	r3, #64	; 0x40
 8005172:	d10e      	bne.n	8005192 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517e:	2b40      	cmp	r3, #64	; 0x40
 8005180:	d107      	bne.n	8005192 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800518a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f838 	bl	8005202 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b20      	cmp	r3, #32
 800519e:	d10e      	bne.n	80051be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b20      	cmp	r3, #32
 80051ac:	d107      	bne.n	80051be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f06f 0220 	mvn.w	r2, #32
 80051b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f8cd 	bl	8005358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051be:	bf00      	nop
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a40      	ldr	r2, [pc, #256]	; (800532c <TIM_Base_SetConfig+0x114>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d013      	beq.n	8005258 <TIM_Base_SetConfig+0x40>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005236:	d00f      	beq.n	8005258 <TIM_Base_SetConfig+0x40>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a3d      	ldr	r2, [pc, #244]	; (8005330 <TIM_Base_SetConfig+0x118>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00b      	beq.n	8005258 <TIM_Base_SetConfig+0x40>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a3c      	ldr	r2, [pc, #240]	; (8005334 <TIM_Base_SetConfig+0x11c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d007      	beq.n	8005258 <TIM_Base_SetConfig+0x40>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a3b      	ldr	r2, [pc, #236]	; (8005338 <TIM_Base_SetConfig+0x120>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_Base_SetConfig+0x40>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a3a      	ldr	r2, [pc, #232]	; (800533c <TIM_Base_SetConfig+0x124>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d108      	bne.n	800526a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a2f      	ldr	r2, [pc, #188]	; (800532c <TIM_Base_SetConfig+0x114>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d02b      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005278:	d027      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a2c      	ldr	r2, [pc, #176]	; (8005330 <TIM_Base_SetConfig+0x118>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d023      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a2b      	ldr	r2, [pc, #172]	; (8005334 <TIM_Base_SetConfig+0x11c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d01f      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a2a      	ldr	r2, [pc, #168]	; (8005338 <TIM_Base_SetConfig+0x120>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01b      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a29      	ldr	r2, [pc, #164]	; (800533c <TIM_Base_SetConfig+0x124>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d017      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a28      	ldr	r2, [pc, #160]	; (8005340 <TIM_Base_SetConfig+0x128>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a27      	ldr	r2, [pc, #156]	; (8005344 <TIM_Base_SetConfig+0x12c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00f      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a26      	ldr	r2, [pc, #152]	; (8005348 <TIM_Base_SetConfig+0x130>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00b      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a25      	ldr	r2, [pc, #148]	; (800534c <TIM_Base_SetConfig+0x134>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d007      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a24      	ldr	r2, [pc, #144]	; (8005350 <TIM_Base_SetConfig+0x138>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d003      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a23      	ldr	r2, [pc, #140]	; (8005354 <TIM_Base_SetConfig+0x13c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d108      	bne.n	80052dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a0a      	ldr	r2, [pc, #40]	; (800532c <TIM_Base_SetConfig+0x114>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d003      	beq.n	8005310 <TIM_Base_SetConfig+0xf8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a0c      	ldr	r2, [pc, #48]	; (800533c <TIM_Base_SetConfig+0x124>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d103      	bne.n	8005318 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	615a      	str	r2, [r3, #20]
}
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40010000 	.word	0x40010000
 8005330:	40000400 	.word	0x40000400
 8005334:	40000800 	.word	0x40000800
 8005338:	40000c00 	.word	0x40000c00
 800533c:	40010400 	.word	0x40010400
 8005340:	40014000 	.word	0x40014000
 8005344:	40014400 	.word	0x40014400
 8005348:	40014800 	.word	0x40014800
 800534c:	40001800 	.word	0x40001800
 8005350:	40001c00 	.word	0x40001c00
 8005354:	40002000 	.word	0x40002000

08005358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e03f      	b.n	8005412 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7fb fd9a 	bl	8000ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2224      	movs	r2, #36	; 0x24
 80053b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f829 	bl	800541c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695a      	ldr	r2, [r3, #20]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800541c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005420:	b085      	sub	sp, #20
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800545e:	f023 030c 	bic.w	r3, r3, #12
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	68f9      	ldr	r1, [r7, #12]
 8005468:	430b      	orrs	r3, r1
 800546a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699a      	ldr	r2, [r3, #24]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800548a:	f040 818b 	bne.w	80057a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4ac1      	ldr	r2, [pc, #772]	; (8005798 <UART_SetConfig+0x37c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d005      	beq.n	80054a4 <UART_SetConfig+0x88>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4abf      	ldr	r2, [pc, #764]	; (800579c <UART_SetConfig+0x380>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	f040 80bd 	bne.w	800561e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054a4:	f7ff fb46 	bl	8004b34 <HAL_RCC_GetPCLK2Freq>
 80054a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	461d      	mov	r5, r3
 80054ae:	f04f 0600 	mov.w	r6, #0
 80054b2:	46a8      	mov	r8, r5
 80054b4:	46b1      	mov	r9, r6
 80054b6:	eb18 0308 	adds.w	r3, r8, r8
 80054ba:	eb49 0409 	adc.w	r4, r9, r9
 80054be:	4698      	mov	r8, r3
 80054c0:	46a1      	mov	r9, r4
 80054c2:	eb18 0805 	adds.w	r8, r8, r5
 80054c6:	eb49 0906 	adc.w	r9, r9, r6
 80054ca:	f04f 0100 	mov.w	r1, #0
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054de:	4688      	mov	r8, r1
 80054e0:	4691      	mov	r9, r2
 80054e2:	eb18 0005 	adds.w	r0, r8, r5
 80054e6:	eb49 0106 	adc.w	r1, r9, r6
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	461d      	mov	r5, r3
 80054f0:	f04f 0600 	mov.w	r6, #0
 80054f4:	196b      	adds	r3, r5, r5
 80054f6:	eb46 0406 	adc.w	r4, r6, r6
 80054fa:	461a      	mov	r2, r3
 80054fc:	4623      	mov	r3, r4
 80054fe:	f7fa fe67 	bl	80001d0 <__aeabi_uldivmod>
 8005502:	4603      	mov	r3, r0
 8005504:	460c      	mov	r4, r1
 8005506:	461a      	mov	r2, r3
 8005508:	4ba5      	ldr	r3, [pc, #660]	; (80057a0 <UART_SetConfig+0x384>)
 800550a:	fba3 2302 	umull	r2, r3, r3, r2
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	461d      	mov	r5, r3
 8005518:	f04f 0600 	mov.w	r6, #0
 800551c:	46a9      	mov	r9, r5
 800551e:	46b2      	mov	sl, r6
 8005520:	eb19 0309 	adds.w	r3, r9, r9
 8005524:	eb4a 040a 	adc.w	r4, sl, sl
 8005528:	4699      	mov	r9, r3
 800552a:	46a2      	mov	sl, r4
 800552c:	eb19 0905 	adds.w	r9, r9, r5
 8005530:	eb4a 0a06 	adc.w	sl, sl, r6
 8005534:	f04f 0100 	mov.w	r1, #0
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005540:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005544:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005548:	4689      	mov	r9, r1
 800554a:	4692      	mov	sl, r2
 800554c:	eb19 0005 	adds.w	r0, r9, r5
 8005550:	eb4a 0106 	adc.w	r1, sl, r6
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	461d      	mov	r5, r3
 800555a:	f04f 0600 	mov.w	r6, #0
 800555e:	196b      	adds	r3, r5, r5
 8005560:	eb46 0406 	adc.w	r4, r6, r6
 8005564:	461a      	mov	r2, r3
 8005566:	4623      	mov	r3, r4
 8005568:	f7fa fe32 	bl	80001d0 <__aeabi_uldivmod>
 800556c:	4603      	mov	r3, r0
 800556e:	460c      	mov	r4, r1
 8005570:	461a      	mov	r2, r3
 8005572:	4b8b      	ldr	r3, [pc, #556]	; (80057a0 <UART_SetConfig+0x384>)
 8005574:	fba3 1302 	umull	r1, r3, r3, r2
 8005578:	095b      	lsrs	r3, r3, #5
 800557a:	2164      	movs	r1, #100	; 0x64
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	3332      	adds	r3, #50	; 0x32
 8005586:	4a86      	ldr	r2, [pc, #536]	; (80057a0 <UART_SetConfig+0x384>)
 8005588:	fba2 2303 	umull	r2, r3, r2, r3
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005594:	4498      	add	r8, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	461d      	mov	r5, r3
 800559a:	f04f 0600 	mov.w	r6, #0
 800559e:	46a9      	mov	r9, r5
 80055a0:	46b2      	mov	sl, r6
 80055a2:	eb19 0309 	adds.w	r3, r9, r9
 80055a6:	eb4a 040a 	adc.w	r4, sl, sl
 80055aa:	4699      	mov	r9, r3
 80055ac:	46a2      	mov	sl, r4
 80055ae:	eb19 0905 	adds.w	r9, r9, r5
 80055b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80055b6:	f04f 0100 	mov.w	r1, #0
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055ca:	4689      	mov	r9, r1
 80055cc:	4692      	mov	sl, r2
 80055ce:	eb19 0005 	adds.w	r0, r9, r5
 80055d2:	eb4a 0106 	adc.w	r1, sl, r6
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	461d      	mov	r5, r3
 80055dc:	f04f 0600 	mov.w	r6, #0
 80055e0:	196b      	adds	r3, r5, r5
 80055e2:	eb46 0406 	adc.w	r4, r6, r6
 80055e6:	461a      	mov	r2, r3
 80055e8:	4623      	mov	r3, r4
 80055ea:	f7fa fdf1 	bl	80001d0 <__aeabi_uldivmod>
 80055ee:	4603      	mov	r3, r0
 80055f0:	460c      	mov	r4, r1
 80055f2:	461a      	mov	r2, r3
 80055f4:	4b6a      	ldr	r3, [pc, #424]	; (80057a0 <UART_SetConfig+0x384>)
 80055f6:	fba3 1302 	umull	r1, r3, r3, r2
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	2164      	movs	r1, #100	; 0x64
 80055fe:	fb01 f303 	mul.w	r3, r1, r3
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	3332      	adds	r3, #50	; 0x32
 8005608:	4a65      	ldr	r2, [pc, #404]	; (80057a0 <UART_SetConfig+0x384>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	f003 0207 	and.w	r2, r3, #7
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4442      	add	r2, r8
 800561a:	609a      	str	r2, [r3, #8]
 800561c:	e26f      	b.n	8005afe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800561e:	f7ff fa75 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 8005622:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	461d      	mov	r5, r3
 8005628:	f04f 0600 	mov.w	r6, #0
 800562c:	46a8      	mov	r8, r5
 800562e:	46b1      	mov	r9, r6
 8005630:	eb18 0308 	adds.w	r3, r8, r8
 8005634:	eb49 0409 	adc.w	r4, r9, r9
 8005638:	4698      	mov	r8, r3
 800563a:	46a1      	mov	r9, r4
 800563c:	eb18 0805 	adds.w	r8, r8, r5
 8005640:	eb49 0906 	adc.w	r9, r9, r6
 8005644:	f04f 0100 	mov.w	r1, #0
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005650:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005654:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005658:	4688      	mov	r8, r1
 800565a:	4691      	mov	r9, r2
 800565c:	eb18 0005 	adds.w	r0, r8, r5
 8005660:	eb49 0106 	adc.w	r1, r9, r6
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	461d      	mov	r5, r3
 800566a:	f04f 0600 	mov.w	r6, #0
 800566e:	196b      	adds	r3, r5, r5
 8005670:	eb46 0406 	adc.w	r4, r6, r6
 8005674:	461a      	mov	r2, r3
 8005676:	4623      	mov	r3, r4
 8005678:	f7fa fdaa 	bl	80001d0 <__aeabi_uldivmod>
 800567c:	4603      	mov	r3, r0
 800567e:	460c      	mov	r4, r1
 8005680:	461a      	mov	r2, r3
 8005682:	4b47      	ldr	r3, [pc, #284]	; (80057a0 <UART_SetConfig+0x384>)
 8005684:	fba3 2302 	umull	r2, r3, r3, r2
 8005688:	095b      	lsrs	r3, r3, #5
 800568a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	461d      	mov	r5, r3
 8005692:	f04f 0600 	mov.w	r6, #0
 8005696:	46a9      	mov	r9, r5
 8005698:	46b2      	mov	sl, r6
 800569a:	eb19 0309 	adds.w	r3, r9, r9
 800569e:	eb4a 040a 	adc.w	r4, sl, sl
 80056a2:	4699      	mov	r9, r3
 80056a4:	46a2      	mov	sl, r4
 80056a6:	eb19 0905 	adds.w	r9, r9, r5
 80056aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80056ae:	f04f 0100 	mov.w	r1, #0
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056c2:	4689      	mov	r9, r1
 80056c4:	4692      	mov	sl, r2
 80056c6:	eb19 0005 	adds.w	r0, r9, r5
 80056ca:	eb4a 0106 	adc.w	r1, sl, r6
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	461d      	mov	r5, r3
 80056d4:	f04f 0600 	mov.w	r6, #0
 80056d8:	196b      	adds	r3, r5, r5
 80056da:	eb46 0406 	adc.w	r4, r6, r6
 80056de:	461a      	mov	r2, r3
 80056e0:	4623      	mov	r3, r4
 80056e2:	f7fa fd75 	bl	80001d0 <__aeabi_uldivmod>
 80056e6:	4603      	mov	r3, r0
 80056e8:	460c      	mov	r4, r1
 80056ea:	461a      	mov	r2, r3
 80056ec:	4b2c      	ldr	r3, [pc, #176]	; (80057a0 <UART_SetConfig+0x384>)
 80056ee:	fba3 1302 	umull	r1, r3, r3, r2
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	2164      	movs	r1, #100	; 0x64
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	3332      	adds	r3, #50	; 0x32
 8005700:	4a27      	ldr	r2, [pc, #156]	; (80057a0 <UART_SetConfig+0x384>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800570e:	4498      	add	r8, r3
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	461d      	mov	r5, r3
 8005714:	f04f 0600 	mov.w	r6, #0
 8005718:	46a9      	mov	r9, r5
 800571a:	46b2      	mov	sl, r6
 800571c:	eb19 0309 	adds.w	r3, r9, r9
 8005720:	eb4a 040a 	adc.w	r4, sl, sl
 8005724:	4699      	mov	r9, r3
 8005726:	46a2      	mov	sl, r4
 8005728:	eb19 0905 	adds.w	r9, r9, r5
 800572c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005730:	f04f 0100 	mov.w	r1, #0
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800573c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005740:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005744:	4689      	mov	r9, r1
 8005746:	4692      	mov	sl, r2
 8005748:	eb19 0005 	adds.w	r0, r9, r5
 800574c:	eb4a 0106 	adc.w	r1, sl, r6
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	461d      	mov	r5, r3
 8005756:	f04f 0600 	mov.w	r6, #0
 800575a:	196b      	adds	r3, r5, r5
 800575c:	eb46 0406 	adc.w	r4, r6, r6
 8005760:	461a      	mov	r2, r3
 8005762:	4623      	mov	r3, r4
 8005764:	f7fa fd34 	bl	80001d0 <__aeabi_uldivmod>
 8005768:	4603      	mov	r3, r0
 800576a:	460c      	mov	r4, r1
 800576c:	461a      	mov	r2, r3
 800576e:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <UART_SetConfig+0x384>)
 8005770:	fba3 1302 	umull	r1, r3, r3, r2
 8005774:	095b      	lsrs	r3, r3, #5
 8005776:	2164      	movs	r1, #100	; 0x64
 8005778:	fb01 f303 	mul.w	r3, r1, r3
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	3332      	adds	r3, #50	; 0x32
 8005782:	4a07      	ldr	r2, [pc, #28]	; (80057a0 <UART_SetConfig+0x384>)
 8005784:	fba2 2303 	umull	r2, r3, r2, r3
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	f003 0207 	and.w	r2, r3, #7
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4442      	add	r2, r8
 8005794:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005796:	e1b2      	b.n	8005afe <UART_SetConfig+0x6e2>
 8005798:	40011000 	.word	0x40011000
 800579c:	40011400 	.word	0x40011400
 80057a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4ad7      	ldr	r2, [pc, #860]	; (8005b08 <UART_SetConfig+0x6ec>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d005      	beq.n	80057ba <UART_SetConfig+0x39e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4ad6      	ldr	r2, [pc, #856]	; (8005b0c <UART_SetConfig+0x6f0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	f040 80d1 	bne.w	800595c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80057ba:	f7ff f9bb 	bl	8004b34 <HAL_RCC_GetPCLK2Freq>
 80057be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	469a      	mov	sl, r3
 80057c4:	f04f 0b00 	mov.w	fp, #0
 80057c8:	46d0      	mov	r8, sl
 80057ca:	46d9      	mov	r9, fp
 80057cc:	eb18 0308 	adds.w	r3, r8, r8
 80057d0:	eb49 0409 	adc.w	r4, r9, r9
 80057d4:	4698      	mov	r8, r3
 80057d6:	46a1      	mov	r9, r4
 80057d8:	eb18 080a 	adds.w	r8, r8, sl
 80057dc:	eb49 090b 	adc.w	r9, r9, fp
 80057e0:	f04f 0100 	mov.w	r1, #0
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057f4:	4688      	mov	r8, r1
 80057f6:	4691      	mov	r9, r2
 80057f8:	eb1a 0508 	adds.w	r5, sl, r8
 80057fc:	eb4b 0609 	adc.w	r6, fp, r9
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	4619      	mov	r1, r3
 8005806:	f04f 0200 	mov.w	r2, #0
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	f04f 0400 	mov.w	r4, #0
 8005812:	0094      	lsls	r4, r2, #2
 8005814:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005818:	008b      	lsls	r3, r1, #2
 800581a:	461a      	mov	r2, r3
 800581c:	4623      	mov	r3, r4
 800581e:	4628      	mov	r0, r5
 8005820:	4631      	mov	r1, r6
 8005822:	f7fa fcd5 	bl	80001d0 <__aeabi_uldivmod>
 8005826:	4603      	mov	r3, r0
 8005828:	460c      	mov	r4, r1
 800582a:	461a      	mov	r2, r3
 800582c:	4bb8      	ldr	r3, [pc, #736]	; (8005b10 <UART_SetConfig+0x6f4>)
 800582e:	fba3 2302 	umull	r2, r3, r3, r2
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	469b      	mov	fp, r3
 800583c:	f04f 0c00 	mov.w	ip, #0
 8005840:	46d9      	mov	r9, fp
 8005842:	46e2      	mov	sl, ip
 8005844:	eb19 0309 	adds.w	r3, r9, r9
 8005848:	eb4a 040a 	adc.w	r4, sl, sl
 800584c:	4699      	mov	r9, r3
 800584e:	46a2      	mov	sl, r4
 8005850:	eb19 090b 	adds.w	r9, r9, fp
 8005854:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005858:	f04f 0100 	mov.w	r1, #0
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005864:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005868:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800586c:	4689      	mov	r9, r1
 800586e:	4692      	mov	sl, r2
 8005870:	eb1b 0509 	adds.w	r5, fp, r9
 8005874:	eb4c 060a 	adc.w	r6, ip, sl
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	4619      	mov	r1, r3
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	f04f 0400 	mov.w	r4, #0
 800588a:	0094      	lsls	r4, r2, #2
 800588c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005890:	008b      	lsls	r3, r1, #2
 8005892:	461a      	mov	r2, r3
 8005894:	4623      	mov	r3, r4
 8005896:	4628      	mov	r0, r5
 8005898:	4631      	mov	r1, r6
 800589a:	f7fa fc99 	bl	80001d0 <__aeabi_uldivmod>
 800589e:	4603      	mov	r3, r0
 80058a0:	460c      	mov	r4, r1
 80058a2:	461a      	mov	r2, r3
 80058a4:	4b9a      	ldr	r3, [pc, #616]	; (8005b10 <UART_SetConfig+0x6f4>)
 80058a6:	fba3 1302 	umull	r1, r3, r3, r2
 80058aa:	095b      	lsrs	r3, r3, #5
 80058ac:	2164      	movs	r1, #100	; 0x64
 80058ae:	fb01 f303 	mul.w	r3, r1, r3
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	3332      	adds	r3, #50	; 0x32
 80058b8:	4a95      	ldr	r2, [pc, #596]	; (8005b10 <UART_SetConfig+0x6f4>)
 80058ba:	fba2 2303 	umull	r2, r3, r2, r3
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058c4:	4498      	add	r8, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	469b      	mov	fp, r3
 80058ca:	f04f 0c00 	mov.w	ip, #0
 80058ce:	46d9      	mov	r9, fp
 80058d0:	46e2      	mov	sl, ip
 80058d2:	eb19 0309 	adds.w	r3, r9, r9
 80058d6:	eb4a 040a 	adc.w	r4, sl, sl
 80058da:	4699      	mov	r9, r3
 80058dc:	46a2      	mov	sl, r4
 80058de:	eb19 090b 	adds.w	r9, r9, fp
 80058e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058e6:	f04f 0100 	mov.w	r1, #0
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058fa:	4689      	mov	r9, r1
 80058fc:	4692      	mov	sl, r2
 80058fe:	eb1b 0509 	adds.w	r5, fp, r9
 8005902:	eb4c 060a 	adc.w	r6, ip, sl
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	4619      	mov	r1, r3
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	f04f 0400 	mov.w	r4, #0
 8005918:	0094      	lsls	r4, r2, #2
 800591a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800591e:	008b      	lsls	r3, r1, #2
 8005920:	461a      	mov	r2, r3
 8005922:	4623      	mov	r3, r4
 8005924:	4628      	mov	r0, r5
 8005926:	4631      	mov	r1, r6
 8005928:	f7fa fc52 	bl	80001d0 <__aeabi_uldivmod>
 800592c:	4603      	mov	r3, r0
 800592e:	460c      	mov	r4, r1
 8005930:	461a      	mov	r2, r3
 8005932:	4b77      	ldr	r3, [pc, #476]	; (8005b10 <UART_SetConfig+0x6f4>)
 8005934:	fba3 1302 	umull	r1, r3, r3, r2
 8005938:	095b      	lsrs	r3, r3, #5
 800593a:	2164      	movs	r1, #100	; 0x64
 800593c:	fb01 f303 	mul.w	r3, r1, r3
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	3332      	adds	r3, #50	; 0x32
 8005946:	4a72      	ldr	r2, [pc, #456]	; (8005b10 <UART_SetConfig+0x6f4>)
 8005948:	fba2 2303 	umull	r2, r3, r2, r3
 800594c:	095b      	lsrs	r3, r3, #5
 800594e:	f003 020f 	and.w	r2, r3, #15
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4442      	add	r2, r8
 8005958:	609a      	str	r2, [r3, #8]
 800595a:	e0d0      	b.n	8005afe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800595c:	f7ff f8d6 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 8005960:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	469a      	mov	sl, r3
 8005966:	f04f 0b00 	mov.w	fp, #0
 800596a:	46d0      	mov	r8, sl
 800596c:	46d9      	mov	r9, fp
 800596e:	eb18 0308 	adds.w	r3, r8, r8
 8005972:	eb49 0409 	adc.w	r4, r9, r9
 8005976:	4698      	mov	r8, r3
 8005978:	46a1      	mov	r9, r4
 800597a:	eb18 080a 	adds.w	r8, r8, sl
 800597e:	eb49 090b 	adc.w	r9, r9, fp
 8005982:	f04f 0100 	mov.w	r1, #0
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800598e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005992:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005996:	4688      	mov	r8, r1
 8005998:	4691      	mov	r9, r2
 800599a:	eb1a 0508 	adds.w	r5, sl, r8
 800599e:	eb4b 0609 	adc.w	r6, fp, r9
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	4619      	mov	r1, r3
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	f04f 0400 	mov.w	r4, #0
 80059b4:	0094      	lsls	r4, r2, #2
 80059b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059ba:	008b      	lsls	r3, r1, #2
 80059bc:	461a      	mov	r2, r3
 80059be:	4623      	mov	r3, r4
 80059c0:	4628      	mov	r0, r5
 80059c2:	4631      	mov	r1, r6
 80059c4:	f7fa fc04 	bl	80001d0 <__aeabi_uldivmod>
 80059c8:	4603      	mov	r3, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	461a      	mov	r2, r3
 80059ce:	4b50      	ldr	r3, [pc, #320]	; (8005b10 <UART_SetConfig+0x6f4>)
 80059d0:	fba3 2302 	umull	r2, r3, r3, r2
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	469b      	mov	fp, r3
 80059de:	f04f 0c00 	mov.w	ip, #0
 80059e2:	46d9      	mov	r9, fp
 80059e4:	46e2      	mov	sl, ip
 80059e6:	eb19 0309 	adds.w	r3, r9, r9
 80059ea:	eb4a 040a 	adc.w	r4, sl, sl
 80059ee:	4699      	mov	r9, r3
 80059f0:	46a2      	mov	sl, r4
 80059f2:	eb19 090b 	adds.w	r9, r9, fp
 80059f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059fa:	f04f 0100 	mov.w	r1, #0
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a0e:	4689      	mov	r9, r1
 8005a10:	4692      	mov	sl, r2
 8005a12:	eb1b 0509 	adds.w	r5, fp, r9
 8005a16:	eb4c 060a 	adc.w	r6, ip, sl
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	f04f 0400 	mov.w	r4, #0
 8005a2c:	0094      	lsls	r4, r2, #2
 8005a2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a32:	008b      	lsls	r3, r1, #2
 8005a34:	461a      	mov	r2, r3
 8005a36:	4623      	mov	r3, r4
 8005a38:	4628      	mov	r0, r5
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	f7fa fbc8 	bl	80001d0 <__aeabi_uldivmod>
 8005a40:	4603      	mov	r3, r0
 8005a42:	460c      	mov	r4, r1
 8005a44:	461a      	mov	r2, r3
 8005a46:	4b32      	ldr	r3, [pc, #200]	; (8005b10 <UART_SetConfig+0x6f4>)
 8005a48:	fba3 1302 	umull	r1, r3, r3, r2
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	2164      	movs	r1, #100	; 0x64
 8005a50:	fb01 f303 	mul.w	r3, r1, r3
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	3332      	adds	r3, #50	; 0x32
 8005a5a:	4a2d      	ldr	r2, [pc, #180]	; (8005b10 <UART_SetConfig+0x6f4>)
 8005a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a66:	4498      	add	r8, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	469b      	mov	fp, r3
 8005a6c:	f04f 0c00 	mov.w	ip, #0
 8005a70:	46d9      	mov	r9, fp
 8005a72:	46e2      	mov	sl, ip
 8005a74:	eb19 0309 	adds.w	r3, r9, r9
 8005a78:	eb4a 040a 	adc.w	r4, sl, sl
 8005a7c:	4699      	mov	r9, r3
 8005a7e:	46a2      	mov	sl, r4
 8005a80:	eb19 090b 	adds.w	r9, r9, fp
 8005a84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a88:	f04f 0100 	mov.w	r1, #0
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a9c:	4689      	mov	r9, r1
 8005a9e:	4692      	mov	sl, r2
 8005aa0:	eb1b 0509 	adds.w	r5, fp, r9
 8005aa4:	eb4c 060a 	adc.w	r6, ip, sl
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4619      	mov	r1, r3
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	f04f 0400 	mov.w	r4, #0
 8005aba:	0094      	lsls	r4, r2, #2
 8005abc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ac0:	008b      	lsls	r3, r1, #2
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	4623      	mov	r3, r4
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	4631      	mov	r1, r6
 8005aca:	f7fa fb81 	bl	80001d0 <__aeabi_uldivmod>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4b0e      	ldr	r3, [pc, #56]	; (8005b10 <UART_SetConfig+0x6f4>)
 8005ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	2164      	movs	r1, #100	; 0x64
 8005ade:	fb01 f303 	mul.w	r3, r1, r3
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	3332      	adds	r3, #50	; 0x32
 8005ae8:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <UART_SetConfig+0x6f4>)
 8005aea:	fba2 2303 	umull	r2, r3, r2, r3
 8005aee:	095b      	lsrs	r3, r3, #5
 8005af0:	f003 020f 	and.w	r2, r3, #15
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4442      	add	r2, r8
 8005afa:	609a      	str	r2, [r3, #8]
}
 8005afc:	e7ff      	b.n	8005afe <UART_SetConfig+0x6e2>
 8005afe:	bf00      	nop
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b08:	40011000 	.word	0x40011000
 8005b0c:	40011400 	.word	0x40011400
 8005b10:	51eb851f 	.word	0x51eb851f

08005b14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b14:	b084      	sub	sp, #16
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	f107 001c 	add.w	r0, r7, #28
 8005b22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d122      	bne.n	8005b72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d105      	bne.n	8005b66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f94a 	bl	8005e00 <USB_CoreReset>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	73fb      	strb	r3, [r7, #15]
 8005b70:	e01a      	b.n	8005ba8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f93e 	bl	8005e00 <USB_CoreReset>
 8005b84:	4603      	mov	r3, r0
 8005b86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d106      	bne.n	8005b9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38
 8005b9a:	e005      	b.n	8005ba8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d10b      	bne.n	8005bc6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f043 0206 	orr.w	r2, r3, #6
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f043 0220 	orr.w	r2, r3, #32
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bd2:	b004      	add	sp, #16
 8005bd4:	4770      	bx	lr

08005bd6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f043 0201 	orr.w	r2, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f023 0201 	bic.w	r2, r3, #1
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	460b      	mov	r3, r1
 8005c24:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d106      	bne.n	8005c46 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	60da      	str	r2, [r3, #12]
 8005c44:	e00b      	b.n	8005c5e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c46:	78fb      	ldrb	r3, [r7, #3]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d106      	bne.n	8005c5a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60da      	str	r2, [r3, #12]
 8005c58:	e001      	b.n	8005c5e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e003      	b.n	8005c66 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005c5e:	2032      	movs	r0, #50	; 0x32
 8005c60:	f7fb fb38 	bl	80012d4 <HAL_Delay>

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	019b      	lsls	r3, r3, #6
 8005c82:	f043 0220 	orr.w	r2, r3, #32
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4a09      	ldr	r2, [pc, #36]	; (8005cb8 <USB_FlushTxFifo+0x48>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d901      	bls.n	8005c9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e006      	b.n	8005caa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f003 0320 	and.w	r3, r3, #32
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d0f0      	beq.n	8005c8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	00030d40 	.word	0x00030d40

08005cbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2210      	movs	r2, #16
 8005ccc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4a09      	ldr	r2, [pc, #36]	; (8005cfc <USB_FlushRxFifo+0x40>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d901      	bls.n	8005ce0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e006      	b.n	8005cee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	d0f0      	beq.n	8005cce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	00030d40 	.word	0x00030d40

08005d00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b089      	sub	sp, #36	; 0x24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	460b      	mov	r3, r1
 8005d10:	71fb      	strb	r3, [r7, #7]
 8005d12:	4613      	mov	r3, r2
 8005d14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005d1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d11a      	bne.n	8005d5c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d26:	88bb      	ldrh	r3, [r7, #4]
 8005d28:	3303      	adds	r3, #3
 8005d2a:	089b      	lsrs	r3, r3, #2
 8005d2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	e00f      	b.n	8005d54 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	031a      	lsls	r2, r3, #12
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d40:	461a      	mov	r2, r3
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	3301      	adds	r3, #1
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d3eb      	bcc.n	8005d34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3724      	adds	r7, #36	; 0x24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b089      	sub	sp, #36	; 0x24
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	4613      	mov	r3, r2
 8005d76:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005d80:	88fb      	ldrh	r3, [r7, #6]
 8005d82:	3303      	adds	r3, #3
 8005d84:	089b      	lsrs	r3, r3, #2
 8005d86:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61bb      	str	r3, [r7, #24]
 8005d8c:	e00b      	b.n	8005da6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	3301      	adds	r3, #1
 8005da4:	61bb      	str	r3, [r7, #24]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d3ef      	bcc.n	8005d8e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005dae:	69fb      	ldr	r3, [r7, #28]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3724      	adds	r7, #36	; 0x24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f003 0301 	and.w	r3, r3, #1
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <USB_CoreReset+0x64>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d901      	bls.n	8005e1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e01b      	b.n	8005e56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	daf2      	bge.n	8005e0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f043 0201 	orr.w	r2, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4a09      	ldr	r2, [pc, #36]	; (8005e64 <USB_CoreReset+0x64>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d901      	bls.n	8005e48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e006      	b.n	8005e56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d0f0      	beq.n	8005e36 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	00030d40 	.word	0x00030d40

08005e68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e68:	b084      	sub	sp, #16
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	f107 001c 	add.w	r0, r7, #28
 8005e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e84:	461a      	mov	r2, r3
 8005e86:	2300      	movs	r3, #0
 8005e88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d018      	beq.n	8005eec <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d10a      	bne.n	8005ed6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ece:	f043 0304 	orr.w	r3, r3, #4
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	e014      	b.n	8005f00 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ee4:	f023 0304 	bic.w	r3, r3, #4
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	e009      	b.n	8005f00 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005efa:	f023 0304 	bic.w	r3, r3, #4
 8005efe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005f00:	2110      	movs	r1, #16
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff feb4 	bl	8005c70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff fed7 	bl	8005cbc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	e015      	b.n	8005f40 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f20:	461a      	mov	r2, r3
 8005f22:	f04f 33ff 	mov.w	r3, #4294967295
 8005f26:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f34:	461a      	mov	r2, r3
 8005f36:	2300      	movs	r3, #0
 8005f38:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d3e5      	bcc.n	8005f14 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005f48:	2101      	movs	r1, #1
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f8ac 	bl	80060a8 <USB_DriveVbus>

  HAL_Delay(200U);
 8005f50:	20c8      	movs	r0, #200	; 0xc8
 8005f52:	f7fb f9bf 	bl	80012d4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f62:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00b      	beq.n	8005f88 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f76:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a14      	ldr	r2, [pc, #80]	; (8005fcc <USB_HostInit+0x164>)
 8005f7c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a13      	ldr	r2, [pc, #76]	; (8005fd0 <USB_HostInit+0x168>)
 8005f82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005f86:	e009      	b.n	8005f9c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2280      	movs	r2, #128	; 0x80
 8005f8c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a10      	ldr	r2, [pc, #64]	; (8005fd4 <USB_HostInit+0x16c>)
 8005f92:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a10      	ldr	r2, [pc, #64]	; (8005fd8 <USB_HostInit+0x170>)
 8005f98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d105      	bne.n	8005fae <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	f043 0210 	orr.w	r2, r3, #16
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699a      	ldr	r2, [r3, #24]
 8005fb2:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <USB_HostInit+0x174>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fc6:	b004      	add	sp, #16
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	01000200 	.word	0x01000200
 8005fd0:	00e00300 	.word	0x00e00300
 8005fd4:	00600080 	.word	0x00600080
 8005fd8:	004000e0 	.word	0x004000e0
 8005fdc:	a3200008 	.word	0xa3200008

08005fe0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ffe:	f023 0303 	bic.w	r3, r3, #3
 8006002:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	68f9      	ldr	r1, [r7, #12]
 8006014:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006018:	4313      	orrs	r3, r2
 800601a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d107      	bne.n	8006032 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006028:	461a      	mov	r2, r3
 800602a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800602e:	6053      	str	r3, [r2, #4]
 8006030:	e009      	b.n	8006046 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	2b02      	cmp	r3, #2
 8006036:	d106      	bne.n	8006046 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800603e:	461a      	mov	r2, r3
 8006040:	f241 7370 	movw	r3, #6000	; 0x1770
 8006044:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006074:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800607e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006082:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006084:	2064      	movs	r0, #100	; 0x64
 8006086:	f7fb f925 	bl	80012d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006092:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006096:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006098:	200a      	movs	r0, #10
 800609a:	f7fb f91b 	bl	80012d4 <HAL_Delay>

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d109      	bne.n	80060ec <USB_DriveVbus+0x44>
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d106      	bne.n	80060ec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060ea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f6:	d109      	bne.n	800610c <USB_DriveVbus+0x64>
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800610a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800611a:	b480      	push	{r7}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	0c5b      	lsrs	r3, r3, #17
 8006138:	f003 0303 	and.w	r3, r3, #3
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	b29b      	uxth	r3, r3
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
	...

0800616c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	4608      	mov	r0, r1
 8006176:	4611      	mov	r1, r2
 8006178:	461a      	mov	r2, r3
 800617a:	4603      	mov	r3, r0
 800617c:	70fb      	strb	r3, [r7, #3]
 800617e:	460b      	mov	r3, r1
 8006180:	70bb      	strb	r3, [r7, #2]
 8006182:	4613      	mov	r3, r2
 8006184:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800618e:	78fb      	ldrb	r3, [r7, #3]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619a:	461a      	mov	r2, r3
 800619c:	f04f 33ff 	mov.w	r3, #4294967295
 80061a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80061a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d87e      	bhi.n	80062a8 <USB_HC_Init+0x13c>
 80061aa:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <USB_HC_Init+0x44>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	080061c1 	.word	0x080061c1
 80061b4:	0800626b 	.word	0x0800626b
 80061b8:	080061c1 	.word	0x080061c1
 80061bc:	0800622d 	.word	0x0800622d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061cc:	461a      	mov	r2, r3
 80061ce:	f240 439d 	movw	r3, #1181	; 0x49d
 80061d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80061d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	da10      	bge.n	80061fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	78fa      	ldrb	r2, [r7, #3]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061fa:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80061fc:	e057      	b.n	80062ae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006206:	2b00      	cmp	r3, #0
 8006208:	d051      	beq.n	80062ae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	4413      	add	r3, r2
 8006212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	78fa      	ldrb	r2, [r7, #3]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	440a      	add	r2, r1
 8006220:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006224:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006228:	60d3      	str	r3, [r2, #12]
      break;
 800622a:	e040      	b.n	80062ae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4413      	add	r3, r2
 8006234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006238:	461a      	mov	r2, r3
 800623a:	f240 639d 	movw	r3, #1693	; 0x69d
 800623e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006240:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006244:	2b00      	cmp	r3, #0
 8006246:	da34      	bge.n	80062b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4413      	add	r3, r2
 8006250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	78fa      	ldrb	r2, [r7, #3]
 8006258:	0151      	lsls	r1, r2, #5
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	440a      	add	r2, r1
 800625e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006266:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006268:	e023      	b.n	80062b2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4413      	add	r3, r2
 8006272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006276:	461a      	mov	r2, r3
 8006278:	f240 2325 	movw	r3, #549	; 0x225
 800627c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800627e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006282:	2b00      	cmp	r3, #0
 8006284:	da17      	bge.n	80062b6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	4413      	add	r3, r2
 800628e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	78fa      	ldrb	r2, [r7, #3]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	440a      	add	r2, r1
 800629c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80062a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80062a6:	e006      	b.n	80062b6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	75fb      	strb	r3, [r7, #23]
      break;
 80062ac:	e004      	b.n	80062b8 <USB_HC_Init+0x14c>
      break;
 80062ae:	bf00      	nop
 80062b0:	e002      	b.n	80062b8 <USB_HC_Init+0x14c>
      break;
 80062b2:	bf00      	nop
 80062b4:	e000      	b.n	80062b8 <USB_HC_Init+0x14c>
      break;
 80062b6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062be:	699a      	ldr	r2, [r3, #24]
 80062c0:	78fb      	ldrb	r3, [r7, #3]
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	2101      	movs	r1, #1
 80062c8:	fa01 f303 	lsl.w	r3, r1, r3
 80062cc:	68b9      	ldr	r1, [r7, #8]
 80062ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062d2:	4313      	orrs	r3, r2
 80062d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80062e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	da03      	bge.n	80062f2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80062ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ee:	613b      	str	r3, [r7, #16]
 80062f0:	e001      	b.n	80062f6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80062f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d103      	bne.n	8006306 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80062fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	e001      	b.n	800630a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800630a:	787b      	ldrb	r3, [r7, #1]
 800630c:	059b      	lsls	r3, r3, #22
 800630e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006312:	78bb      	ldrb	r3, [r7, #2]
 8006314:	02db      	lsls	r3, r3, #11
 8006316:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800631a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800631c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006320:	049b      	lsls	r3, r3, #18
 8006322:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006326:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006328:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800632a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800632e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	0159      	lsls	r1, r3, #5
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	440b      	add	r3, r1
 800633c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006340:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006346:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006348:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800634c:	2b03      	cmp	r3, #3
 800634e:	d10f      	bne.n	8006370 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4413      	add	r3, r2
 8006358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	78fa      	ldrb	r2, [r7, #3]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	440a      	add	r2, r1
 8006366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800636a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800636e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006370:	7dfb      	ldrb	r3, [r7, #23]
}
 8006372:	4618      	mov	r0, r3
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop

08006380 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08c      	sub	sp, #48	; 0x30
 8006384:	af02      	add	r7, sp, #8
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	4613      	mov	r3, r2
 800638c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	785b      	ldrb	r3, [r3, #1]
 8006396:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800639c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d028      	beq.n	80063fc <USB_HC_StartXfer+0x7c>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	791b      	ldrb	r3, [r3, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d124      	bne.n	80063fc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10b      	bne.n	80063d0 <USB_HC_StartXfer+0x50>
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	795b      	ldrb	r3, [r3, #5]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d107      	bne.n	80063d0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	785b      	ldrb	r3, [r3, #1]
 80063c4:	4619      	mov	r1, r3
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 fa30 	bl	800682c <USB_DoPing>
      return HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	e114      	b.n	80065fa <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80063d0:	79fb      	ldrb	r3, [r7, #7]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d112      	bne.n	80063fc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	69fa      	ldr	r2, [r7, #28]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	6a3a      	ldr	r2, [r7, #32]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063f0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80063f4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2200      	movs	r2, #0
 80063fa:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d018      	beq.n	8006436 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	8912      	ldrh	r2, [r2, #8]
 800640c:	4413      	add	r3, r2
 800640e:	3b01      	subs	r3, #1
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	8912      	ldrh	r2, [r2, #8]
 8006414:	fbb3 f3f2 	udiv	r3, r3, r2
 8006418:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800641a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800641c:	8b7b      	ldrh	r3, [r7, #26]
 800641e:	429a      	cmp	r2, r3
 8006420:	d90b      	bls.n	800643a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006422:	8b7b      	ldrh	r3, [r7, #26]
 8006424:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006426:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	8912      	ldrh	r2, [r2, #8]
 800642c:	fb02 f203 	mul.w	r2, r2, r3
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	611a      	str	r2, [r3, #16]
 8006434:	e001      	b.n	800643a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006436:	2301      	movs	r3, #1
 8006438:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	78db      	ldrb	r3, [r3, #3]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d006      	beq.n	8006450 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006442:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	8912      	ldrh	r2, [r2, #8]
 8006448:	fb02 f203 	mul.w	r2, r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006458:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800645a:	04d9      	lsls	r1, r3, #19
 800645c:	4b69      	ldr	r3, [pc, #420]	; (8006604 <USB_HC_StartXfer+0x284>)
 800645e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006460:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	7a9b      	ldrb	r3, [r3, #10]
 8006466:	075b      	lsls	r3, r3, #29
 8006468:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800646c:	69f9      	ldr	r1, [r7, #28]
 800646e:	0148      	lsls	r0, r1, #5
 8006470:	6a39      	ldr	r1, [r7, #32]
 8006472:	4401      	add	r1, r0
 8006474:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006478:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800647a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d009      	beq.n	8006496 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	68d9      	ldr	r1, [r3, #12]
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	4413      	add	r3, r2
 800648e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006492:	460a      	mov	r2, r1
 8006494:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bf0c      	ite	eq
 80064a6:	2301      	moveq	r3, #1
 80064a8:	2300      	movne	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	6a3a      	ldr	r2, [r7, #32]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064cc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	7e7b      	ldrb	r3, [r7, #25]
 80064de:	075b      	lsls	r3, r3, #29
 80064e0:	69f9      	ldr	r1, [r7, #28]
 80064e2:	0148      	lsls	r0, r1, #5
 80064e4:	6a39      	ldr	r1, [r7, #32]
 80064e6:	4401      	add	r1, r0
 80064e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80064ec:	4313      	orrs	r3, r2
 80064ee:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a42      	ldr	r2, [pc, #264]	; (8006608 <USB_HC_StartXfer+0x288>)
 8006500:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006502:	4b41      	ldr	r3, [pc, #260]	; (8006608 <USB_HC_StartXfer+0x288>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800650a:	4a3f      	ldr	r2, [pc, #252]	; (8006608 <USB_HC_StartXfer+0x288>)
 800650c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	78db      	ldrb	r3, [r3, #3]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d006      	beq.n	8006524 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006516:	4b3c      	ldr	r3, [pc, #240]	; (8006608 <USB_HC_StartXfer+0x288>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800651e:	4a3a      	ldr	r2, [pc, #232]	; (8006608 <USB_HC_StartXfer+0x288>)
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	e005      	b.n	8006530 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006524:	4b38      	ldr	r3, [pc, #224]	; (8006608 <USB_HC_StartXfer+0x288>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800652c:	4a36      	ldr	r2, [pc, #216]	; (8006608 <USB_HC_StartXfer+0x288>)
 800652e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006530:	4b35      	ldr	r3, [pc, #212]	; (8006608 <USB_HC_StartXfer+0x288>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006538:	4a33      	ldr	r2, [pc, #204]	; (8006608 <USB_HC_StartXfer+0x288>)
 800653a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	4413      	add	r3, r2
 8006544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006548:	461a      	mov	r2, r3
 800654a:	4b2f      	ldr	r3, [pc, #188]	; (8006608 <USB_HC_StartXfer+0x288>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e04f      	b.n	80065fa <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	78db      	ldrb	r3, [r3, #3]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d14a      	bne.n	80065f8 <USB_HC_StartXfer+0x278>
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d046      	beq.n	80065f8 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	79db      	ldrb	r3, [r3, #7]
 800656e:	2b03      	cmp	r3, #3
 8006570:	d830      	bhi.n	80065d4 <USB_HC_StartXfer+0x254>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <USB_HC_StartXfer+0x1f8>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	08006589 	.word	0x08006589
 800657c:	080065ad 	.word	0x080065ad
 8006580:	08006589 	.word	0x08006589
 8006584:	080065ad 	.word	0x080065ad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	3303      	adds	r3, #3
 800658e:	089b      	lsrs	r3, r3, #2
 8006590:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006592:	8afa      	ldrh	r2, [r7, #22]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	b29b      	uxth	r3, r3
 800659a:	429a      	cmp	r2, r3
 800659c:	d91c      	bls.n	80065d8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	f043 0220 	orr.w	r2, r3, #32
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80065aa:	e015      	b.n	80065d8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	3303      	adds	r3, #3
 80065b2:	089b      	lsrs	r3, r3, #2
 80065b4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80065b6:	8afa      	ldrh	r2, [r7, #22]
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d90a      	bls.n	80065dc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80065d2:	e003      	b.n	80065dc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80065d4:	bf00      	nop
 80065d6:	e002      	b.n	80065de <USB_HC_StartXfer+0x25e>
        break;
 80065d8:	bf00      	nop
 80065da:	e000      	b.n	80065de <USB_HC_StartXfer+0x25e>
        break;
 80065dc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	68d9      	ldr	r1, [r3, #12]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	785a      	ldrb	r2, [r3, #1]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	b298      	uxth	r0, r3
 80065ec:	2300      	movs	r3, #0
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	4603      	mov	r3, r0
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7ff fb84 	bl	8005d00 <USB_WritePacket>
  }

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3728      	adds	r7, #40	; 0x28
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	1ff80000 	.word	0x1ff80000
 8006608:	200000b4 	.word	0x200000b4

0800660c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	b29b      	uxth	r3, r3
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800662e:	b480      	push	{r7}
 8006630:	b087      	sub	sp, #28
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	460b      	mov	r3, r1
 8006638:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	4413      	add	r3, r2
 800664e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	0c9b      	lsrs	r3, r3, #18
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <USB_HC_Halt+0x3a>
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d16c      	bne.n	8006742 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	4413      	add	r3, r2
 8006670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	440a      	add	r2, r1
 800667e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006682:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006686:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d143      	bne.n	800671c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	4413      	add	r3, r2
 800669c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	0151      	lsls	r1, r2, #5
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	440a      	add	r2, r1
 80066ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	0151      	lsls	r1, r2, #5
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	440a      	add	r2, r1
 80066ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066f2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	3301      	adds	r3, #1
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006700:	d81d      	bhi.n	800673e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	4413      	add	r3, r2
 800670a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006718:	d0ec      	beq.n	80066f4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800671a:	e080      	b.n	800681e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	4413      	add	r3, r2
 8006724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	0151      	lsls	r1, r2, #5
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	440a      	add	r2, r1
 8006732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800673a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800673c:	e06f      	b.n	800681e <USB_HC_Halt+0x1f0>
          break;
 800673e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006740:	e06d      	b.n	800681e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	4413      	add	r3, r2
 800674a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	0151      	lsls	r1, r2, #5
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	440a      	add	r2, r1
 8006758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800675c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006760:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d143      	bne.n	80067fa <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	4413      	add	r3, r2
 800677a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	440a      	add	r2, r1
 8006788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800678c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006790:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4413      	add	r3, r2
 800679a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067b0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	0151      	lsls	r1, r2, #5
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	440a      	add	r2, r1
 80067c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067d0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	3301      	adds	r3, #1
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067de:	d81d      	bhi.n	800681c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067f6:	d0ec      	beq.n	80067d2 <USB_HC_Halt+0x1a4>
 80067f8:	e011      	b.n	800681e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	4413      	add	r3, r2
 8006802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	0151      	lsls	r1, r2, #5
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	440a      	add	r2, r1
 8006810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	e000      	b.n	800681e <USB_HC_Halt+0x1f0>
          break;
 800681c:	bf00      	nop
    }
  }

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006840:	2301      	movs	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	04da      	lsls	r2, r3, #19
 8006848:	4b15      	ldr	r3, [pc, #84]	; (80068a0 <USB_DoPing+0x74>)
 800684a:	4013      	ands	r3, r2
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	0151      	lsls	r1, r2, #5
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	440a      	add	r2, r1
 8006854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006858:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800685c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	4413      	add	r3, r2
 8006866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006874:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800687c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	4413      	add	r3, r2
 8006886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688a:	461a      	mov	r2, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	1ff80000 	.word	0x1ff80000

080068a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff f99f 	bl	8005bf8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80068ba:	2110      	movs	r1, #16
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7ff f9d7 	bl	8005c70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff f9fa 	bl	8005cbc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80068c8:	2300      	movs	r3, #0
 80068ca:	613b      	str	r3, [r7, #16]
 80068cc:	e01f      	b.n	800690e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068f4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006902:	461a      	mov	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	3301      	adds	r3, #1
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b0f      	cmp	r3, #15
 8006912:	d9dc      	bls.n	80068ce <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006914:	2300      	movs	r3, #0
 8006916:	613b      	str	r3, [r7, #16]
 8006918:	e034      	b.n	8006984 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4413      	add	r3, r2
 8006922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006930:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006938:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006940:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800694e:	461a      	mov	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	3301      	adds	r3, #1
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006960:	d80c      	bhi.n	800697c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4413      	add	r3, r2
 800696a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006978:	d0ec      	beq.n	8006954 <USB_StopHost+0xb0>
 800697a:	e000      	b.n	800697e <USB_StopHost+0xda>
        break;
 800697c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	3301      	adds	r3, #1
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b0f      	cmp	r3, #15
 8006988:	d9c7      	bls.n	800691a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006990:	461a      	mov	r2, r3
 8006992:	f04f 33ff 	mov.w	r3, #4294967295
 8006996:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f04f 32ff 	mov.w	r2, #4294967295
 800699e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff f918 	bl	8005bd6 <USB_EnableGlobalInt>

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80069b0:	b590      	push	{r4, r7, lr}
 80069b2:	b089      	sub	sp, #36	; 0x24
 80069b4:	af04      	add	r7, sp, #16
 80069b6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80069b8:	2301      	movs	r3, #1
 80069ba:	2202      	movs	r2, #2
 80069bc:	2102      	movs	r1, #2
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fcb4 	bl	800732c <USBH_FindInterface>
 80069c4:	4603      	mov	r3, r0
 80069c6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	2bff      	cmp	r3, #255	; 0xff
 80069cc:	d002      	beq.n	80069d4 <USBH_CDC_InterfaceInit+0x24>
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d901      	bls.n	80069d8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80069d4:	2302      	movs	r3, #2
 80069d6:	e13d      	b.n	8006c54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fc89 	bl	80072f4 <USBH_SelectInterface>
 80069e2:	4603      	mov	r3, r0
 80069e4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80069e6:	7bbb      	ldrb	r3, [r7, #14]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80069ec:	2302      	movs	r3, #2
 80069ee:	e131      	b.n	8006c54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80069f6:	2050      	movs	r0, #80	; 0x50
 80069f8:	f005 fbc4 	bl	800c184 <malloc>
 80069fc:	4603      	mov	r3, r0
 80069fe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006a10:	2302      	movs	r3, #2
 8006a12:	e11f      	b.n	8006c54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006a14:	2250      	movs	r2, #80	; 0x50
 8006a16:	2100      	movs	r1, #0
 8006a18:	68b8      	ldr	r0, [r7, #8]
 8006a1a:	f005 fbce 	bl	800c1ba <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	211a      	movs	r1, #26
 8006a24:	fb01 f303 	mul.w	r3, r1, r3
 8006a28:	4413      	add	r3, r2
 8006a2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	b25b      	sxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	da15      	bge.n	8006a62 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	211a      	movs	r1, #26
 8006a3c:	fb01 f303 	mul.w	r3, r1, r3
 8006a40:	4413      	add	r3, r2
 8006a42:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a46:	781a      	ldrb	r2, [r3, #0]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	211a      	movs	r1, #26
 8006a52:	fb01 f303 	mul.w	r3, r1, r3
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a5c:	881a      	ldrh	r2, [r3, #0]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	785b      	ldrb	r3, [r3, #1]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f002 f890 	bl	8008b8e <USBH_AllocPipe>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	461a      	mov	r2, r3
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	7819      	ldrb	r1, [r3, #0]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	7858      	ldrb	r0, [r3, #1]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	8952      	ldrh	r2, [r2, #10]
 8006a8e:	9202      	str	r2, [sp, #8]
 8006a90:	2203      	movs	r2, #3
 8006a92:	9201      	str	r2, [sp, #4]
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	4623      	mov	r3, r4
 8006a98:	4602      	mov	r2, r0
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f002 f848 	bl	8008b30 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f005 fabb 	bl	800c024 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006aae:	2300      	movs	r3, #0
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	210a      	movs	r1, #10
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fc39 	bl	800732c <USBH_FindInterface>
 8006aba:	4603      	mov	r3, r0
 8006abc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	2bff      	cmp	r3, #255	; 0xff
 8006ac2:	d002      	beq.n	8006aca <USBH_CDC_InterfaceInit+0x11a>
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d901      	bls.n	8006ace <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006aca:	2302      	movs	r3, #2
 8006acc:	e0c2      	b.n	8006c54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	211a      	movs	r1, #26
 8006ad4:	fb01 f303 	mul.w	r3, r1, r3
 8006ad8:	4413      	add	r3, r2
 8006ada:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	b25b      	sxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	da16      	bge.n	8006b14 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	211a      	movs	r1, #26
 8006aec:	fb01 f303 	mul.w	r3, r1, r3
 8006af0:	4413      	add	r3, r2
 8006af2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006af6:	781a      	ldrb	r2, [r3, #0]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	211a      	movs	r1, #26
 8006b02:	fb01 f303 	mul.w	r3, r1, r3
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b0c:	881a      	ldrh	r2, [r3, #0]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	835a      	strh	r2, [r3, #26]
 8006b12:	e015      	b.n	8006b40 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	211a      	movs	r1, #26
 8006b1a:	fb01 f303 	mul.w	r3, r1, r3
 8006b1e:	4413      	add	r3, r2
 8006b20:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b24:	781a      	ldrb	r2, [r3, #0]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	211a      	movs	r1, #26
 8006b30:	fb01 f303 	mul.w	r3, r1, r3
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b3a:	881a      	ldrh	r2, [r3, #0]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	211a      	movs	r1, #26
 8006b46:	fb01 f303 	mul.w	r3, r1, r3
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	b25b      	sxtb	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	da16      	bge.n	8006b86 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	211a      	movs	r1, #26
 8006b5e:	fb01 f303 	mul.w	r3, r1, r3
 8006b62:	4413      	add	r3, r2
 8006b64:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	211a      	movs	r1, #26
 8006b74:	fb01 f303 	mul.w	r3, r1, r3
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b7e:	881a      	ldrh	r2, [r3, #0]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	835a      	strh	r2, [r3, #26]
 8006b84:	e015      	b.n	8006bb2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	211a      	movs	r1, #26
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
 8006b90:	4413      	add	r3, r2
 8006b92:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b96:	781a      	ldrb	r2, [r3, #0]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	211a      	movs	r1, #26
 8006ba2:	fb01 f303 	mul.w	r3, r1, r3
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006bac:	881a      	ldrh	r2, [r3, #0]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	7b9b      	ldrb	r3, [r3, #14]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 ffe8 	bl	8008b8e <USBH_AllocPipe>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	7bdb      	ldrb	r3, [r3, #15]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 ffde 	bl	8008b8e <USBH_AllocPipe>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	7b59      	ldrb	r1, [r3, #13]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	7b98      	ldrb	r0, [r3, #14]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	8b12      	ldrh	r2, [r2, #24]
 8006bf2:	9202      	str	r2, [sp, #8]
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	9201      	str	r2, [sp, #4]
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	4623      	mov	r3, r4
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f001 ff96 	bl	8008b30 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	7b19      	ldrb	r1, [r3, #12]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	7bd8      	ldrb	r0, [r3, #15]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	8b52      	ldrh	r2, [r2, #26]
 8006c1c:	9202      	str	r2, [sp, #8]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	9201      	str	r2, [sp, #4]
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	4623      	mov	r3, r4
 8006c26:	4602      	mov	r2, r0
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 ff81 	bl	8008b30 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	7b5b      	ldrb	r3, [r3, #13]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f005 f9f0 	bl	800c024 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	7b1b      	ldrb	r3, [r3, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f005 f9e9 	bl	800c024 <USBH_LL_SetToggle>

  return USBH_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd90      	pop	{r4, r7, pc}

08006c5c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00e      	beq.n	8006c94 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 ff76 	bl	8008b6e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 ffa1 	bl	8008bd0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	7b1b      	ldrb	r3, [r3, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00e      	beq.n	8006cba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	7b1b      	ldrb	r3, [r3, #12]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 ff63 	bl	8008b6e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	7b1b      	ldrb	r3, [r3, #12]
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f001 ff8e 	bl	8008bd0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	7b5b      	ldrb	r3, [r3, #13]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00e      	beq.n	8006ce0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	7b5b      	ldrb	r3, [r3, #13]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 ff50 	bl	8008b6e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	7b5b      	ldrb	r3, [r3, #13]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 ff7b 	bl	8008bd0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00b      	beq.n	8006d04 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f005 fa4d 	bl	800c194 <free>
    phost->pActiveClass->pData = 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d00:	2200      	movs	r2, #0
 8006d02:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b084      	sub	sp, #16
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3340      	adds	r3, #64	; 0x40
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f8b1 	bl	8006e8e <GetLineCoding>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006d30:	7afb      	ldrb	r3, [r7, #11]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d105      	bne.n	8006d42 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d3c:	2102      	movs	r1, #2
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006d42:	7afb      	ldrb	r3, [r7, #11]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d54:	2301      	movs	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d877      	bhi.n	8006e60 <USBH_CDC_Process+0x114>
 8006d70:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <USBH_CDC_Process+0x2c>)
 8006d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d76:	bf00      	nop
 8006d78:	08006d8d 	.word	0x08006d8d
 8006d7c:	08006d93 	.word	0x08006d93
 8006d80:	08006dc3 	.word	0x08006dc3
 8006d84:	08006e37 	.word	0x08006e37
 8006d88:	08006e45 	.word	0x08006e45
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d90:	e06d      	b.n	8006e6e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f897 	bl	8006ecc <SetLineCoding>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d104      	bne.n	8006db2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006db0:	e058      	b.n	8006e64 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d055      	beq.n	8006e64 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2204      	movs	r2, #4
 8006dbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006dc0:	e050      	b.n	8006e64 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	3340      	adds	r3, #64	; 0x40
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f860 	bl	8006e8e <GetLineCoding>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d126      	bne.n	8006e26 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dea:	791b      	ldrb	r3, [r3, #4]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d13b      	bne.n	8006e68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dfa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d133      	bne.n	8006e68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d12b      	bne.n	8006e68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e18:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d124      	bne.n	8006e68 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f984 	bl	800712c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e24:	e020      	b.n	8006e68 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d01d      	beq.n	8006e68 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2204      	movs	r2, #4
 8006e30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e34:	e018      	b.n	8006e68 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f867 	bl	8006f0a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f8f8 	bl	8007032 <CDC_ProcessReception>
      break;
 8006e42:	e014      	b.n	8006e6e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006e44:	2100      	movs	r1, #0
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f001 f94f 	bl	80080ea <USBH_ClrFeature>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10a      	bne.n	8006e6c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006e5e:	e005      	b.n	8006e6c <USBH_CDC_Process+0x120>

    default:
      break;
 8006e60:	bf00      	nop
 8006e62:	e004      	b.n	8006e6e <USBH_CDC_Process+0x122>
      break;
 8006e64:	bf00      	nop
 8006e66:	e002      	b.n	8006e6e <USBH_CDC_Process+0x122>
      break;
 8006e68:	bf00      	nop
 8006e6a:	e000      	b.n	8006e6e <USBH_CDC_Process+0x122>
      break;
 8006e6c:	bf00      	nop

  }

  return status;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	22a1      	movs	r2, #161	; 0xa1
 8006e9c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2221      	movs	r2, #33	; 0x21
 8006ea2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2207      	movs	r2, #7
 8006eb4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2207      	movs	r2, #7
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 faf4 	bl	80084aa <USBH_CtlReq>
 8006ec2:	4603      	mov	r3, r0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2221      	movs	r2, #33	; 0x21
 8006eda:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2207      	movs	r2, #7
 8006ef2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2207      	movs	r2, #7
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 fad5 	bl	80084aa <USBH_CtlReq>
 8006f00:	4603      	mov	r3, r0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b086      	sub	sp, #24
 8006f0e:	af02      	add	r7, sp, #8
 8006f10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d002      	beq.n	8006f30 <CDC_ProcessTransmission+0x26>
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d025      	beq.n	8006f7a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8006f2e:	e07c      	b.n	800702a <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	8b12      	ldrh	r2, [r2, #24]
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d90c      	bls.n	8006f56 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	69d9      	ldr	r1, [r3, #28]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8b1a      	ldrh	r2, [r3, #24]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	7b58      	ldrb	r0, [r3, #13]
 8006f48:	2301      	movs	r3, #1
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 fdab 	bl	8008aaa <USBH_BulkSendData>
 8006f54:	e00c      	b.n	8006f70 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	7b58      	ldrb	r0, [r3, #13]
 8006f64:	2301      	movs	r3, #1
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	4603      	mov	r3, r0
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fd9d 	bl	8008aaa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f78:	e057      	b.n	800702a <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	7b5b      	ldrb	r3, [r3, #13]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f005 f825 	bl	800bfd0 <USBH_LL_GetURBState>
 8006f86:	4603      	mov	r3, r0
 8006f88:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f8a:	7afb      	ldrb	r3, [r7, #11]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d136      	bne.n	8006ffe <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	8b12      	ldrh	r2, [r2, #24]
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d90e      	bls.n	8006fba <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	8b12      	ldrh	r2, [r2, #24]
 8006fa4:	1a9a      	subs	r2, r3, r2
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	8b12      	ldrh	r2, [r2, #24]
 8006fb2:	441a      	add	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	61da      	str	r2, [r3, #28]
 8006fb8:	e002      	b.n	8006fc0 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d004      	beq.n	8006fd2 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006fd0:	e006      	b.n	8006fe0 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f892 	bl	8007104 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f001 fff8 	bl	8008fec <osMessageQueuePut>
      break;
 8006ffc:	e014      	b.n	8007028 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8006ffe:	7afb      	ldrb	r3, [r7, #11]
 8007000:	2b02      	cmp	r3, #2
 8007002:	d111      	bne.n	8007028 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2204      	movs	r2, #4
 8007010:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007020:	2300      	movs	r3, #0
 8007022:	2200      	movs	r2, #0
 8007024:	f001 ffe2 	bl	8008fec <osMessageQueuePut>
      break;
 8007028:	bf00      	nop
  }
}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b086      	sub	sp, #24
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007044:	2300      	movs	r3, #0
 8007046:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800704e:	2b03      	cmp	r3, #3
 8007050:	d002      	beq.n	8007058 <CDC_ProcessReception+0x26>
 8007052:	2b04      	cmp	r3, #4
 8007054:	d00e      	beq.n	8007074 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007056:	e051      	b.n	80070fc <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	6a19      	ldr	r1, [r3, #32]
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	8b5a      	ldrh	r2, [r3, #26]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	7b1b      	ldrb	r3, [r3, #12]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 fd45 	bl	8008af4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2204      	movs	r2, #4
 800706e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007072:	e043      	b.n	80070fc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	7b1b      	ldrb	r3, [r3, #12]
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f004 ffa8 	bl	800bfd0 <USBH_LL_GetURBState>
 8007080:	4603      	mov	r3, r0
 8007082:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007084:	7cfb      	ldrb	r3, [r7, #19]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d137      	bne.n	80070fa <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	7b1b      	ldrb	r3, [r3, #12]
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f004 ff0b 	bl	800beac <USBH_LL_GetLastXferSize>
 8007096:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d016      	beq.n	80070d0 <CDC_ProcessReception+0x9e>
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	8b5b      	ldrh	r3, [r3, #26]
 80070a6:	461a      	mov	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d910      	bls.n	80070d0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	1ad2      	subs	r2, r2, r3
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	6a1a      	ldr	r2, [r3, #32]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	441a      	add	r2, r3
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2203      	movs	r2, #3
 80070ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80070ce:	e006      	b.n	80070de <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f81d 	bl	8007118 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2204      	movs	r2, #4
 80070e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80070f2:	2300      	movs	r3, #0
 80070f4:	2200      	movs	r2, #0
 80070f6:	f001 ff79 	bl	8008fec <osMessageQueuePut>
      break;
 80070fa:	bf00      	nop
  }
}
 80070fc:	bf00      	nop
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	4613      	mov	r3, r2
 800714c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007154:	2302      	movs	r3, #2
 8007156:	e044      	b.n	80071e2 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	79fa      	ldrb	r2, [r7, #7]
 800715c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 f841 	bl	80071f8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 80071a4:	2200      	movs	r2, #0
 80071a6:	2104      	movs	r1, #4
 80071a8:	2010      	movs	r0, #16
 80071aa:	f001 fe99 	bl	8008ee0 <osMessageQueueNew>
 80071ae:	4602      	mov	r2, r0
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 80071b6:	4b0d      	ldr	r3, [pc, #52]	; (80071ec <USBH_Init+0xac>)
 80071b8:	4a0d      	ldr	r2, [pc, #52]	; (80071f0 <USBH_Init+0xb0>)
 80071ba:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 80071bc:	4b0b      	ldr	r3, [pc, #44]	; (80071ec <USBH_Init+0xac>)
 80071be:	2280      	movs	r2, #128	; 0x80
 80071c0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 80071c2:	4b0a      	ldr	r3, [pc, #40]	; (80071ec <USBH_Init+0xac>)
 80071c4:	2218      	movs	r2, #24
 80071c6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80071c8:	4a08      	ldr	r2, [pc, #32]	; (80071ec <USBH_Init+0xac>)
 80071ca:	68f9      	ldr	r1, [r7, #12]
 80071cc:	4809      	ldr	r0, [pc, #36]	; (80071f4 <USBH_Init+0xb4>)
 80071ce:	f001 fdb3 	bl	8008d38 <osThreadNew>
 80071d2:	4602      	mov	r2, r0
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f004 fdb4 	bl	800bd48 <USBH_LL_Init>

  return USBH_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20004bd0 	.word	0x20004bd0
 80071f0:	0800c3f0 	.word	0x0800c3f0
 80071f4:	08007e61 	.word	0x08007e61

080071f8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007204:	2300      	movs	r3, #0
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	e009      	b.n	800721e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	33e0      	adds	r3, #224	; 0xe0
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	2200      	movs	r2, #0
 8007216:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3301      	adds	r3, #1
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2b0e      	cmp	r3, #14
 8007222:	d9f2      	bls.n	800720a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	e009      	b.n	800723e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007234:	2200      	movs	r2, #0
 8007236:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	3301      	adds	r3, #1
 800723c:	60fb      	str	r3, [r7, #12]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007244:	d3f1      	bcc.n	800722a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2240      	movs	r2, #64	; 0x40
 800726a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d016      	beq.n	80072e2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10e      	bne.n	80072dc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072c4:	1c59      	adds	r1, r3, #1
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	33de      	adds	r3, #222	; 0xde
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
 80072da:	e004      	b.n	80072e6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80072dc:	2302      	movs	r3, #2
 80072de:	73fb      	strb	r3, [r7, #15]
 80072e0:	e001      	b.n	80072e6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80072e2:	2302      	movs	r3, #2
 80072e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800730a:	78fa      	ldrb	r2, [r7, #3]
 800730c:	429a      	cmp	r2, r3
 800730e:	d204      	bcs.n	800731a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	78fa      	ldrb	r2, [r7, #3]
 8007314:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007318:	e001      	b.n	800731e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800731a:	2302      	movs	r3, #2
 800731c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800731e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	4608      	mov	r0, r1
 8007336:	4611      	mov	r1, r2
 8007338:	461a      	mov	r2, r3
 800733a:	4603      	mov	r3, r0
 800733c:	70fb      	strb	r3, [r7, #3]
 800733e:	460b      	mov	r3, r1
 8007340:	70bb      	strb	r3, [r7, #2]
 8007342:	4613      	mov	r3, r2
 8007344:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800734a:	2300      	movs	r3, #0
 800734c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007354:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007356:	e025      	b.n	80073a4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	221a      	movs	r2, #26
 800735c:	fb02 f303 	mul.w	r3, r2, r3
 8007360:	3308      	adds	r3, #8
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	4413      	add	r3, r2
 8007366:	3302      	adds	r3, #2
 8007368:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	795b      	ldrb	r3, [r3, #5]
 800736e:	78fa      	ldrb	r2, [r7, #3]
 8007370:	429a      	cmp	r2, r3
 8007372:	d002      	beq.n	800737a <USBH_FindInterface+0x4e>
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	2bff      	cmp	r3, #255	; 0xff
 8007378:	d111      	bne.n	800739e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800737e:	78ba      	ldrb	r2, [r7, #2]
 8007380:	429a      	cmp	r2, r3
 8007382:	d002      	beq.n	800738a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007384:	78bb      	ldrb	r3, [r7, #2]
 8007386:	2bff      	cmp	r3, #255	; 0xff
 8007388:	d109      	bne.n	800739e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800738e:	787a      	ldrb	r2, [r7, #1]
 8007390:	429a      	cmp	r2, r3
 8007392:	d002      	beq.n	800739a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007394:	787b      	ldrb	r3, [r7, #1]
 8007396:	2bff      	cmp	r3, #255	; 0xff
 8007398:	d101      	bne.n	800739e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	e006      	b.n	80073ac <USBH_FindInterface+0x80>
    }
    if_ix++;
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	3301      	adds	r3, #1
 80073a2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d9d6      	bls.n	8007358 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80073aa:	23ff      	movs	r3, #255	; 0xff
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	371c      	adds	r7, #28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f004 fcfd 	bl	800bdc0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80073c6:	2101      	movs	r1, #1
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f004 fe14 	bl	800bff6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af04      	add	r7, sp, #16
 80073de:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80073e0:	2302      	movs	r3, #2
 80073e2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d102      	bne.n	80073fa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2203      	movs	r2, #3
 80073f8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b0b      	cmp	r3, #11
 8007402:	f200 823c 	bhi.w	800787e <USBH_Process+0x4a6>
 8007406:	a201      	add	r2, pc, #4	; (adr r2, 800740c <USBH_Process+0x34>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	0800743d 	.word	0x0800743d
 8007410:	0800748b 	.word	0x0800748b
 8007414:	0800750f 	.word	0x0800750f
 8007418:	080077fd 	.word	0x080077fd
 800741c:	0800787f 	.word	0x0800787f
 8007420:	080075cf 	.word	0x080075cf
 8007424:	08007787 	.word	0x08007787
 8007428:	08007621 	.word	0x08007621
 800742c:	0800765d 	.word	0x0800765d
 8007430:	08007697 	.word	0x08007697
 8007434:	080076df 	.word	0x080076df
 8007438:	080077e5 	.word	0x080077e5
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 821c 	beq.w	8007882 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007450:	20c8      	movs	r0, #200	; 0xc8
 8007452:	f004 fe1a 	bl	800c08a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f004 fd0d 	bl	800be76 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007480:	2300      	movs	r3, #0
 8007482:	2200      	movs	r2, #0
 8007484:	f001 fdb2 	bl	8008fec <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007488:	e1fb      	b.n	8007882 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007490:	2b01      	cmp	r3, #1
 8007492:	d107      	bne.n	80074a4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	e025      	b.n	80074f0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074ae:	d914      	bls.n	80074da <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80074b6:	3301      	adds	r3, #1
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d903      	bls.n	80074d2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	220d      	movs	r2, #13
 80074ce:	701a      	strb	r2, [r3, #0]
 80074d0:	e00e      	b.n	80074f0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	701a      	strb	r2, [r3, #0]
 80074d8:	e00a      	b.n	80074f0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074e0:	f103 020a 	add.w	r2, r3, #10
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80074ea:	200a      	movs	r0, #10
 80074ec:	f004 fdcd 	bl	800c08a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007504:	2300      	movs	r3, #0
 8007506:	2200      	movs	r2, #0
 8007508:	f001 fd70 	bl	8008fec <osMessageQueuePut>
#endif
#endif
      break;
 800750c:	e1c0      	b.n	8007890 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800751e:	2104      	movs	r1, #4
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007524:	2064      	movs	r0, #100	; 0x64
 8007526:	f004 fdb0 	bl	800c08a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f004 fc7e 	bl	800be2c <USBH_LL_GetSpeed>
 8007530:	4603      	mov	r3, r0
 8007532:	461a      	mov	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2205      	movs	r2, #5
 800753e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007540:	2100      	movs	r1, #0
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 fb23 	bl	8008b8e <USBH_AllocPipe>
 8007548:	4603      	mov	r3, r0
 800754a:	461a      	mov	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007550:	2180      	movs	r1, #128	; 0x80
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f001 fb1b 	bl	8008b8e <USBH_AllocPipe>
 8007558:	4603      	mov	r3, r0
 800755a:	461a      	mov	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	7919      	ldrb	r1, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007574:	b292      	uxth	r2, r2
 8007576:	9202      	str	r2, [sp, #8]
 8007578:	2200      	movs	r2, #0
 800757a:	9201      	str	r2, [sp, #4]
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	4603      	mov	r3, r0
 8007580:	2280      	movs	r2, #128	; 0x80
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 fad4 	bl	8008b30 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	7959      	ldrb	r1, [r3, #5]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800759c:	b292      	uxth	r2, r2
 800759e:	9202      	str	r2, [sp, #8]
 80075a0:	2200      	movs	r2, #0
 80075a2:	9201      	str	r2, [sp, #4]
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	4603      	mov	r3, r0
 80075a8:	2200      	movs	r2, #0
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f001 fac0 	bl	8008b30 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80075c4:	2300      	movs	r3, #0
 80075c6:	2200      	movs	r2, #0
 80075c8:	f001 fd10 	bl	8008fec <osMessageQueuePut>
#endif
#endif
      break;
 80075cc:	e160      	b.n	8007890 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f964 	bl	800789c <USBH_HandleEnum>
 80075d4:	4603      	mov	r3, r0
 80075d6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f040 8152 	bne.w	8007886 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d103      	bne.n	80075fc <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2208      	movs	r2, #8
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	e002      	b.n	8007602 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2207      	movs	r2, #7
 8007600:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2205      	movs	r2, #5
 8007606:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007616:	2300      	movs	r3, #0
 8007618:	2200      	movs	r2, #0
 800761a:	f001 fce7 	bl	8008fec <osMessageQueuePut>
#endif
#endif
      }
      break;
 800761e:	e132      	b.n	8007886 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 812f 	beq.w	800788a <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007632:	2101      	movs	r1, #1
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2208      	movs	r2, #8
 800763c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2205      	movs	r2, #5
 8007642:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007652:	2300      	movs	r3, #0
 8007654:	2200      	movs	r2, #0
 8007656:	f001 fcc9 	bl	8008fec <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800765a:	e116      	b.n	800788a <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007662:	b29b      	uxth	r3, r3
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fcf8 	bl	800805c <USBH_SetCfg>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d102      	bne.n	8007678 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2209      	movs	r2, #9
 8007676:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800768c:	2300      	movs	r3, #0
 800768e:	2200      	movs	r2, #0
 8007690:	f001 fcac 	bl	8008fec <osMessageQueuePut>
#endif
#endif
      break;
 8007694:	e0fc      	b.n	8007890 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800769c:	f003 0320 	and.w	r3, r3, #32
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00a      	beq.n	80076ba <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80076a4:	2101      	movs	r1, #1
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fcfb 	bl	80080a2 <USBH_SetFeature>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d106      	bne.n	80076c0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	220a      	movs	r2, #10
 80076b6:	701a      	strb	r2, [r3, #0]
 80076b8:	e002      	b.n	80076c0 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	220a      	movs	r2, #10
 80076be:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80076d4:	2300      	movs	r3, #0
 80076d6:	2200      	movs	r2, #0
 80076d8:	f001 fc88 	bl	8008fec <osMessageQueuePut>
#endif
#endif
      break;
 80076dc:	e0d8      	b.n	8007890 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d03f      	beq.n	8007768 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]
 80076f4:	e016      	b.n	8007724 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80076f6:	7bfa      	ldrb	r2, [r7, #15]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	32de      	adds	r2, #222	; 0xde
 80076fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007700:	791a      	ldrb	r2, [r3, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007708:	429a      	cmp	r2, r3
 800770a:	d108      	bne.n	800771e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800770c:	7bfa      	ldrb	r2, [r7, #15]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	32de      	adds	r2, #222	; 0xde
 8007712:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800771c:	e005      	b.n	800772a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	3301      	adds	r3, #1
 8007722:	73fb      	strb	r3, [r7, #15]
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d0e5      	beq.n	80076f6 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007730:	2b00      	cmp	r3, #0
 8007732:	d016      	beq.n	8007762 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	4798      	blx	r3
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d109      	bne.n	800775a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2206      	movs	r2, #6
 800774a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007752:	2103      	movs	r1, #3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	4798      	blx	r3
 8007758:	e006      	b.n	8007768 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	220d      	movs	r2, #13
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	e002      	b.n	8007768 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	220d      	movs	r2, #13
 8007766:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2205      	movs	r2, #5
 800776c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800777c:	2300      	movs	r3, #0
 800777e:	2200      	movs	r2, #0
 8007780:	f001 fc34 	bl	8008fec <osMessageQueuePut>
#endif
#endif
      break;
 8007784:	e084      	b.n	8007890 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d017      	beq.n	80077c0 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	4798      	blx	r3
 800779c:	4603      	mov	r3, r0
 800779e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d103      	bne.n	80077b0 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	220b      	movs	r2, #11
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	e00a      	b.n	80077c6 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d106      	bne.n	80077c6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	220d      	movs	r2, #13
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	e002      	b.n	80077c6 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	220d      	movs	r2, #13
 80077c4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2205      	movs	r2, #5
 80077ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80077da:	2300      	movs	r3, #0
 80077dc:	2200      	movs	r2, #0
 80077de:	f001 fc05 	bl	8008fec <osMessageQueuePut>
#endif
#endif
      break;
 80077e2:	e055      	b.n	8007890 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d04f      	beq.n	800788e <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	4798      	blx	r3
      }
      break;
 80077fa:	e048      	b.n	800788e <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7ff fcf7 	bl	80071f8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007810:	2b00      	cmp	r3, #0
 8007812:	d009      	beq.n	8007828 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800782e:	2b00      	cmp	r3, #0
 8007830:	d005      	beq.n	800783e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007838:	2105      	movs	r1, #5
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b01      	cmp	r3, #1
 8007848:	d107      	bne.n	800785a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff fdb0 	bl	80073b8 <USBH_Start>
 8007858:	e002      	b.n	8007860 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f004 fab0 	bl	800bdc0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007874:	2300      	movs	r3, #0
 8007876:	2200      	movs	r2, #0
 8007878:	f001 fbb8 	bl	8008fec <osMessageQueuePut>
#endif
#endif
      break;
 800787c:	e008      	b.n	8007890 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800787e:	bf00      	nop
 8007880:	e006      	b.n	8007890 <USBH_Process+0x4b8>
      break;
 8007882:	bf00      	nop
 8007884:	e004      	b.n	8007890 <USBH_Process+0x4b8>
      break;
 8007886:	bf00      	nop
 8007888:	e002      	b.n	8007890 <USBH_Process+0x4b8>
    break;
 800788a:	bf00      	nop
 800788c:	e000      	b.n	8007890 <USBH_Process+0x4b8>
      break;
 800788e:	bf00      	nop
  }
  return USBH_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop

0800789c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b088      	sub	sp, #32
 80078a0:	af04      	add	r7, sp, #16
 80078a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80078a4:	2301      	movs	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80078a8:	2301      	movs	r3, #1
 80078aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	785b      	ldrb	r3, [r3, #1]
 80078b0:	2b07      	cmp	r3, #7
 80078b2:	f200 8208 	bhi.w	8007cc6 <USBH_HandleEnum+0x42a>
 80078b6:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <USBH_HandleEnum+0x20>)
 80078b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078bc:	080078dd 	.word	0x080078dd
 80078c0:	0800799b 	.word	0x0800799b
 80078c4:	08007a05 	.word	0x08007a05
 80078c8:	08007a93 	.word	0x08007a93
 80078cc:	08007afd 	.word	0x08007afd
 80078d0:	08007b6d 	.word	0x08007b6d
 80078d4:	08007c09 	.word	0x08007c09
 80078d8:	08007c87 	.word	0x08007c87
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80078dc:	2108      	movs	r1, #8
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 faec 	bl	8007ebc <USBH_Get_DevDesc>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d130      	bne.n	8007950 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	7919      	ldrb	r1, [r3, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007912:	b292      	uxth	r2, r2
 8007914:	9202      	str	r2, [sp, #8]
 8007916:	2200      	movs	r2, #0
 8007918:	9201      	str	r2, [sp, #4]
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	4603      	mov	r3, r0
 800791e:	2280      	movs	r2, #128	; 0x80
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 f905 	bl	8008b30 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	7959      	ldrb	r1, [r3, #5]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800793a:	b292      	uxth	r2, r2
 800793c:	9202      	str	r2, [sp, #8]
 800793e:	2200      	movs	r2, #0
 8007940:	9201      	str	r2, [sp, #4]
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	4603      	mov	r3, r0
 8007946:	2200      	movs	r2, #0
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f8f1 	bl	8008b30 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800794e:	e1bc      	b.n	8007cca <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	2b03      	cmp	r3, #3
 8007954:	f040 81b9 	bne.w	8007cca <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800795e:	3301      	adds	r3, #1
 8007960:	b2da      	uxtb	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800796e:	2b03      	cmp	r3, #3
 8007970:	d903      	bls.n	800797a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	220d      	movs	r2, #13
 8007976:	701a      	strb	r2, [r3, #0]
      break;
 8007978:	e1a7      	b.n	8007cca <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	795b      	ldrb	r3, [r3, #5]
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 f925 	bl	8008bd0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	791b      	ldrb	r3, [r3, #4]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f001 f91f 	bl	8008bd0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	701a      	strb	r2, [r3, #0]
      break;
 8007998:	e197      	b.n	8007cca <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800799a:	2112      	movs	r1, #18
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fa8d 	bl	8007ebc <USBH_Get_DevDesc>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d103      	bne.n	80079b4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079b2:	e18c      	b.n	8007cce <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	f040 8189 	bne.w	8007cce <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079c2:	3301      	adds	r3, #1
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d903      	bls.n	80079de <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	220d      	movs	r2, #13
 80079da:	701a      	strb	r2, [r3, #0]
      break;
 80079dc:	e177      	b.n	8007cce <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	795b      	ldrb	r3, [r3, #5]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f8f3 	bl	8008bd0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	791b      	ldrb	r3, [r3, #4]
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 f8ed 	bl	8008bd0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	701a      	strb	r2, [r3, #0]
      break;
 8007a02:	e164      	b.n	8007cce <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007a04:	2101      	movs	r1, #1
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fb04 	bl	8008014 <USBH_SetAddress>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d132      	bne.n	8007a7c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007a16:	2002      	movs	r0, #2
 8007a18:	f004 fb37 	bl	800c08a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2203      	movs	r2, #3
 8007a28:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	7919      	ldrb	r1, [r3, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a3e:	b292      	uxth	r2, r2
 8007a40:	9202      	str	r2, [sp, #8]
 8007a42:	2200      	movs	r2, #0
 8007a44:	9201      	str	r2, [sp, #4]
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2280      	movs	r2, #128	; 0x80
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f001 f86f 	bl	8008b30 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	7959      	ldrb	r1, [r3, #5]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a66:	b292      	uxth	r2, r2
 8007a68:	9202      	str	r2, [sp, #8]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	9201      	str	r2, [sp, #4]
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	4603      	mov	r3, r0
 8007a72:	2200      	movs	r2, #0
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 f85b 	bl	8008b30 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a7a:	e12a      	b.n	8007cd2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	f040 8127 	bne.w	8007cd2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	220d      	movs	r2, #13
 8007a88:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	705a      	strb	r2, [r3, #1]
      break;
 8007a90:	e11f      	b.n	8007cd2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007a92:	2109      	movs	r1, #9
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fa39 	bl	8007f0c <USBH_Get_CfgDesc>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d103      	bne.n	8007aac <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2204      	movs	r2, #4
 8007aa8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007aaa:	e114      	b.n	8007cd6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	f040 8111 	bne.w	8007cd6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007aba:	3301      	adds	r3, #1
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d903      	bls.n	8007ad6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	220d      	movs	r2, #13
 8007ad2:	701a      	strb	r2, [r3, #0]
      break;
 8007ad4:	e0ff      	b.n	8007cd6 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	795b      	ldrb	r3, [r3, #5]
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 f877 	bl	8008bd0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	791b      	ldrb	r3, [r3, #4]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 f871 	bl	8008bd0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	701a      	strb	r2, [r3, #0]
      break;
 8007afa:	e0ec      	b.n	8007cd6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fa01 	bl	8007f0c <USBH_Get_CfgDesc>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d103      	bne.n	8007b1c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2205      	movs	r2, #5
 8007b18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b1a:	e0de      	b.n	8007cda <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	f040 80db 	bne.w	8007cda <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d903      	bls.n	8007b46 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	220d      	movs	r2, #13
 8007b42:	701a      	strb	r2, [r3, #0]
      break;
 8007b44:	e0c9      	b.n	8007cda <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	795b      	ldrb	r3, [r3, #5]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f001 f83f 	bl	8008bd0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	791b      	ldrb	r3, [r3, #4]
 8007b56:	4619      	mov	r1, r3
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 f839 	bl	8008bd0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	701a      	strb	r2, [r3, #0]
      break;
 8007b6a:	e0b6      	b.n	8007cda <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d036      	beq.n	8007be4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b82:	23ff      	movs	r3, #255	; 0xff
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f9e5 	bl	8007f54 <USBH_Get_StringDesc>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d111      	bne.n	8007bb8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2206      	movs	r2, #6
 8007b98:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2205      	movs	r2, #5
 8007b9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007bae:	2300      	movs	r3, #0
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f001 fa1b 	bl	8008fec <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007bb6:	e092      	b.n	8007cde <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	f040 808f 	bne.w	8007cde <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2206      	movs	r2, #6
 8007bc4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2205      	movs	r2, #5
 8007bca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007bda:	2300      	movs	r3, #0
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f001 fa05 	bl	8008fec <osMessageQueuePut>
      break;
 8007be2:	e07c      	b.n	8007cde <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2206      	movs	r2, #6
 8007be8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2205      	movs	r2, #5
 8007bee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007bfe:	2300      	movs	r3, #0
 8007c00:	2200      	movs	r2, #0
 8007c02:	f001 f9f3 	bl	8008fec <osMessageQueuePut>
      break;
 8007c06:	e06a      	b.n	8007cde <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d027      	beq.n	8007c62 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c1e:	23ff      	movs	r3, #255	; 0xff
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f997 	bl	8007f54 <USBH_Get_StringDesc>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d103      	bne.n	8007c38 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2207      	movs	r2, #7
 8007c34:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007c36:	e054      	b.n	8007ce2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d151      	bne.n	8007ce2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2207      	movs	r2, #7
 8007c42:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2205      	movs	r2, #5
 8007c48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f001 f9c6 	bl	8008fec <osMessageQueuePut>
      break;
 8007c60:	e03f      	b.n	8007ce2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2207      	movs	r2, #7
 8007c66:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2205      	movs	r2, #5
 8007c6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f001 f9b4 	bl	8008fec <osMessageQueuePut>
      break;
 8007c84:	e02d      	b.n	8007ce2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d017      	beq.n	8007cc0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c9c:	23ff      	movs	r3, #255	; 0xff
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f958 	bl	8007f54 <USBH_Get_StringDesc>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d102      	bne.n	8007cb4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007cb2:	e018      	b.n	8007ce6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d115      	bne.n	8007ce6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbe:	e012      	b.n	8007ce6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc4:	e00f      	b.n	8007ce6 <USBH_HandleEnum+0x44a>

    default:
      break;
 8007cc6:	bf00      	nop
 8007cc8:	e00e      	b.n	8007ce8 <USBH_HandleEnum+0x44c>
      break;
 8007cca:	bf00      	nop
 8007ccc:	e00c      	b.n	8007ce8 <USBH_HandleEnum+0x44c>
      break;
 8007cce:	bf00      	nop
 8007cd0:	e00a      	b.n	8007ce8 <USBH_HandleEnum+0x44c>
      break;
 8007cd2:	bf00      	nop
 8007cd4:	e008      	b.n	8007ce8 <USBH_HandleEnum+0x44c>
      break;
 8007cd6:	bf00      	nop
 8007cd8:	e006      	b.n	8007ce8 <USBH_HandleEnum+0x44c>
      break;
 8007cda:	bf00      	nop
 8007cdc:	e004      	b.n	8007ce8 <USBH_HandleEnum+0x44c>
      break;
 8007cde:	bf00      	nop
 8007ce0:	e002      	b.n	8007ce8 <USBH_HandleEnum+0x44c>
      break;
 8007ce2:	bf00      	nop
 8007ce4:	e000      	b.n	8007ce8 <USBH_HandleEnum+0x44c>
      break;
 8007ce6:	bf00      	nop
  }
  return Status;
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop

08007cf4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f804 	bl	8007d36 <USBH_HandleSof>
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b0b      	cmp	r3, #11
 8007d46:	d10a      	bne.n	8007d5e <USBH_HandleSof+0x28>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	4798      	blx	r3
  }
}
 8007d5e:	bf00      	nop
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b082      	sub	sp, #8
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f001 f92d 	bl	8008fec <osMessageQueuePut>
#endif
#endif

  return;
 8007d92:	bf00      	nop
}
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007daa:	bf00      	nop
}
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007dea:	2300      	movs	r3, #0
 8007dec:	2200      	movs	r2, #0
 8007dee:	f001 f8fd 	bl	8008fec <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f003 ffea 	bl	800bdf6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	791b      	ldrb	r3, [r3, #4]
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fed1 	bl	8008bd0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	795b      	ldrb	r3, [r3, #5]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fecb 	bl	8008bd0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e4e:	2300      	movs	r3, #0
 8007e50:	2200      	movs	r2, #0
 8007e52:	f001 f8cb 	bl	8008fec <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007e74:	f04f 33ff 	mov.w	r3, #4294967295
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f001 f92b 	bl	80090d4 <osMessageQueueGet>
 8007e7e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1f0      	bne.n	8007e68 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7ff faa6 	bl	80073d8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007e8c:	e7ec      	b.n	8007e68 <USBH_Process_OS+0x8>

08007e8e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007eaa:	2300      	movs	r3, #0
 8007eac:	2200      	movs	r2, #0
 8007eae:	f001 f89d 	bl	8008fec <osMessageQueuePut>
#endif

  return USBH_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007ece:	78fb      	ldrb	r3, [r7, #3]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007eda:	2100      	movs	r1, #0
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f864 	bl	8007faa <USBH_GetDescriptor>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73fb      	strb	r3, [r7, #15]
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10a      	bne.n	8007f02 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ef8:	78fa      	ldrb	r2, [r7, #3]
 8007efa:	b292      	uxth	r2, r2
 8007efc:	4619      	mov	r1, r3
 8007efe:	f000 f918 	bl	8008132 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	331c      	adds	r3, #28
 8007f1c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f1e:	887b      	ldrh	r3, [r7, #2]
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f28:	2100      	movs	r1, #0
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f83d 	bl	8007faa <USBH_GetDescriptor>
 8007f30:	4603      	mov	r3, r0
 8007f32:	72fb      	strb	r3, [r7, #11]
 8007f34:	7afb      	ldrb	r3, [r7, #11]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d107      	bne.n	8007f4a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f40:	887a      	ldrh	r2, [r7, #2]
 8007f42:	68f9      	ldr	r1, [r7, #12]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 f964 	bl	8008212 <USBH_ParseCfgDesc>
  }

  return status;
 8007f4a:	7afb      	ldrb	r3, [r7, #11]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b088      	sub	sp, #32
 8007f58:	af02      	add	r7, sp, #8
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	607a      	str	r2, [r7, #4]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	460b      	mov	r3, r1
 8007f62:	72fb      	strb	r3, [r7, #11]
 8007f64:	4613      	mov	r3, r2
 8007f66:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007f68:	7afb      	ldrb	r3, [r7, #11]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007f70:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007f78:	893b      	ldrh	r3, [r7, #8]
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	2100      	movs	r1, #0
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f000 f812 	bl	8007faa <USBH_GetDescriptor>
 8007f86:	4603      	mov	r3, r0
 8007f88:	75fb      	strb	r3, [r7, #23]
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d107      	bne.n	8007fa0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f96:	893a      	ldrh	r2, [r7, #8]
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fa37 	bl	800840e <USBH_ParseStringDesc>
  }

  return status;
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	60f8      	str	r0, [r7, #12]
 8007fb2:	607b      	str	r3, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	72fb      	strb	r3, [r7, #11]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	789b      	ldrb	r3, [r3, #2]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d11c      	bne.n	8007ffe <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007fc4:	7afb      	ldrb	r3, [r7, #11]
 8007fc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2206      	movs	r2, #6
 8007fd4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	893a      	ldrh	r2, [r7, #8]
 8007fda:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007fdc:	893b      	ldrh	r3, [r7, #8]
 8007fde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fe6:	d104      	bne.n	8007ff2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f240 4209 	movw	r2, #1033	; 0x409
 8007fee:	829a      	strh	r2, [r3, #20]
 8007ff0:	e002      	b.n	8007ff8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	8b3a      	ldrh	r2, [r7, #24]
 8007ffc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007ffe:	8b3b      	ldrh	r3, [r7, #24]
 8008000:	461a      	mov	r2, r3
 8008002:	6879      	ldr	r1, [r7, #4]
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 fa50 	bl	80084aa <USBH_CtlReq>
 800800a:	4603      	mov	r3, r0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	789b      	ldrb	r3, [r3, #2]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d10f      	bne.n	8008048 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2205      	movs	r2, #5
 8008032:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	b29a      	uxth	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008048:	2200      	movs	r2, #0
 800804a:	2100      	movs	r1, #0
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fa2c 	bl	80084aa <USBH_CtlReq>
 8008052:	4603      	mov	r3, r0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	789b      	ldrb	r3, [r3, #2]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d10e      	bne.n	800808e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2209      	movs	r2, #9
 800807a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	887a      	ldrh	r2, [r7, #2]
 8008080:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800808e:	2200      	movs	r2, #0
 8008090:	2100      	movs	r1, #0
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fa09 	bl	80084aa <USBH_CtlReq>
 8008098:	4603      	mov	r3, r0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b082      	sub	sp, #8
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	460b      	mov	r3, r1
 80080ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	789b      	ldrb	r3, [r3, #2]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d10f      	bne.n	80080d6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2203      	movs	r2, #3
 80080c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80080c2:	78fb      	ldrb	r3, [r7, #3]
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80080d6:	2200      	movs	r2, #0
 80080d8:	2100      	movs	r1, #0
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f9e5 	bl	80084aa <USBH_CtlReq>
 80080e0:	4603      	mov	r3, r0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	789b      	ldrb	r3, [r3, #2]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d10f      	bne.n	800811e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2202      	movs	r2, #2
 8008102:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	b29a      	uxth	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800811e:	2200      	movs	r2, #0
 8008120:	2100      	movs	r1, #0
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f9c1 	bl	80084aa <USBH_CtlReq>
 8008128:	4603      	mov	r3, r0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008132:	b480      	push	{r7}
 8008134:	b085      	sub	sp, #20
 8008136:	af00      	add	r7, sp, #0
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	4613      	mov	r3, r2
 800813e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	781a      	ldrb	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	785a      	ldrb	r2, [r3, #1]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	3302      	adds	r3, #2
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	b29a      	uxth	r2, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	3303      	adds	r3, #3
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	021b      	lsls	r3, r3, #8
 8008162:	b29b      	uxth	r3, r3
 8008164:	4313      	orrs	r3, r2
 8008166:	b29a      	uxth	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	791a      	ldrb	r2, [r3, #4]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	795a      	ldrb	r2, [r3, #5]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	799a      	ldrb	r2, [r3, #6]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	79da      	ldrb	r2, [r3, #7]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800818c:	88fb      	ldrh	r3, [r7, #6]
 800818e:	2b08      	cmp	r3, #8
 8008190:	d939      	bls.n	8008206 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	3308      	adds	r3, #8
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	b29a      	uxth	r2, r3
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	3309      	adds	r3, #9
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	021b      	lsls	r3, r3, #8
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	4313      	orrs	r3, r2
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	330a      	adds	r3, #10
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	330b      	adds	r3, #11
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	021b      	lsls	r3, r3, #8
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	4313      	orrs	r3, r2
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	330c      	adds	r3, #12
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	330d      	adds	r3, #13
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	021b      	lsls	r3, r3, #8
 80081dc:	b29b      	uxth	r3, r3
 80081de:	4313      	orrs	r3, r2
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	7b9a      	ldrb	r2, [r3, #14]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	7bda      	ldrb	r2, [r3, #15]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	7c1a      	ldrb	r2, [r3, #16]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	7c5a      	ldrb	r2, [r3, #17]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	745a      	strb	r2, [r3, #17]
  }
}
 8008206:	bf00      	nop
 8008208:	3714      	adds	r7, #20
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b08a      	sub	sp, #40	; 0x28
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	4613      	mov	r3, r2
 800821e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	781a      	ldrb	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	785a      	ldrb	r2, [r3, #1]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	3302      	adds	r3, #2
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	b29a      	uxth	r2, r3
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	3303      	adds	r3, #3
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	b29b      	uxth	r3, r3
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	b29b      	uxth	r3, r3
 8008258:	4313      	orrs	r3, r2
 800825a:	b29a      	uxth	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	791a      	ldrb	r2, [r3, #4]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	795a      	ldrb	r2, [r3, #5]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	799a      	ldrb	r2, [r3, #6]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	79da      	ldrb	r2, [r3, #7]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	7a1a      	ldrb	r2, [r3, #8]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008288:	88fb      	ldrh	r3, [r7, #6]
 800828a:	2b09      	cmp	r3, #9
 800828c:	d95f      	bls.n	800834e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800828e:	2309      	movs	r3, #9
 8008290:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008292:	2300      	movs	r3, #0
 8008294:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008296:	e051      	b.n	800833c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008298:	f107 0316 	add.w	r3, r7, #22
 800829c:	4619      	mov	r1, r3
 800829e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082a0:	f000 f8e8 	bl	8008474 <USBH_GetNextDesc>
 80082a4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	785b      	ldrb	r3, [r3, #1]
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d146      	bne.n	800833c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80082ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082b2:	221a      	movs	r2, #26
 80082b4:	fb02 f303 	mul.w	r3, r2, r3
 80082b8:	3308      	adds	r3, #8
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	4413      	add	r3, r2
 80082be:	3302      	adds	r3, #2
 80082c0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80082c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082c4:	69f8      	ldr	r0, [r7, #28]
 80082c6:	f000 f846 	bl	8008356 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082d4:	e022      	b.n	800831c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082d6:	f107 0316 	add.w	r3, r7, #22
 80082da:	4619      	mov	r1, r3
 80082dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082de:	f000 f8c9 	bl	8008474 <USBH_GetNextDesc>
 80082e2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	2b05      	cmp	r3, #5
 80082ea:	d117      	bne.n	800831c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80082ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80082f4:	3201      	adds	r2, #1
 80082f6:	00d2      	lsls	r2, r2, #3
 80082f8:	211a      	movs	r1, #26
 80082fa:	fb01 f303 	mul.w	r3, r1, r3
 80082fe:	4413      	add	r3, r2
 8008300:	3308      	adds	r3, #8
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	4413      	add	r3, r2
 8008306:	3304      	adds	r3, #4
 8008308:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800830a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800830c:	69b8      	ldr	r0, [r7, #24]
 800830e:	f000 f851 	bl	80083b4 <USBH_ParseEPDesc>
            ep_ix++;
 8008312:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008316:	3301      	adds	r3, #1
 8008318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	791b      	ldrb	r3, [r3, #4]
 8008320:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008324:	429a      	cmp	r2, r3
 8008326:	d204      	bcs.n	8008332 <USBH_ParseCfgDesc+0x120>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	885a      	ldrh	r2, [r3, #2]
 800832c:	8afb      	ldrh	r3, [r7, #22]
 800832e:	429a      	cmp	r2, r3
 8008330:	d8d1      	bhi.n	80082d6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008332:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008336:	3301      	adds	r3, #1
 8008338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800833c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008340:	2b01      	cmp	r3, #1
 8008342:	d804      	bhi.n	800834e <USBH_ParseCfgDesc+0x13c>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	885a      	ldrh	r2, [r3, #2]
 8008348:	8afb      	ldrh	r3, [r7, #22]
 800834a:	429a      	cmp	r2, r3
 800834c:	d8a4      	bhi.n	8008298 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800834e:	bf00      	nop
 8008350:	3728      	adds	r7, #40	; 0x28
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	781a      	ldrb	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	785a      	ldrb	r2, [r3, #1]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	789a      	ldrb	r2, [r3, #2]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	78da      	ldrb	r2, [r3, #3]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	791a      	ldrb	r2, [r3, #4]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	795a      	ldrb	r2, [r3, #5]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	799a      	ldrb	r2, [r3, #6]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	79da      	ldrb	r2, [r3, #7]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	7a1a      	ldrb	r2, [r3, #8]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	721a      	strb	r2, [r3, #8]
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	781a      	ldrb	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	785a      	ldrb	r2, [r3, #1]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	789a      	ldrb	r2, [r3, #2]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	78da      	ldrb	r2, [r3, #3]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	3304      	adds	r3, #4
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	3305      	adds	r3, #5
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	021b      	lsls	r3, r3, #8
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	4313      	orrs	r3, r2
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	799a      	ldrb	r2, [r3, #6]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	719a      	strb	r2, [r3, #6]
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800840e:	b480      	push	{r7}
 8008410:	b087      	sub	sp, #28
 8008412:	af00      	add	r7, sp, #0
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	4613      	mov	r3, r2
 800841a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3301      	adds	r3, #1
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b03      	cmp	r3, #3
 8008424:	d120      	bne.n	8008468 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	1e9a      	subs	r2, r3, #2
 800842c:	88fb      	ldrh	r3, [r7, #6]
 800842e:	4293      	cmp	r3, r2
 8008430:	bf28      	it	cs
 8008432:	4613      	movcs	r3, r2
 8008434:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3302      	adds	r3, #2
 800843a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800843c:	2300      	movs	r3, #0
 800843e:	82fb      	strh	r3, [r7, #22]
 8008440:	e00b      	b.n	800845a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008442:	8afb      	ldrh	r3, [r7, #22]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4413      	add	r3, r2
 8008448:	781a      	ldrb	r2, [r3, #0]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	3301      	adds	r3, #1
 8008452:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008454:	8afb      	ldrh	r3, [r7, #22]
 8008456:	3302      	adds	r3, #2
 8008458:	82fb      	strh	r3, [r7, #22]
 800845a:	8afa      	ldrh	r2, [r7, #22]
 800845c:	8abb      	ldrh	r3, [r7, #20]
 800845e:	429a      	cmp	r2, r3
 8008460:	d3ef      	bcc.n	8008442 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2200      	movs	r2, #0
 8008466:	701a      	strb	r2, [r3, #0]
  }
}
 8008468:	bf00      	nop
 800846a:	371c      	adds	r7, #28
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	881a      	ldrh	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	b29b      	uxth	r3, r3
 8008488:	4413      	add	r3, r2
 800848a:	b29a      	uxth	r2, r3
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4413      	add	r3, r2
 800849a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800849c:	68fb      	ldr	r3, [r7, #12]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b086      	sub	sp, #24
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	4613      	mov	r3, r2
 80084b6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80084b8:	2301      	movs	r3, #1
 80084ba:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	789b      	ldrb	r3, [r3, #2]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d002      	beq.n	80084ca <USBH_CtlReq+0x20>
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d01d      	beq.n	8008504 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80084c8:	e043      	b.n	8008552 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	88fa      	ldrh	r2, [r7, #6]
 80084d4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2201      	movs	r2, #1
 80084da:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2202      	movs	r2, #2
 80084e0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80084e2:	2301      	movs	r3, #1
 80084e4:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2203      	movs	r2, #3
 80084ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80084fa:	2300      	movs	r3, #0
 80084fc:	2200      	movs	r2, #0
 80084fe:	f000 fd75 	bl	8008fec <osMessageQueuePut>
      break;
 8008502:	e026      	b.n	8008552 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 f829 	bl	800855c <USBH_HandleControl>
 800850a:	4603      	mov	r3, r0
 800850c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800850e:	7dfb      	ldrb	r3, [r7, #23]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <USBH_CtlReq+0x70>
 8008514:	7dfb      	ldrb	r3, [r7, #23]
 8008516:	2b03      	cmp	r3, #3
 8008518:	d106      	bne.n	8008528 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2201      	movs	r2, #1
 800851e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	761a      	strb	r2, [r3, #24]
 8008526:	e005      	b.n	8008534 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008528:	7dfb      	ldrb	r3, [r7, #23]
 800852a:	2b02      	cmp	r3, #2
 800852c:	d102      	bne.n	8008534 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2201      	movs	r2, #1
 8008532:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2203      	movs	r2, #3
 8008538:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008548:	2300      	movs	r3, #0
 800854a:	2200      	movs	r2, #0
 800854c:	f000 fd4e 	bl	8008fec <osMessageQueuePut>
      break;
 8008550:	bf00      	nop
  }
  return status;
 8008552:	7dfb      	ldrb	r3, [r7, #23]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3718      	adds	r7, #24
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af02      	add	r7, sp, #8
 8008562:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008564:	2301      	movs	r3, #1
 8008566:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008568:	2300      	movs	r3, #0
 800856a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	7e1b      	ldrb	r3, [r3, #24]
 8008570:	3b01      	subs	r3, #1
 8008572:	2b0a      	cmp	r3, #10
 8008574:	f200 822b 	bhi.w	80089ce <USBH_HandleControl+0x472>
 8008578:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <USBH_HandleControl+0x24>)
 800857a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857e:	bf00      	nop
 8008580:	080085ad 	.word	0x080085ad
 8008584:	080085c7 	.word	0x080085c7
 8008588:	08008669 	.word	0x08008669
 800858c:	0800868f 	.word	0x0800868f
 8008590:	0800871b 	.word	0x0800871b
 8008594:	08008747 	.word	0x08008747
 8008598:	08008809 	.word	0x08008809
 800859c:	0800882b 	.word	0x0800882b
 80085a0:	080088bd 	.word	0x080088bd
 80085a4:	080088e5 	.word	0x080088e5
 80085a8:	08008977 	.word	0x08008977
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f103 0110 	add.w	r1, r3, #16
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	795b      	ldrb	r3, [r3, #5]
 80085b6:	461a      	mov	r2, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fa19 	bl	80089f0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2202      	movs	r2, #2
 80085c2:	761a      	strb	r2, [r3, #24]
      break;
 80085c4:	e20e      	b.n	80089e4 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	795b      	ldrb	r3, [r3, #5]
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f003 fcff 	bl	800bfd0 <USBH_LL_GetURBState>
 80085d2:	4603      	mov	r3, r0
 80085d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d12c      	bne.n	8008636 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	7c1b      	ldrb	r3, [r3, #16]
 80085e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	8adb      	ldrh	r3, [r3, #22]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80085ee:	7b7b      	ldrb	r3, [r7, #13]
 80085f0:	2b80      	cmp	r3, #128	; 0x80
 80085f2:	d103      	bne.n	80085fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2203      	movs	r2, #3
 80085f8:	761a      	strb	r2, [r3, #24]
 80085fa:	e00d      	b.n	8008618 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2205      	movs	r2, #5
 8008600:	761a      	strb	r2, [r3, #24]
 8008602:	e009      	b.n	8008618 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008604:	7b7b      	ldrb	r3, [r7, #13]
 8008606:	2b80      	cmp	r3, #128	; 0x80
 8008608:	d103      	bne.n	8008612 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2209      	movs	r2, #9
 800860e:	761a      	strb	r2, [r3, #24]
 8008610:	e002      	b.n	8008618 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2207      	movs	r2, #7
 8008616:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2203      	movs	r2, #3
 800861c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800862c:	2300      	movs	r3, #0
 800862e:	2200      	movs	r2, #0
 8008630:	f000 fcdc 	bl	8008fec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008634:	e1cd      	b.n	80089d2 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008636:	7bbb      	ldrb	r3, [r7, #14]
 8008638:	2b04      	cmp	r3, #4
 800863a:	d003      	beq.n	8008644 <USBH_HandleControl+0xe8>
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	2b02      	cmp	r3, #2
 8008640:	f040 81c7 	bne.w	80089d2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	220b      	movs	r2, #11
 8008648:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2203      	movs	r2, #3
 800864e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800865e:	2300      	movs	r3, #0
 8008660:	2200      	movs	r2, #0
 8008662:	f000 fcc3 	bl	8008fec <osMessageQueuePut>
      break;
 8008666:	e1b4      	b.n	80089d2 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800866e:	b29a      	uxth	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6899      	ldr	r1, [r3, #8]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	899a      	ldrh	r2, [r3, #12]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	791b      	ldrb	r3, [r3, #4]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f9f4 	bl	8008a6e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2204      	movs	r2, #4
 800868a:	761a      	strb	r2, [r3, #24]
      break;
 800868c:	e1aa      	b.n	80089e4 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	791b      	ldrb	r3, [r3, #4]
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f003 fc9b 	bl	800bfd0 <USBH_LL_GetURBState>
 800869a:	4603      	mov	r3, r0
 800869c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d110      	bne.n	80086c6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2209      	movs	r2, #9
 80086a8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2203      	movs	r2, #3
 80086ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80086be:	2300      	movs	r3, #0
 80086c0:	2200      	movs	r2, #0
 80086c2:	f000 fc93 	bl	8008fec <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	2b05      	cmp	r3, #5
 80086ca:	d110      	bne.n	80086ee <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80086cc:	2303      	movs	r3, #3
 80086ce:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2203      	movs	r2, #3
 80086d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80086e4:	2300      	movs	r3, #0
 80086e6:	2200      	movs	r2, #0
 80086e8:	f000 fc80 	bl	8008fec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80086ec:	e173      	b.n	80089d6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	2b04      	cmp	r3, #4
 80086f2:	f040 8170 	bne.w	80089d6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	220b      	movs	r2, #11
 80086fa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2203      	movs	r2, #3
 8008700:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008710:	2300      	movs	r3, #0
 8008712:	2200      	movs	r2, #0
 8008714:	f000 fc6a 	bl	8008fec <osMessageQueuePut>
      break;
 8008718:	e15d      	b.n	80089d6 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6899      	ldr	r1, [r3, #8]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	899a      	ldrh	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	7958      	ldrb	r0, [r3, #5]
 8008726:	2301      	movs	r3, #1
 8008728:	9300      	str	r3, [sp, #0]
 800872a:	4603      	mov	r3, r0
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f979 	bl	8008a24 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008738:	b29a      	uxth	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2206      	movs	r2, #6
 8008742:	761a      	strb	r2, [r3, #24]
      break;
 8008744:	e14e      	b.n	80089e4 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	795b      	ldrb	r3, [r3, #5]
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f003 fc3f 	bl	800bfd0 <USBH_LL_GetURBState>
 8008752:	4603      	mov	r3, r0
 8008754:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008756:	7bbb      	ldrb	r3, [r7, #14]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d111      	bne.n	8008780 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2207      	movs	r2, #7
 8008760:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2203      	movs	r2, #3
 8008766:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008776:	2300      	movs	r3, #0
 8008778:	2200      	movs	r2, #0
 800877a:	f000 fc37 	bl	8008fec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800877e:	e12c      	b.n	80089da <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	2b05      	cmp	r3, #5
 8008784:	d113      	bne.n	80087ae <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	220c      	movs	r2, #12
 800878a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800878c:	2303      	movs	r3, #3
 800878e:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2203      	movs	r2, #3
 8008794:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80087a4:	2300      	movs	r3, #0
 80087a6:	2200      	movs	r2, #0
 80087a8:	f000 fc20 	bl	8008fec <osMessageQueuePut>
      break;
 80087ac:	e115      	b.n	80089da <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 80087ae:	7bbb      	ldrb	r3, [r7, #14]
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d111      	bne.n	80087d8 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2205      	movs	r2, #5
 80087b8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2203      	movs	r2, #3
 80087be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80087ce:	2300      	movs	r3, #0
 80087d0:	2200      	movs	r2, #0
 80087d2:	f000 fc0b 	bl	8008fec <osMessageQueuePut>
      break;
 80087d6:	e100      	b.n	80089da <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	2b04      	cmp	r3, #4
 80087dc:	f040 80fd 	bne.w	80089da <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	220b      	movs	r2, #11
 80087e4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80087e6:	2302      	movs	r3, #2
 80087e8:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2203      	movs	r2, #3
 80087ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80087fe:	2300      	movs	r3, #0
 8008800:	2200      	movs	r2, #0
 8008802:	f000 fbf3 	bl	8008fec <osMessageQueuePut>
      break;
 8008806:	e0e8      	b.n	80089da <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	791b      	ldrb	r3, [r3, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	2100      	movs	r1, #0
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f92c 	bl	8008a6e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800881c:	b29a      	uxth	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2208      	movs	r2, #8
 8008826:	761a      	strb	r2, [r3, #24]

      break;
 8008828:	e0dc      	b.n	80089e4 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	791b      	ldrb	r3, [r3, #4]
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f003 fbcd 	bl	800bfd0 <USBH_LL_GetURBState>
 8008836:	4603      	mov	r3, r0
 8008838:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800883a:	7bbb      	ldrb	r3, [r7, #14]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d113      	bne.n	8008868 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	220d      	movs	r2, #13
 8008844:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2203      	movs	r2, #3
 800884e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800885e:	2300      	movs	r3, #0
 8008860:	2200      	movs	r2, #0
 8008862:	f000 fbc3 	bl	8008fec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008866:	e0ba      	b.n	80089de <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	2b04      	cmp	r3, #4
 800886c:	d111      	bne.n	8008892 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	220b      	movs	r2, #11
 8008872:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2203      	movs	r2, #3
 8008878:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008888:	2300      	movs	r3, #0
 800888a:	2200      	movs	r2, #0
 800888c:	f000 fbae 	bl	8008fec <osMessageQueuePut>
      break;
 8008890:	e0a5      	b.n	80089de <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 8008892:	7bbb      	ldrb	r3, [r7, #14]
 8008894:	2b05      	cmp	r3, #5
 8008896:	f040 80a2 	bne.w	80089de <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800889a:	2303      	movs	r3, #3
 800889c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2203      	movs	r2, #3
 80088a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80088b2:	2300      	movs	r3, #0
 80088b4:	2200      	movs	r2, #0
 80088b6:	f000 fb99 	bl	8008fec <osMessageQueuePut>
      break;
 80088ba:	e090      	b.n	80089de <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	795a      	ldrb	r2, [r3, #5]
 80088c0:	2301      	movs	r3, #1
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	4613      	mov	r3, r2
 80088c6:	2200      	movs	r2, #0
 80088c8:	2100      	movs	r1, #0
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f8aa 	bl	8008a24 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	220a      	movs	r2, #10
 80088e0:	761a      	strb	r2, [r3, #24]
      break;
 80088e2:	e07f      	b.n	80089e4 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	795b      	ldrb	r3, [r3, #5]
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f003 fb70 	bl	800bfd0 <USBH_LL_GetURBState>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d113      	bne.n	8008922 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	220d      	movs	r2, #13
 8008902:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2203      	movs	r2, #3
 8008908:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008918:	2300      	movs	r3, #0
 800891a:	2200      	movs	r2, #0
 800891c:	f000 fb66 	bl	8008fec <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008920:	e05f      	b.n	80089e2 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b02      	cmp	r3, #2
 8008926:	d111      	bne.n	800894c <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2209      	movs	r2, #9
 800892c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2203      	movs	r2, #3
 8008932:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008942:	2300      	movs	r3, #0
 8008944:	2200      	movs	r2, #0
 8008946:	f000 fb51 	bl	8008fec <osMessageQueuePut>
      break;
 800894a:	e04a      	b.n	80089e2 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	2b04      	cmp	r3, #4
 8008950:	d147      	bne.n	80089e2 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	220b      	movs	r2, #11
 8008956:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2203      	movs	r2, #3
 800895c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800896c:	2300      	movs	r3, #0
 800896e:	2200      	movs	r2, #0
 8008970:	f000 fb3c 	bl	8008fec <osMessageQueuePut>
      break;
 8008974:	e035      	b.n	80089e2 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	7e5b      	ldrb	r3, [r3, #25]
 800897a:	3301      	adds	r3, #1
 800897c:	b2da      	uxtb	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	765a      	strb	r2, [r3, #25]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	7e5b      	ldrb	r3, [r3, #25]
 8008986:	2b02      	cmp	r3, #2
 8008988:	d806      	bhi.n	8008998 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008996:	e025      	b.n	80089e4 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800899e:	2106      	movs	r1, #6
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	795b      	ldrb	r3, [r3, #5]
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f90d 	bl	8008bd0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	791b      	ldrb	r3, [r3, #4]
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f907 	bl	8008bd0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80089c8:	2302      	movs	r3, #2
 80089ca:	73fb      	strb	r3, [r7, #15]
      break;
 80089cc:	e00a      	b.n	80089e4 <USBH_HandleControl+0x488>

    default:
      break;
 80089ce:	bf00      	nop
 80089d0:	e008      	b.n	80089e4 <USBH_HandleControl+0x488>
      break;
 80089d2:	bf00      	nop
 80089d4:	e006      	b.n	80089e4 <USBH_HandleControl+0x488>
      break;
 80089d6:	bf00      	nop
 80089d8:	e004      	b.n	80089e4 <USBH_HandleControl+0x488>
      break;
 80089da:	bf00      	nop
 80089dc:	e002      	b.n	80089e4 <USBH_HandleControl+0x488>
      break;
 80089de:	bf00      	nop
 80089e0:	e000      	b.n	80089e4 <USBH_HandleControl+0x488>
      break;
 80089e2:	bf00      	nop
  }

  return status;
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop

080089f0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b088      	sub	sp, #32
 80089f4:	af04      	add	r7, sp, #16
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	4613      	mov	r3, r2
 80089fc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80089fe:	79f9      	ldrb	r1, [r7, #7]
 8008a00:	2300      	movs	r3, #0
 8008a02:	9303      	str	r3, [sp, #12]
 8008a04:	2308      	movs	r3, #8
 8008a06:	9302      	str	r3, [sp, #8]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	9301      	str	r3, [sp, #4]
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	2300      	movs	r3, #0
 8008a12:	2200      	movs	r2, #0
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f003 faaa 	bl	800bf6e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b088      	sub	sp, #32
 8008a28:	af04      	add	r7, sp, #16
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	4611      	mov	r1, r2
 8008a30:	461a      	mov	r2, r3
 8008a32:	460b      	mov	r3, r1
 8008a34:	80fb      	strh	r3, [r7, #6]
 8008a36:	4613      	mov	r3, r2
 8008a38:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a44:	2300      	movs	r3, #0
 8008a46:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a48:	7979      	ldrb	r1, [r7, #5]
 8008a4a:	7e3b      	ldrb	r3, [r7, #24]
 8008a4c:	9303      	str	r3, [sp, #12]
 8008a4e:	88fb      	ldrh	r3, [r7, #6]
 8008a50:	9302      	str	r3, [sp, #8]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	2301      	movs	r3, #1
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f003 fa85 	bl	800bf6e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b088      	sub	sp, #32
 8008a72:	af04      	add	r7, sp, #16
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	4611      	mov	r1, r2
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	80fb      	strh	r3, [r7, #6]
 8008a80:	4613      	mov	r3, r2
 8008a82:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a84:	7979      	ldrb	r1, [r7, #5]
 8008a86:	2300      	movs	r3, #0
 8008a88:	9303      	str	r3, [sp, #12]
 8008a8a:	88fb      	ldrh	r3, [r7, #6]
 8008a8c:	9302      	str	r3, [sp, #8]
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	2301      	movs	r3, #1
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	2300      	movs	r3, #0
 8008a98:	2201      	movs	r2, #1
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f003 fa67 	bl	800bf6e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008aa0:	2300      	movs	r3, #0

}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b088      	sub	sp, #32
 8008aae:	af04      	add	r7, sp, #16
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	460b      	mov	r3, r1
 8008aba:	80fb      	strh	r3, [r7, #6]
 8008abc:	4613      	mov	r3, r2
 8008abe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008aca:	2300      	movs	r3, #0
 8008acc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008ace:	7979      	ldrb	r1, [r7, #5]
 8008ad0:	7e3b      	ldrb	r3, [r7, #24]
 8008ad2:	9303      	str	r3, [sp, #12]
 8008ad4:	88fb      	ldrh	r3, [r7, #6]
 8008ad6:	9302      	str	r3, [sp, #8]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	2301      	movs	r3, #1
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f003 fa42 	bl	800bf6e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b088      	sub	sp, #32
 8008af8:	af04      	add	r7, sp, #16
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	4611      	mov	r1, r2
 8008b00:	461a      	mov	r2, r3
 8008b02:	460b      	mov	r3, r1
 8008b04:	80fb      	strh	r3, [r7, #6]
 8008b06:	4613      	mov	r3, r2
 8008b08:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b0a:	7979      	ldrb	r1, [r7, #5]
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9303      	str	r3, [sp, #12]
 8008b10:	88fb      	ldrh	r3, [r7, #6]
 8008b12:	9302      	str	r3, [sp, #8]
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	9301      	str	r3, [sp, #4]
 8008b18:	2301      	movs	r3, #1
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	2201      	movs	r2, #1
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f003 fa24 	bl	800bf6e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af04      	add	r7, sp, #16
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	4608      	mov	r0, r1
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	4603      	mov	r3, r0
 8008b40:	70fb      	strb	r3, [r7, #3]
 8008b42:	460b      	mov	r3, r1
 8008b44:	70bb      	strb	r3, [r7, #2]
 8008b46:	4613      	mov	r3, r2
 8008b48:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008b4a:	7878      	ldrb	r0, [r7, #1]
 8008b4c:	78ba      	ldrb	r2, [r7, #2]
 8008b4e:	78f9      	ldrb	r1, [r7, #3]
 8008b50:	8b3b      	ldrh	r3, [r7, #24]
 8008b52:	9302      	str	r3, [sp, #8]
 8008b54:	7d3b      	ldrb	r3, [r7, #20]
 8008b56:	9301      	str	r3, [sp, #4]
 8008b58:	7c3b      	ldrb	r3, [r7, #16]
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f003 f9b7 	bl	800bed2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	460b      	mov	r3, r1
 8008b78:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008b7a:	78fb      	ldrb	r3, [r7, #3]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f003 f9d6 	bl	800bf30 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f836 	bl	8008c0c <USBH_GetFreePipe>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008ba4:	89fb      	ldrh	r3, [r7, #14]
 8008ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d00a      	beq.n	8008bc4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008bae:	78fa      	ldrb	r2, [r7, #3]
 8008bb0:	89fb      	ldrh	r3, [r7, #14]
 8008bb2:	f003 030f 	and.w	r3, r3, #15
 8008bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	33e0      	adds	r3, #224	; 0xe0
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	440b      	add	r3, r1
 8008bc2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008bc4:	89fb      	ldrh	r3, [r7, #14]
 8008bc6:	b2db      	uxtb	r3, r3
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008bdc:	78fb      	ldrb	r3, [r7, #3]
 8008bde:	2b0a      	cmp	r3, #10
 8008be0:	d80d      	bhi.n	8008bfe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008be2:	78fb      	ldrb	r3, [r7, #3]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	33e0      	adds	r3, #224	; 0xe0
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	685a      	ldr	r2, [r3, #4]
 8008bee:	78fb      	ldrb	r3, [r7, #3]
 8008bf0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008bf4:	6879      	ldr	r1, [r7, #4]
 8008bf6:	33e0      	adds	r3, #224	; 0xe0
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	440b      	add	r3, r1
 8008bfc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	73fb      	strb	r3, [r7, #15]
 8008c1c:	e00f      	b.n	8008c3e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	33e0      	adds	r3, #224	; 0xe0
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d102      	bne.n	8008c38 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	e007      	b.n	8008c48 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008c38:	7bfb      	ldrb	r3, [r7, #15]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	73fb      	strb	r3, [r7, #15]
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
 8008c40:	2b0a      	cmp	r3, #10
 8008c42:	d9ec      	bls.n	8008c1e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c54:	b480      	push	{r7}
 8008c56:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008c58:	bf00      	nop
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
	...

08008c64 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c6a:	f3ef 8305 	mrs	r3, IPSR
 8008c6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c70:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10f      	bne.n	8008c96 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c76:	f3ef 8310 	mrs	r3, PRIMASK
 8008c7a:	607b      	str	r3, [r7, #4]
  return(result);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d105      	bne.n	8008c8e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c82:	f3ef 8311 	mrs	r3, BASEPRI
 8008c86:	603b      	str	r3, [r7, #0]
  return(result);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d007      	beq.n	8008c9e <osKernelInitialize+0x3a>
 8008c8e:	4b0e      	ldr	r3, [pc, #56]	; (8008cc8 <osKernelInitialize+0x64>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d103      	bne.n	8008c9e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008c96:	f06f 0305 	mvn.w	r3, #5
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	e00c      	b.n	8008cb8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c9e:	4b0a      	ldr	r3, [pc, #40]	; (8008cc8 <osKernelInitialize+0x64>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d105      	bne.n	8008cb2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008ca6:	4b08      	ldr	r3, [pc, #32]	; (8008cc8 <osKernelInitialize+0x64>)
 8008ca8:	2201      	movs	r2, #1
 8008caa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	e002      	b.n	8008cb8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	200000b8 	.word	0x200000b8

08008ccc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cd2:	f3ef 8305 	mrs	r3, IPSR
 8008cd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008cd8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10f      	bne.n	8008cfe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cde:	f3ef 8310 	mrs	r3, PRIMASK
 8008ce2:	607b      	str	r3, [r7, #4]
  return(result);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d105      	bne.n	8008cf6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cea:	f3ef 8311 	mrs	r3, BASEPRI
 8008cee:	603b      	str	r3, [r7, #0]
  return(result);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d007      	beq.n	8008d06 <osKernelStart+0x3a>
 8008cf6:	4b0f      	ldr	r3, [pc, #60]	; (8008d34 <osKernelStart+0x68>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d103      	bne.n	8008d06 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008cfe:	f06f 0305 	mvn.w	r3, #5
 8008d02:	60fb      	str	r3, [r7, #12]
 8008d04:	e010      	b.n	8008d28 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d06:	4b0b      	ldr	r3, [pc, #44]	; (8008d34 <osKernelStart+0x68>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d109      	bne.n	8008d22 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d0e:	f7ff ffa1 	bl	8008c54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d12:	4b08      	ldr	r3, [pc, #32]	; (8008d34 <osKernelStart+0x68>)
 8008d14:	2202      	movs	r2, #2
 8008d16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d18:	f001 fa9a 	bl	800a250 <vTaskStartScheduler>
      stat = osOK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	e002      	b.n	8008d28 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008d22:	f04f 33ff 	mov.w	r3, #4294967295
 8008d26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008d28:	68fb      	ldr	r3, [r7, #12]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	200000b8 	.word	0x200000b8

08008d38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b090      	sub	sp, #64	; 0x40
 8008d3c:	af04      	add	r7, sp, #16
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d44:	2300      	movs	r3, #0
 8008d46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d48:	f3ef 8305 	mrs	r3, IPSR
 8008d4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008d4e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f040 808f 	bne.w	8008e74 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d56:	f3ef 8310 	mrs	r3, PRIMASK
 8008d5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d105      	bne.n	8008d6e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d62:	f3ef 8311 	mrs	r3, BASEPRI
 8008d66:	617b      	str	r3, [r7, #20]
  return(result);
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <osThreadNew+0x3e>
 8008d6e:	4b44      	ldr	r3, [pc, #272]	; (8008e80 <osThreadNew+0x148>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d07e      	beq.n	8008e74 <osThreadNew+0x13c>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d07b      	beq.n	8008e74 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008d7c:	2380      	movs	r3, #128	; 0x80
 8008d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008d80:	2318      	movs	r3, #24
 8008d82:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008d84:	2300      	movs	r3, #0
 8008d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008d88:	f04f 33ff 	mov.w	r3, #4294967295
 8008d8c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d045      	beq.n	8008e20 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <osThreadNew+0x6a>
        name = attr->name;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d008      	beq.n	8008dc8 <osThreadNew+0x90>
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	2b38      	cmp	r3, #56	; 0x38
 8008dba:	d805      	bhi.n	8008dc8 <osThreadNew+0x90>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d001      	beq.n	8008dcc <osThreadNew+0x94>
        return (NULL);
 8008dc8:	2300      	movs	r3, #0
 8008dca:	e054      	b.n	8008e76 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	695b      	ldr	r3, [r3, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	089b      	lsrs	r3, r3, #2
 8008dda:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00e      	beq.n	8008e02 <osThreadNew+0xca>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	2b5b      	cmp	r3, #91	; 0x5b
 8008dea:	d90a      	bls.n	8008e02 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d006      	beq.n	8008e02 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <osThreadNew+0xca>
        mem = 1;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	623b      	str	r3, [r7, #32]
 8008e00:	e010      	b.n	8008e24 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10c      	bne.n	8008e24 <osThreadNew+0xec>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d108      	bne.n	8008e24 <osThreadNew+0xec>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d104      	bne.n	8008e24 <osThreadNew+0xec>
          mem = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	623b      	str	r3, [r7, #32]
 8008e1e:	e001      	b.n	8008e24 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008e20:	2300      	movs	r3, #0
 8008e22:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d110      	bne.n	8008e4c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e32:	9202      	str	r2, [sp, #8]
 8008e34:	9301      	str	r3, [sp, #4]
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f001 f833 	bl	8009eac <xTaskCreateStatic>
 8008e46:	4603      	mov	r3, r0
 8008e48:	613b      	str	r3, [r7, #16]
 8008e4a:	e013      	b.n	8008e74 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d110      	bne.n	8008e74 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	f107 0310 	add.w	r3, r7, #16
 8008e5a:	9301      	str	r3, [sp, #4]
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f001 f87b 	bl	8009f60 <xTaskCreate>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d001      	beq.n	8008e74 <osThreadNew+0x13c>
          hTask = NULL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e74:	693b      	ldr	r3, [r7, #16]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3730      	adds	r7, #48	; 0x30
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	200000b8 	.word	0x200000b8

08008e84 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e8c:	f3ef 8305 	mrs	r3, IPSR
 8008e90:	613b      	str	r3, [r7, #16]
  return(result);
 8008e92:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10f      	bne.n	8008eb8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e98:	f3ef 8310 	mrs	r3, PRIMASK
 8008e9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d105      	bne.n	8008eb0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8008ea8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d007      	beq.n	8008ec0 <osDelay+0x3c>
 8008eb0:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <osDelay+0x58>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d103      	bne.n	8008ec0 <osDelay+0x3c>
    stat = osErrorISR;
 8008eb8:	f06f 0305 	mvn.w	r3, #5
 8008ebc:	617b      	str	r3, [r7, #20]
 8008ebe:	e007      	b.n	8008ed0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f001 f98c 	bl	800a1e8 <vTaskDelay>
    }
  }

  return (stat);
 8008ed0:	697b      	ldr	r3, [r7, #20]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	200000b8 	.word	0x200000b8

08008ee0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08c      	sub	sp, #48	; 0x30
 8008ee4:	af02      	add	r7, sp, #8
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008eec:	2300      	movs	r3, #0
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ef0:	f3ef 8305 	mrs	r3, IPSR
 8008ef4:	61bb      	str	r3, [r7, #24]
  return(result);
 8008ef6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d170      	bne.n	8008fde <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008efc:	f3ef 8310 	mrs	r3, PRIMASK
 8008f00:	617b      	str	r3, [r7, #20]
  return(result);
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d105      	bne.n	8008f14 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f08:	f3ef 8311 	mrs	r3, BASEPRI
 8008f0c:	613b      	str	r3, [r7, #16]
  return(result);
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <osMessageQueueNew+0x3c>
 8008f14:	4b34      	ldr	r3, [pc, #208]	; (8008fe8 <osMessageQueueNew+0x108>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d060      	beq.n	8008fde <osMessageQueueNew+0xfe>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d05d      	beq.n	8008fde <osMessageQueueNew+0xfe>
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d05a      	beq.n	8008fde <osMessageQueueNew+0xfe>
    mem = -1;
 8008f28:	f04f 33ff 	mov.w	r3, #4294967295
 8008f2c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d029      	beq.n	8008f88 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d012      	beq.n	8008f62 <osMessageQueueNew+0x82>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	2b4f      	cmp	r3, #79	; 0x4f
 8008f42:	d90e      	bls.n	8008f62 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	695a      	ldr	r2, [r3, #20]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	68b9      	ldr	r1, [r7, #8]
 8008f54:	fb01 f303 	mul.w	r3, r1, r3
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d302      	bcc.n	8008f62 <osMessageQueueNew+0x82>
        mem = 1;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	623b      	str	r3, [r7, #32]
 8008f60:	e014      	b.n	8008f8c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d110      	bne.n	8008f8c <osMessageQueueNew+0xac>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10c      	bne.n	8008f8c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d108      	bne.n	8008f8c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d104      	bne.n	8008f8c <osMessageQueueNew+0xac>
          mem = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	623b      	str	r3, [r7, #32]
 8008f86:	e001      	b.n	8008f8c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d10c      	bne.n	8008fac <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691a      	ldr	r2, [r3, #16]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6899      	ldr	r1, [r3, #8]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	68b9      	ldr	r1, [r7, #8]
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 fa58 	bl	8009458 <xQueueGenericCreateStatic>
 8008fa8:	6278      	str	r0, [r7, #36]	; 0x24
 8008faa:	e008      	b.n	8008fbe <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d105      	bne.n	8008fbe <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	68b9      	ldr	r1, [r7, #8]
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f000 fac1 	bl	800953e <xQueueGenericCreate>
 8008fbc:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00c      	beq.n	8008fde <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <osMessageQueueNew+0xf2>
        name = attr->name;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	61fb      	str	r3, [r7, #28]
 8008fd0:	e001      	b.n	8008fd6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008fd6:	69f9      	ldr	r1, [r7, #28]
 8008fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fda:	f000 ff0b 	bl	8009df4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3728      	adds	r7, #40	; 0x28
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	200000b8 	.word	0x200000b8

08008fec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08a      	sub	sp, #40	; 0x28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009000:	2300      	movs	r3, #0
 8009002:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009004:	f3ef 8305 	mrs	r3, IPSR
 8009008:	61fb      	str	r3, [r7, #28]
  return(result);
 800900a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10f      	bne.n	8009030 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009010:	f3ef 8310 	mrs	r3, PRIMASK
 8009014:	61bb      	str	r3, [r7, #24]
  return(result);
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d105      	bne.n	8009028 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800901c:	f3ef 8311 	mrs	r3, BASEPRI
 8009020:	617b      	str	r3, [r7, #20]
  return(result);
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d02c      	beq.n	8009082 <osMessageQueuePut+0x96>
 8009028:	4b28      	ldr	r3, [pc, #160]	; (80090cc <osMessageQueuePut+0xe0>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b02      	cmp	r3, #2
 800902e:	d128      	bne.n	8009082 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d005      	beq.n	8009042 <osMessageQueuePut+0x56>
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d002      	beq.n	8009042 <osMessageQueuePut+0x56>
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8009042:	f06f 0303 	mvn.w	r3, #3
 8009046:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009048:	e039      	b.n	80090be <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800904a:	2300      	movs	r3, #0
 800904c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800904e:	f107 0210 	add.w	r2, r7, #16
 8009052:	2300      	movs	r3, #0
 8009054:	68b9      	ldr	r1, [r7, #8]
 8009056:	6a38      	ldr	r0, [r7, #32]
 8009058:	f000 fbce 	bl	80097f8 <xQueueGenericSendFromISR>
 800905c:	4603      	mov	r3, r0
 800905e:	2b01      	cmp	r3, #1
 8009060:	d003      	beq.n	800906a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009062:	f06f 0302 	mvn.w	r3, #2
 8009066:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009068:	e029      	b.n	80090be <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d026      	beq.n	80090be <osMessageQueuePut+0xd2>
 8009070:	4b17      	ldr	r3, [pc, #92]	; (80090d0 <osMessageQueuePut+0xe4>)
 8009072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009080:	e01d      	b.n	80090be <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <osMessageQueuePut+0xa2>
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d103      	bne.n	8009096 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800908e:	f06f 0303 	mvn.w	r3, #3
 8009092:	627b      	str	r3, [r7, #36]	; 0x24
 8009094:	e014      	b.n	80090c0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009096:	2300      	movs	r3, #0
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	68b9      	ldr	r1, [r7, #8]
 800909c:	6a38      	ldr	r0, [r7, #32]
 800909e:	f000 fab1 	bl	8009604 <xQueueGenericSend>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d00b      	beq.n	80090c0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80090ae:	f06f 0301 	mvn.w	r3, #1
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24
 80090b4:	e004      	b.n	80090c0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80090b6:	f06f 0302 	mvn.w	r3, #2
 80090ba:	627b      	str	r3, [r7, #36]	; 0x24
 80090bc:	e000      	b.n	80090c0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80090be:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3728      	adds	r7, #40	; 0x28
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	200000b8 	.word	0x200000b8
 80090d0:	e000ed04 	.word	0xe000ed04

080090d4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b08a      	sub	sp, #40	; 0x28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ea:	f3ef 8305 	mrs	r3, IPSR
 80090ee:	61fb      	str	r3, [r7, #28]
  return(result);
 80090f0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10f      	bne.n	8009116 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090f6:	f3ef 8310 	mrs	r3, PRIMASK
 80090fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d105      	bne.n	800910e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009102:	f3ef 8311 	mrs	r3, BASEPRI
 8009106:	617b      	str	r3, [r7, #20]
  return(result);
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d02c      	beq.n	8009168 <osMessageQueueGet+0x94>
 800910e:	4b28      	ldr	r3, [pc, #160]	; (80091b0 <osMessageQueueGet+0xdc>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b02      	cmp	r3, #2
 8009114:	d128      	bne.n	8009168 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d005      	beq.n	8009128 <osMessageQueueGet+0x54>
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d002      	beq.n	8009128 <osMessageQueueGet+0x54>
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d003      	beq.n	8009130 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009128:	f06f 0303 	mvn.w	r3, #3
 800912c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800912e:	e038      	b.n	80091a2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009130:	2300      	movs	r3, #0
 8009132:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009134:	f107 0310 	add.w	r3, r7, #16
 8009138:	461a      	mov	r2, r3
 800913a:	68b9      	ldr	r1, [r7, #8]
 800913c:	6a38      	ldr	r0, [r7, #32]
 800913e:	f000 fccb 	bl	8009ad8 <xQueueReceiveFromISR>
 8009142:	4603      	mov	r3, r0
 8009144:	2b01      	cmp	r3, #1
 8009146:	d003      	beq.n	8009150 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009148:	f06f 0302 	mvn.w	r3, #2
 800914c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800914e:	e028      	b.n	80091a2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d025      	beq.n	80091a2 <osMessageQueueGet+0xce>
 8009156:	4b17      	ldr	r3, [pc, #92]	; (80091b4 <osMessageQueueGet+0xe0>)
 8009158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009166:	e01c      	b.n	80091a2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009168:	6a3b      	ldr	r3, [r7, #32]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <osMessageQueueGet+0xa0>
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d103      	bne.n	800917c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009174:	f06f 0303 	mvn.w	r3, #3
 8009178:	627b      	str	r3, [r7, #36]	; 0x24
 800917a:	e013      	b.n	80091a4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	68b9      	ldr	r1, [r7, #8]
 8009180:	6a38      	ldr	r0, [r7, #32]
 8009182:	f000 fbcd 	bl	8009920 <xQueueReceive>
 8009186:	4603      	mov	r3, r0
 8009188:	2b01      	cmp	r3, #1
 800918a:	d00b      	beq.n	80091a4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009192:	f06f 0301 	mvn.w	r3, #1
 8009196:	627b      	str	r3, [r7, #36]	; 0x24
 8009198:	e004      	b.n	80091a4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800919a:	f06f 0302 	mvn.w	r3, #2
 800919e:	627b      	str	r3, [r7, #36]	; 0x24
 80091a0:	e000      	b.n	80091a4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091a2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3728      	adds	r7, #40	; 0x28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	200000b8 	.word	0x200000b8
 80091b4:	e000ed04 	.word	0xe000ed04

080091b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	4a07      	ldr	r2, [pc, #28]	; (80091e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80091c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	4a06      	ldr	r2, [pc, #24]	; (80091e8 <vApplicationGetIdleTaskMemory+0x30>)
 80091ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2280      	movs	r2, #128	; 0x80
 80091d4:	601a      	str	r2, [r3, #0]
}
 80091d6:	bf00      	nop
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	200000bc 	.word	0x200000bc
 80091e8:	20000118 	.word	0x20000118

080091ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4a07      	ldr	r2, [pc, #28]	; (8009218 <vApplicationGetTimerTaskMemory+0x2c>)
 80091fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	4a06      	ldr	r2, [pc, #24]	; (800921c <vApplicationGetTimerTaskMemory+0x30>)
 8009202:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800920a:	601a      	str	r2, [r3, #0]
}
 800920c:	bf00      	nop
 800920e:	3714      	adds	r7, #20
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr
 8009218:	20000318 	.word	0x20000318
 800921c:	20000374 	.word	0x20000374

08009220 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f103 0208 	add.w	r2, r3, #8
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f04f 32ff 	mov.w	r2, #4294967295
 8009238:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f103 0208 	add.w	r2, r3, #8
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f103 0208 	add.w	r2, r3, #8
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800927a:	b480      	push	{r7}
 800927c:	b085      	sub	sp, #20
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	689a      	ldr	r2, [r3, #8]
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	1c5a      	adds	r2, r3, #1
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	601a      	str	r2, [r3, #0]
}
 80092b6:	bf00      	nop
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092c2:	b480      	push	{r7}
 80092c4:	b085      	sub	sp, #20
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d8:	d103      	bne.n	80092e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	e00c      	b.n	80092fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	3308      	adds	r3, #8
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	e002      	b.n	80092f0 <vListInsert+0x2e>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	60fb      	str	r3, [r7, #12]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d2f6      	bcs.n	80092ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	683a      	ldr	r2, [r7, #0]
 800930a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	601a      	str	r2, [r3, #0]
}
 8009328:	bf00      	nop
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	6892      	ldr	r2, [r2, #8]
 800934a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	6852      	ldr	r2, [r2, #4]
 8009354:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	429a      	cmp	r2, r3
 800935e:	d103      	bne.n	8009368 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	1e5a      	subs	r2, r3, #1
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d109      	bne.n	80093b0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	60bb      	str	r3, [r7, #8]
 80093ae:	e7fe      	b.n	80093ae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80093b0:	f002 f8cc 	bl	800b54c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093bc:	68f9      	ldr	r1, [r7, #12]
 80093be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093c0:	fb01 f303 	mul.w	r3, r1, r3
 80093c4:	441a      	add	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e0:	3b01      	subs	r3, #1
 80093e2:	68f9      	ldr	r1, [r7, #12]
 80093e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093e6:	fb01 f303 	mul.w	r3, r1, r3
 80093ea:	441a      	add	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	22ff      	movs	r2, #255	; 0xff
 80093f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	22ff      	movs	r2, #255	; 0xff
 80093fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d114      	bne.n	8009430 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d01a      	beq.n	8009444 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3310      	adds	r3, #16
 8009412:	4618      	mov	r0, r3
 8009414:	f001 f99c 	bl	800a750 <xTaskRemoveFromEventList>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d012      	beq.n	8009444 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800941e:	4b0d      	ldr	r3, [pc, #52]	; (8009454 <xQueueGenericReset+0xcc>)
 8009420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	e009      	b.n	8009444 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3310      	adds	r3, #16
 8009434:	4618      	mov	r0, r3
 8009436:	f7ff fef3 	bl	8009220 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3324      	adds	r3, #36	; 0x24
 800943e:	4618      	mov	r0, r3
 8009440:	f7ff feee 	bl	8009220 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009444:	f002 f8b0 	bl	800b5a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009448:	2301      	movs	r3, #1
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	e000ed04 	.word	0xe000ed04

08009458 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009458:	b580      	push	{r7, lr}
 800945a:	b08e      	sub	sp, #56	; 0x38
 800945c:	af02      	add	r7, sp, #8
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d109      	bne.n	8009480 <xQueueGenericCreateStatic+0x28>
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	62bb      	str	r3, [r7, #40]	; 0x28
 800947e:	e7fe      	b.n	800947e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d109      	bne.n	800949a <xQueueGenericCreateStatic+0x42>
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	627b      	str	r3, [r7, #36]	; 0x24
 8009498:	e7fe      	b.n	8009498 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <xQueueGenericCreateStatic+0x4e>
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <xQueueGenericCreateStatic+0x52>
 80094a6:	2301      	movs	r3, #1
 80094a8:	e000      	b.n	80094ac <xQueueGenericCreateStatic+0x54>
 80094aa:	2300      	movs	r3, #0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d109      	bne.n	80094c4 <xQueueGenericCreateStatic+0x6c>
 80094b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	623b      	str	r3, [r7, #32]
 80094c2:	e7fe      	b.n	80094c2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d102      	bne.n	80094d0 <xQueueGenericCreateStatic+0x78>
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <xQueueGenericCreateStatic+0x7c>
 80094d0:	2301      	movs	r3, #1
 80094d2:	e000      	b.n	80094d6 <xQueueGenericCreateStatic+0x7e>
 80094d4:	2300      	movs	r3, #0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d109      	bne.n	80094ee <xQueueGenericCreateStatic+0x96>
 80094da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	61fb      	str	r3, [r7, #28]
 80094ec:	e7fe      	b.n	80094ec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80094ee:	2350      	movs	r3, #80	; 0x50
 80094f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	2b50      	cmp	r3, #80	; 0x50
 80094f6:	d009      	beq.n	800950c <xQueueGenericCreateStatic+0xb4>
 80094f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	61bb      	str	r3, [r7, #24]
 800950a:	e7fe      	b.n	800950a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800950c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00d      	beq.n	8009534 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009520:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	4613      	mov	r3, r2
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	68b9      	ldr	r1, [r7, #8]
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f000 f844 	bl	80095bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009536:	4618      	mov	r0, r3
 8009538:	3730      	adds	r7, #48	; 0x30
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800953e:	b580      	push	{r7, lr}
 8009540:	b08a      	sub	sp, #40	; 0x28
 8009542:	af02      	add	r7, sp, #8
 8009544:	60f8      	str	r0, [r7, #12]
 8009546:	60b9      	str	r1, [r7, #8]
 8009548:	4613      	mov	r3, r2
 800954a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d109      	bne.n	8009566 <xQueueGenericCreate+0x28>
 8009552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	613b      	str	r3, [r7, #16]
 8009564:	e7fe      	b.n	8009564 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d102      	bne.n	8009572 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800956c:	2300      	movs	r3, #0
 800956e:	61fb      	str	r3, [r7, #28]
 8009570:	e004      	b.n	800957c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	fb02 f303 	mul.w	r3, r2, r3
 800957a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	3350      	adds	r3, #80	; 0x50
 8009580:	4618      	mov	r0, r3
 8009582:	f002 f8fd 	bl	800b780 <pvPortMalloc>
 8009586:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d011      	beq.n	80095b2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	3350      	adds	r3, #80	; 0x50
 8009596:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095a0:	79fa      	ldrb	r2, [r7, #7]
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	4613      	mov	r3, r2
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	68b9      	ldr	r1, [r7, #8]
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 f805 	bl	80095bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80095b2:	69bb      	ldr	r3, [r7, #24]
	}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3720      	adds	r7, #32
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	607a      	str	r2, [r7, #4]
 80095c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d103      	bne.n	80095d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	69ba      	ldr	r2, [r7, #24]
 80095d4:	601a      	str	r2, [r3, #0]
 80095d6:	e002      	b.n	80095de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80095ea:	2101      	movs	r1, #1
 80095ec:	69b8      	ldr	r0, [r7, #24]
 80095ee:	f7ff fecb 	bl	8009388 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	78fa      	ldrb	r2, [r7, #3]
 80095f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80095fa:	bf00      	nop
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
	...

08009604 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b08e      	sub	sp, #56	; 0x38
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009612:	2300      	movs	r3, #0
 8009614:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	2b00      	cmp	r3, #0
 800961e:	d109      	bne.n	8009634 <xQueueGenericSend+0x30>
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	62bb      	str	r3, [r7, #40]	; 0x28
 8009632:	e7fe      	b.n	8009632 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d103      	bne.n	8009642 <xQueueGenericSend+0x3e>
 800963a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <xQueueGenericSend+0x42>
 8009642:	2301      	movs	r3, #1
 8009644:	e000      	b.n	8009648 <xQueueGenericSend+0x44>
 8009646:	2300      	movs	r3, #0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d109      	bne.n	8009660 <xQueueGenericSend+0x5c>
 800964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	627b      	str	r3, [r7, #36]	; 0x24
 800965e:	e7fe      	b.n	800965e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2b02      	cmp	r3, #2
 8009664:	d103      	bne.n	800966e <xQueueGenericSend+0x6a>
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966a:	2b01      	cmp	r3, #1
 800966c:	d101      	bne.n	8009672 <xQueueGenericSend+0x6e>
 800966e:	2301      	movs	r3, #1
 8009670:	e000      	b.n	8009674 <xQueueGenericSend+0x70>
 8009672:	2300      	movs	r3, #0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d109      	bne.n	800968c <xQueueGenericSend+0x88>
 8009678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	623b      	str	r3, [r7, #32]
 800968a:	e7fe      	b.n	800968a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800968c:	f001 fa16 	bl	800aabc <xTaskGetSchedulerState>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d102      	bne.n	800969c <xQueueGenericSend+0x98>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d101      	bne.n	80096a0 <xQueueGenericSend+0x9c>
 800969c:	2301      	movs	r3, #1
 800969e:	e000      	b.n	80096a2 <xQueueGenericSend+0x9e>
 80096a0:	2300      	movs	r3, #0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d109      	bne.n	80096ba <xQueueGenericSend+0xb6>
 80096a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	61fb      	str	r3, [r7, #28]
 80096b8:	e7fe      	b.n	80096b8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096ba:	f001 ff47 	bl	800b54c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d302      	bcc.n	80096d0 <xQueueGenericSend+0xcc>
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d129      	bne.n	8009724 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096d0:	683a      	ldr	r2, [r7, #0]
 80096d2:	68b9      	ldr	r1, [r7, #8]
 80096d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096d6:	f000 fa7c 	bl	8009bd2 <prvCopyDataToQueue>
 80096da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d010      	beq.n	8009706 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e6:	3324      	adds	r3, #36	; 0x24
 80096e8:	4618      	mov	r0, r3
 80096ea:	f001 f831 	bl	800a750 <xTaskRemoveFromEventList>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d013      	beq.n	800971c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80096f4:	4b3f      	ldr	r3, [pc, #252]	; (80097f4 <xQueueGenericSend+0x1f0>)
 80096f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096fa:	601a      	str	r2, [r3, #0]
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	e00a      	b.n	800971c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009708:	2b00      	cmp	r3, #0
 800970a:	d007      	beq.n	800971c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800970c:	4b39      	ldr	r3, [pc, #228]	; (80097f4 <xQueueGenericSend+0x1f0>)
 800970e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800971c:	f001 ff44 	bl	800b5a8 <vPortExitCritical>
				return pdPASS;
 8009720:	2301      	movs	r3, #1
 8009722:	e063      	b.n	80097ec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d103      	bne.n	8009732 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800972a:	f001 ff3d 	bl	800b5a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800972e:	2300      	movs	r3, #0
 8009730:	e05c      	b.n	80097ec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009734:	2b00      	cmp	r3, #0
 8009736:	d106      	bne.n	8009746 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009738:	f107 0314 	add.w	r3, r7, #20
 800973c:	4618      	mov	r0, r3
 800973e:	f001 f869 	bl	800a814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009742:	2301      	movs	r3, #1
 8009744:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009746:	f001 ff2f 	bl	800b5a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800974a:	f000 fde5 	bl	800a318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800974e:	f001 fefd 	bl	800b54c <vPortEnterCritical>
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009758:	b25b      	sxtb	r3, r3
 800975a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975e:	d103      	bne.n	8009768 <xQueueGenericSend+0x164>
 8009760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009762:	2200      	movs	r2, #0
 8009764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800976e:	b25b      	sxtb	r3, r3
 8009770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009774:	d103      	bne.n	800977e <xQueueGenericSend+0x17a>
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800977e:	f001 ff13 	bl	800b5a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009782:	1d3a      	adds	r2, r7, #4
 8009784:	f107 0314 	add.w	r3, r7, #20
 8009788:	4611      	mov	r1, r2
 800978a:	4618      	mov	r0, r3
 800978c:	f001 f858 	bl	800a840 <xTaskCheckForTimeOut>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d124      	bne.n	80097e0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009798:	f000 fb13 	bl	8009dc2 <prvIsQueueFull>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d018      	beq.n	80097d4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80097a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a4:	3310      	adds	r3, #16
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	4611      	mov	r1, r2
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 ff82 	bl	800a6b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80097b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097b2:	f000 fa9e 	bl	8009cf2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80097b6:	f000 fdbd 	bl	800a334 <xTaskResumeAll>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f47f af7c 	bne.w	80096ba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80097c2:	4b0c      	ldr	r3, [pc, #48]	; (80097f4 <xQueueGenericSend+0x1f0>)
 80097c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097c8:	601a      	str	r2, [r3, #0]
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	e772      	b.n	80096ba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80097d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097d6:	f000 fa8c 	bl	8009cf2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097da:	f000 fdab 	bl	800a334 <xTaskResumeAll>
 80097de:	e76c      	b.n	80096ba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80097e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097e2:	f000 fa86 	bl	8009cf2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097e6:	f000 fda5 	bl	800a334 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80097ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3738      	adds	r7, #56	; 0x38
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	e000ed04 	.word	0xe000ed04

080097f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b08e      	sub	sp, #56	; 0x38
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	2b00      	cmp	r3, #0
 800980e:	d109      	bne.n	8009824 <xQueueGenericSendFromISR+0x2c>
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	627b      	str	r3, [r7, #36]	; 0x24
 8009822:	e7fe      	b.n	8009822 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d103      	bne.n	8009832 <xQueueGenericSendFromISR+0x3a>
 800982a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982e:	2b00      	cmp	r3, #0
 8009830:	d101      	bne.n	8009836 <xQueueGenericSendFromISR+0x3e>
 8009832:	2301      	movs	r3, #1
 8009834:	e000      	b.n	8009838 <xQueueGenericSendFromISR+0x40>
 8009836:	2300      	movs	r3, #0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d109      	bne.n	8009850 <xQueueGenericSendFromISR+0x58>
 800983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009840:	f383 8811 	msr	BASEPRI, r3
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	623b      	str	r3, [r7, #32]
 800984e:	e7fe      	b.n	800984e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	2b02      	cmp	r3, #2
 8009854:	d103      	bne.n	800985e <xQueueGenericSendFromISR+0x66>
 8009856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800985a:	2b01      	cmp	r3, #1
 800985c:	d101      	bne.n	8009862 <xQueueGenericSendFromISR+0x6a>
 800985e:	2301      	movs	r3, #1
 8009860:	e000      	b.n	8009864 <xQueueGenericSendFromISR+0x6c>
 8009862:	2300      	movs	r3, #0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d109      	bne.n	800987c <xQueueGenericSendFromISR+0x84>
 8009868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986c:	f383 8811 	msr	BASEPRI, r3
 8009870:	f3bf 8f6f 	isb	sy
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	61fb      	str	r3, [r7, #28]
 800987a:	e7fe      	b.n	800987a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800987c:	f001 ff42 	bl	800b704 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009880:	f3ef 8211 	mrs	r2, BASEPRI
 8009884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	61ba      	str	r2, [r7, #24]
 8009896:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009898:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800989a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800989c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d302      	bcc.n	80098ae <xQueueGenericSendFromISR+0xb6>
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d12c      	bne.n	8009908 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	68b9      	ldr	r1, [r7, #8]
 80098bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098be:	f000 f988 	bl	8009bd2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80098c2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80098c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ca:	d112      	bne.n	80098f2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d016      	beq.n	8009902 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d6:	3324      	adds	r3, #36	; 0x24
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 ff39 	bl	800a750 <xTaskRemoveFromEventList>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00e      	beq.n	8009902 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00b      	beq.n	8009902 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	e007      	b.n	8009902 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80098f6:	3301      	adds	r3, #1
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	b25a      	sxtb	r2, r3
 80098fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009902:	2301      	movs	r3, #1
 8009904:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009906:	e001      	b.n	800990c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009908:	2300      	movs	r3, #0
 800990a:	637b      	str	r3, [r7, #52]	; 0x34
 800990c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009918:	4618      	mov	r0, r3
 800991a:	3738      	adds	r7, #56	; 0x38
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b08c      	sub	sp, #48	; 0x30
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800992c:	2300      	movs	r3, #0
 800992e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	2b00      	cmp	r3, #0
 8009938:	d109      	bne.n	800994e <xQueueReceive+0x2e>
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	623b      	str	r3, [r7, #32]
 800994c:	e7fe      	b.n	800994c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d103      	bne.n	800995c <xQueueReceive+0x3c>
 8009954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009958:	2b00      	cmp	r3, #0
 800995a:	d101      	bne.n	8009960 <xQueueReceive+0x40>
 800995c:	2301      	movs	r3, #1
 800995e:	e000      	b.n	8009962 <xQueueReceive+0x42>
 8009960:	2300      	movs	r3, #0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d109      	bne.n	800997a <xQueueReceive+0x5a>
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	61fb      	str	r3, [r7, #28]
 8009978:	e7fe      	b.n	8009978 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800997a:	f001 f89f 	bl	800aabc <xTaskGetSchedulerState>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d102      	bne.n	800998a <xQueueReceive+0x6a>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d101      	bne.n	800998e <xQueueReceive+0x6e>
 800998a:	2301      	movs	r3, #1
 800998c:	e000      	b.n	8009990 <xQueueReceive+0x70>
 800998e:	2300      	movs	r3, #0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d109      	bne.n	80099a8 <xQueueReceive+0x88>
 8009994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	61bb      	str	r3, [r7, #24]
 80099a6:	e7fe      	b.n	80099a6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099a8:	f001 fdd0 	bl	800b54c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d01f      	beq.n	80099f8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099b8:	68b9      	ldr	r1, [r7, #8]
 80099ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099bc:	f000 f973 	bl	8009ca6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c2:	1e5a      	subs	r2, r3, #1
 80099c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00f      	beq.n	80099f0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d2:	3310      	adds	r3, #16
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 febb 	bl	800a750 <xTaskRemoveFromEventList>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d007      	beq.n	80099f0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80099e0:	4b3c      	ldr	r3, [pc, #240]	; (8009ad4 <xQueueReceive+0x1b4>)
 80099e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099e6:	601a      	str	r2, [r3, #0]
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80099f0:	f001 fdda 	bl	800b5a8 <vPortExitCritical>
				return pdPASS;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e069      	b.n	8009acc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d103      	bne.n	8009a06 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099fe:	f001 fdd3 	bl	800b5a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a02:	2300      	movs	r3, #0
 8009a04:	e062      	b.n	8009acc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d106      	bne.n	8009a1a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a0c:	f107 0310 	add.w	r3, r7, #16
 8009a10:	4618      	mov	r0, r3
 8009a12:	f000 feff 	bl	800a814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a16:	2301      	movs	r3, #1
 8009a18:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a1a:	f001 fdc5 	bl	800b5a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a1e:	f000 fc7b 	bl	800a318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a22:	f001 fd93 	bl	800b54c <vPortEnterCritical>
 8009a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a2c:	b25b      	sxtb	r3, r3
 8009a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a32:	d103      	bne.n	8009a3c <xQueueReceive+0x11c>
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a42:	b25b      	sxtb	r3, r3
 8009a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a48:	d103      	bne.n	8009a52 <xQueueReceive+0x132>
 8009a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a52:	f001 fda9 	bl	800b5a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a56:	1d3a      	adds	r2, r7, #4
 8009a58:	f107 0310 	add.w	r3, r7, #16
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f000 feee 	bl	800a840 <xTaskCheckForTimeOut>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d123      	bne.n	8009ab2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a6c:	f000 f993 	bl	8009d96 <prvIsQueueEmpty>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d017      	beq.n	8009aa6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a78:	3324      	adds	r3, #36	; 0x24
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 fe18 	bl	800a6b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a86:	f000 f934 	bl	8009cf2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a8a:	f000 fc53 	bl	800a334 <xTaskResumeAll>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d189      	bne.n	80099a8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009a94:	4b0f      	ldr	r3, [pc, #60]	; (8009ad4 <xQueueReceive+0x1b4>)
 8009a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a9a:	601a      	str	r2, [r3, #0]
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	f3bf 8f6f 	isb	sy
 8009aa4:	e780      	b.n	80099a8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aa8:	f000 f923 	bl	8009cf2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009aac:	f000 fc42 	bl	800a334 <xTaskResumeAll>
 8009ab0:	e77a      	b.n	80099a8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ab4:	f000 f91d 	bl	8009cf2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ab8:	f000 fc3c 	bl	800a334 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009abe:	f000 f96a 	bl	8009d96 <prvIsQueueEmpty>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f43f af6f 	beq.w	80099a8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009aca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3730      	adds	r7, #48	; 0x30
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	e000ed04 	.word	0xe000ed04

08009ad8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b08e      	sub	sp, #56	; 0x38
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d109      	bne.n	8009b02 <xQueueReceiveFromISR+0x2a>
 8009aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	623b      	str	r3, [r7, #32]
 8009b00:	e7fe      	b.n	8009b00 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d103      	bne.n	8009b10 <xQueueReceiveFromISR+0x38>
 8009b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <xQueueReceiveFromISR+0x3c>
 8009b10:	2301      	movs	r3, #1
 8009b12:	e000      	b.n	8009b16 <xQueueReceiveFromISR+0x3e>
 8009b14:	2300      	movs	r3, #0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d109      	bne.n	8009b2e <xQueueReceiveFromISR+0x56>
 8009b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	61fb      	str	r3, [r7, #28]
 8009b2c:	e7fe      	b.n	8009b2c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b2e:	f001 fde9 	bl	800b704 <vPortValidateInterruptPriority>
	__asm volatile
 8009b32:	f3ef 8211 	mrs	r2, BASEPRI
 8009b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	61ba      	str	r2, [r7, #24]
 8009b48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009b4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d02f      	beq.n	8009bba <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b64:	68b9      	ldr	r1, [r7, #8]
 8009b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b68:	f000 f89d 	bl	8009ca6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6e:	1e5a      	subs	r2, r3, #1
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009b74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7c:	d112      	bne.n	8009ba4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d016      	beq.n	8009bb4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b88:	3310      	adds	r3, #16
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 fde0 	bl	800a750 <xTaskRemoveFromEventList>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00e      	beq.n	8009bb4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00b      	beq.n	8009bb4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	e007      	b.n	8009bb4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ba8:	3301      	adds	r3, #1
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	b25a      	sxtb	r2, r3
 8009bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8009bb8:	e001      	b.n	8009bbe <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8009bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3738      	adds	r7, #56	; 0x38
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b086      	sub	sp, #24
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	60f8      	str	r0, [r7, #12]
 8009bda:	60b9      	str	r1, [r7, #8]
 8009bdc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009bde:	2300      	movs	r3, #0
 8009be0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10d      	bne.n	8009c0c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d14d      	bne.n	8009c94 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 ff7b 	bl	800aaf8 <xTaskPriorityDisinherit>
 8009c02:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2200      	movs	r2, #0
 8009c08:	609a      	str	r2, [r3, #8]
 8009c0a:	e043      	b.n	8009c94 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d119      	bne.n	8009c46 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6858      	ldr	r0, [r3, #4]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	68b9      	ldr	r1, [r7, #8]
 8009c1e:	f002 fac1 	bl	800c1a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2a:	441a      	add	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d32b      	bcc.n	8009c94 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	605a      	str	r2, [r3, #4]
 8009c44:	e026      	b.n	8009c94 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	68d8      	ldr	r0, [r3, #12]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4e:	461a      	mov	r2, r3
 8009c50:	68b9      	ldr	r1, [r7, #8]
 8009c52:	f002 faa7 	bl	800c1a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	68da      	ldr	r2, [r3, #12]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5e:	425b      	negs	r3, r3
 8009c60:	441a      	add	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	68da      	ldr	r2, [r3, #12]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d207      	bcs.n	8009c82 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	689a      	ldr	r2, [r3, #8]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7a:	425b      	negs	r3, r3
 8009c7c:	441a      	add	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d105      	bne.n	8009c94 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d002      	beq.n	8009c94 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	3b01      	subs	r3, #1
 8009c92:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009c9c:	697b      	ldr	r3, [r7, #20]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d018      	beq.n	8009cea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68da      	ldr	r2, [r3, #12]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc0:	441a      	add	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68da      	ldr	r2, [r3, #12]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d303      	bcc.n	8009cda <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68d9      	ldr	r1, [r3, #12]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	6838      	ldr	r0, [r7, #0]
 8009ce6:	f002 fa5d 	bl	800c1a4 <memcpy>
	}
}
 8009cea:	bf00      	nop
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009cfa:	f001 fc27 	bl	800b54c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d04:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d06:	e011      	b.n	8009d2c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d012      	beq.n	8009d36 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3324      	adds	r3, #36	; 0x24
 8009d14:	4618      	mov	r0, r3
 8009d16:	f000 fd1b 	bl	800a750 <xTaskRemoveFromEventList>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009d20:	f000 fdee 	bl	800a900 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	dce9      	bgt.n	8009d08 <prvUnlockQueue+0x16>
 8009d34:	e000      	b.n	8009d38 <prvUnlockQueue+0x46>
					break;
 8009d36:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	22ff      	movs	r2, #255	; 0xff
 8009d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009d40:	f001 fc32 	bl	800b5a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d44:	f001 fc02 	bl	800b54c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d4e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d50:	e011      	b.n	8009d76 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d012      	beq.n	8009d80 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	3310      	adds	r3, #16
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 fcf6 	bl	800a750 <xTaskRemoveFromEventList>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d6a:	f000 fdc9 	bl	800a900 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d6e:	7bbb      	ldrb	r3, [r7, #14]
 8009d70:	3b01      	subs	r3, #1
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	dce9      	bgt.n	8009d52 <prvUnlockQueue+0x60>
 8009d7e:	e000      	b.n	8009d82 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d80:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	22ff      	movs	r2, #255	; 0xff
 8009d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009d8a:	f001 fc0d 	bl	800b5a8 <vPortExitCritical>
}
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b084      	sub	sp, #16
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d9e:	f001 fbd5 	bl	800b54c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d102      	bne.n	8009db0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009daa:	2301      	movs	r3, #1
 8009dac:	60fb      	str	r3, [r7, #12]
 8009dae:	e001      	b.n	8009db4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009db0:	2300      	movs	r3, #0
 8009db2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009db4:	f001 fbf8 	bl	800b5a8 <vPortExitCritical>

	return xReturn;
 8009db8:	68fb      	ldr	r3, [r7, #12]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b084      	sub	sp, #16
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009dca:	f001 fbbf 	bl	800b54c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d102      	bne.n	8009de0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	60fb      	str	r3, [r7, #12]
 8009dde:	e001      	b.n	8009de4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009de0:	2300      	movs	r3, #0
 8009de2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009de4:	f001 fbe0 	bl	800b5a8 <vPortExitCritical>

	return xReturn;
 8009de8:	68fb      	ldr	r3, [r7, #12]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
	...

08009df4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009dfe:	2300      	movs	r3, #0
 8009e00:	60fb      	str	r3, [r7, #12]
 8009e02:	e014      	b.n	8009e2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009e04:	4a0e      	ldr	r2, [pc, #56]	; (8009e40 <vQueueAddToRegistry+0x4c>)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10b      	bne.n	8009e28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009e10:	490b      	ldr	r1, [pc, #44]	; (8009e40 <vQueueAddToRegistry+0x4c>)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009e1a:	4a09      	ldr	r2, [pc, #36]	; (8009e40 <vQueueAddToRegistry+0x4c>)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	00db      	lsls	r3, r3, #3
 8009e20:	4413      	add	r3, r2
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009e26:	e005      	b.n	8009e34 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	60fb      	str	r3, [r7, #12]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b07      	cmp	r3, #7
 8009e32:	d9e7      	bls.n	8009e04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e34:	bf00      	nop
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	20004bf4 	.word	0x20004bf4

08009e44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009e54:	f001 fb7a 	bl	800b54c <vPortEnterCritical>
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e5e:	b25b      	sxtb	r3, r3
 8009e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e64:	d103      	bne.n	8009e6e <vQueueWaitForMessageRestricted+0x2a>
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e74:	b25b      	sxtb	r3, r3
 8009e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7a:	d103      	bne.n	8009e84 <vQueueWaitForMessageRestricted+0x40>
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e84:	f001 fb90 	bl	800b5a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d106      	bne.n	8009e9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	3324      	adds	r3, #36	; 0x24
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	68b9      	ldr	r1, [r7, #8]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 fc2f 	bl	800a6fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009e9e:	6978      	ldr	r0, [r7, #20]
 8009ea0:	f7ff ff27 	bl	8009cf2 <prvUnlockQueue>
	}
 8009ea4:	bf00      	nop
 8009ea6:	3718      	adds	r7, #24
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08e      	sub	sp, #56	; 0x38
 8009eb0:	af04      	add	r7, sp, #16
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
 8009eb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d109      	bne.n	8009ed4 <xTaskCreateStatic+0x28>
	__asm volatile
 8009ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	623b      	str	r3, [r7, #32]
 8009ed2:	e7fe      	b.n	8009ed2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d109      	bne.n	8009eee <xTaskCreateStatic+0x42>
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	61fb      	str	r3, [r7, #28]
 8009eec:	e7fe      	b.n	8009eec <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009eee:	235c      	movs	r3, #92	; 0x5c
 8009ef0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	2b5c      	cmp	r3, #92	; 0x5c
 8009ef6:	d009      	beq.n	8009f0c <xTaskCreateStatic+0x60>
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	61bb      	str	r3, [r7, #24]
 8009f0a:	e7fe      	b.n	8009f0a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d01e      	beq.n	8009f52 <xTaskCreateStatic+0xa6>
 8009f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d01b      	beq.n	8009f52 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f22:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f26:	2202      	movs	r2, #2
 8009f28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	9303      	str	r3, [sp, #12]
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	9302      	str	r3, [sp, #8]
 8009f34:	f107 0314 	add.w	r3, r7, #20
 8009f38:	9301      	str	r3, [sp, #4]
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	68b9      	ldr	r1, [r7, #8]
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f000 f850 	bl	8009fea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f4c:	f000 f8dc 	bl	800a108 <prvAddNewTaskToReadyList>
 8009f50:	e001      	b.n	8009f56 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009f52:	2300      	movs	r3, #0
 8009f54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f56:	697b      	ldr	r3, [r7, #20]
	}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3728      	adds	r7, #40	; 0x28
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08c      	sub	sp, #48	; 0x30
 8009f64:	af04      	add	r7, sp, #16
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	603b      	str	r3, [r7, #0]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f70:	88fb      	ldrh	r3, [r7, #6]
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 fc03 	bl	800b780 <pvPortMalloc>
 8009f7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00e      	beq.n	8009fa0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f82:	205c      	movs	r0, #92	; 0x5c
 8009f84:	f001 fbfc 	bl	800b780 <pvPortMalloc>
 8009f88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d003      	beq.n	8009f98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	697a      	ldr	r2, [r7, #20]
 8009f94:	631a      	str	r2, [r3, #48]	; 0x30
 8009f96:	e005      	b.n	8009fa4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f98:	6978      	ldr	r0, [r7, #20]
 8009f9a:	f001 fcb3 	bl	800b904 <vPortFree>
 8009f9e:	e001      	b.n	8009fa4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d017      	beq.n	8009fda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fb2:	88fa      	ldrh	r2, [r7, #6]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	9303      	str	r3, [sp, #12]
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	9302      	str	r3, [sp, #8]
 8009fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbe:	9301      	str	r3, [sp, #4]
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	68b9      	ldr	r1, [r7, #8]
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f000 f80e 	bl	8009fea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fce:	69f8      	ldr	r0, [r7, #28]
 8009fd0:	f000 f89a 	bl	800a108 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	61bb      	str	r3, [r7, #24]
 8009fd8:	e002      	b.n	8009fe0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009fda:	f04f 33ff 	mov.w	r3, #4294967295
 8009fde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fe0:	69bb      	ldr	r3, [r7, #24]
	}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3720      	adds	r7, #32
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b088      	sub	sp, #32
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	607a      	str	r2, [r7, #4]
 8009ff6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	461a      	mov	r2, r3
 800a002:	21a5      	movs	r1, #165	; 0xa5
 800a004:	f002 f8d9 	bl	800c1ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a012:	3b01      	subs	r3, #1
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	f023 0307 	bic.w	r3, r3, #7
 800a020:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	f003 0307 	and.w	r3, r3, #7
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d009      	beq.n	800a040 <prvInitialiseNewTask+0x56>
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	617b      	str	r3, [r7, #20]
 800a03e:	e7fe      	b.n	800a03e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d01f      	beq.n	800a086 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a046:	2300      	movs	r3, #0
 800a048:	61fb      	str	r3, [r7, #28]
 800a04a:	e012      	b.n	800a072 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	4413      	add	r3, r2
 800a052:	7819      	ldrb	r1, [r3, #0]
 800a054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	4413      	add	r3, r2
 800a05a:	3334      	adds	r3, #52	; 0x34
 800a05c:	460a      	mov	r2, r1
 800a05e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	4413      	add	r3, r2
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d006      	beq.n	800a07a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	3301      	adds	r3, #1
 800a070:	61fb      	str	r3, [r7, #28]
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	2b0f      	cmp	r3, #15
 800a076:	d9e9      	bls.n	800a04c <prvInitialiseNewTask+0x62>
 800a078:	e000      	b.n	800a07c <prvInitialiseNewTask+0x92>
			{
				break;
 800a07a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a084:	e003      	b.n	800a08e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	2b37      	cmp	r3, #55	; 0x37
 800a092:	d901      	bls.n	800a098 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a094:	2337      	movs	r3, #55	; 0x37
 800a096:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a09c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff f8d6 	bl	8009260 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b6:	3318      	adds	r3, #24
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7ff f8d1 	bl	8009260 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	68f9      	ldr	r1, [r7, #12]
 800a0e6:	69b8      	ldr	r0, [r7, #24]
 800a0e8:	f001 f90c 	bl	800b304 <pxPortInitialiseStack>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d002      	beq.n	800a0fe <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0fe:	bf00      	nop
 800a100:	3720      	adds	r7, #32
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a110:	f001 fa1c 	bl	800b54c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a114:	4b2d      	ldr	r3, [pc, #180]	; (800a1cc <prvAddNewTaskToReadyList+0xc4>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	3301      	adds	r3, #1
 800a11a:	4a2c      	ldr	r2, [pc, #176]	; (800a1cc <prvAddNewTaskToReadyList+0xc4>)
 800a11c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a11e:	4b2c      	ldr	r3, [pc, #176]	; (800a1d0 <prvAddNewTaskToReadyList+0xc8>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d109      	bne.n	800a13a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a126:	4a2a      	ldr	r2, [pc, #168]	; (800a1d0 <prvAddNewTaskToReadyList+0xc8>)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a12c:	4b27      	ldr	r3, [pc, #156]	; (800a1cc <prvAddNewTaskToReadyList+0xc4>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d110      	bne.n	800a156 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a134:	f000 fc08 	bl	800a948 <prvInitialiseTaskLists>
 800a138:	e00d      	b.n	800a156 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a13a:	4b26      	ldr	r3, [pc, #152]	; (800a1d4 <prvAddNewTaskToReadyList+0xcc>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d109      	bne.n	800a156 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a142:	4b23      	ldr	r3, [pc, #140]	; (800a1d0 <prvAddNewTaskToReadyList+0xc8>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d802      	bhi.n	800a156 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a150:	4a1f      	ldr	r2, [pc, #124]	; (800a1d0 <prvAddNewTaskToReadyList+0xc8>)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a156:	4b20      	ldr	r3, [pc, #128]	; (800a1d8 <prvAddNewTaskToReadyList+0xd0>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	3301      	adds	r3, #1
 800a15c:	4a1e      	ldr	r2, [pc, #120]	; (800a1d8 <prvAddNewTaskToReadyList+0xd0>)
 800a15e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a160:	4b1d      	ldr	r3, [pc, #116]	; (800a1d8 <prvAddNewTaskToReadyList+0xd0>)
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a16c:	4b1b      	ldr	r3, [pc, #108]	; (800a1dc <prvAddNewTaskToReadyList+0xd4>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	429a      	cmp	r2, r3
 800a172:	d903      	bls.n	800a17c <prvAddNewTaskToReadyList+0x74>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a178:	4a18      	ldr	r2, [pc, #96]	; (800a1dc <prvAddNewTaskToReadyList+0xd4>)
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a180:	4613      	mov	r3, r2
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4413      	add	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4a15      	ldr	r2, [pc, #84]	; (800a1e0 <prvAddNewTaskToReadyList+0xd8>)
 800a18a:	441a      	add	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	3304      	adds	r3, #4
 800a190:	4619      	mov	r1, r3
 800a192:	4610      	mov	r0, r2
 800a194:	f7ff f871 	bl	800927a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a198:	f001 fa06 	bl	800b5a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a19c:	4b0d      	ldr	r3, [pc, #52]	; (800a1d4 <prvAddNewTaskToReadyList+0xcc>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00e      	beq.n	800a1c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1a4:	4b0a      	ldr	r3, [pc, #40]	; (800a1d0 <prvAddNewTaskToReadyList+0xc8>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d207      	bcs.n	800a1c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1b2:	4b0c      	ldr	r3, [pc, #48]	; (800a1e4 <prvAddNewTaskToReadyList+0xdc>)
 800a1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1c2:	bf00      	nop
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20000c48 	.word	0x20000c48
 800a1d0:	20000774 	.word	0x20000774
 800a1d4:	20000c54 	.word	0x20000c54
 800a1d8:	20000c64 	.word	0x20000c64
 800a1dc:	20000c50 	.word	0x20000c50
 800a1e0:	20000778 	.word	0x20000778
 800a1e4:	e000ed04 	.word	0xe000ed04

0800a1e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d016      	beq.n	800a228 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1fa:	4b13      	ldr	r3, [pc, #76]	; (800a248 <vTaskDelay+0x60>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d009      	beq.n	800a216 <vTaskDelay+0x2e>
 800a202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	60bb      	str	r3, [r7, #8]
 800a214:	e7fe      	b.n	800a214 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a216:	f000 f87f 	bl	800a318 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a21a:	2100      	movs	r1, #0
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fcd7 	bl	800abd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a222:	f000 f887 	bl	800a334 <xTaskResumeAll>
 800a226:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d107      	bne.n	800a23e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a22e:	4b07      	ldr	r3, [pc, #28]	; (800a24c <vTaskDelay+0x64>)
 800a230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	f3bf 8f4f 	dsb	sy
 800a23a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a23e:	bf00      	nop
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	20000c70 	.word	0x20000c70
 800a24c:	e000ed04 	.word	0xe000ed04

0800a250 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08a      	sub	sp, #40	; 0x28
 800a254:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a256:	2300      	movs	r3, #0
 800a258:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a25e:	463a      	mov	r2, r7
 800a260:	1d39      	adds	r1, r7, #4
 800a262:	f107 0308 	add.w	r3, r7, #8
 800a266:	4618      	mov	r0, r3
 800a268:	f7fe ffa6 	bl	80091b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	68ba      	ldr	r2, [r7, #8]
 800a272:	9202      	str	r2, [sp, #8]
 800a274:	9301      	str	r3, [sp, #4]
 800a276:	2300      	movs	r3, #0
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	2300      	movs	r3, #0
 800a27c:	460a      	mov	r2, r1
 800a27e:	4920      	ldr	r1, [pc, #128]	; (800a300 <vTaskStartScheduler+0xb0>)
 800a280:	4820      	ldr	r0, [pc, #128]	; (800a304 <vTaskStartScheduler+0xb4>)
 800a282:	f7ff fe13 	bl	8009eac <xTaskCreateStatic>
 800a286:	4602      	mov	r2, r0
 800a288:	4b1f      	ldr	r3, [pc, #124]	; (800a308 <vTaskStartScheduler+0xb8>)
 800a28a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a28c:	4b1e      	ldr	r3, [pc, #120]	; (800a308 <vTaskStartScheduler+0xb8>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a294:	2301      	movs	r3, #1
 800a296:	617b      	str	r3, [r7, #20]
 800a298:	e001      	b.n	800a29e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a29a:	2300      	movs	r3, #0
 800a29c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d102      	bne.n	800a2aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a2a4:	f000 fce8 	bl	800ac78 <xTimerCreateTimerTask>
 800a2a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d115      	bne.n	800a2dc <vTaskStartScheduler+0x8c>
 800a2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2c2:	4b12      	ldr	r3, [pc, #72]	; (800a30c <vTaskStartScheduler+0xbc>)
 800a2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2ca:	4b11      	ldr	r3, [pc, #68]	; (800a310 <vTaskStartScheduler+0xc0>)
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a2d0:	4b10      	ldr	r3, [pc, #64]	; (800a314 <vTaskStartScheduler+0xc4>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2d6:	f001 f89b 	bl	800b410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2da:	e00d      	b.n	800a2f8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e2:	d109      	bne.n	800a2f8 <vTaskStartScheduler+0xa8>
 800a2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	60fb      	str	r3, [r7, #12]
 800a2f6:	e7fe      	b.n	800a2f6 <vTaskStartScheduler+0xa6>
}
 800a2f8:	bf00      	nop
 800a2fa:	3718      	adds	r7, #24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	0800c3fc 	.word	0x0800c3fc
 800a304:	0800a919 	.word	0x0800a919
 800a308:	20000c6c 	.word	0x20000c6c
 800a30c:	20000c68 	.word	0x20000c68
 800a310:	20000c54 	.word	0x20000c54
 800a314:	20000c4c 	.word	0x20000c4c

0800a318 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a318:	b480      	push	{r7}
 800a31a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a31c:	4b04      	ldr	r3, [pc, #16]	; (800a330 <vTaskSuspendAll+0x18>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3301      	adds	r3, #1
 800a322:	4a03      	ldr	r2, [pc, #12]	; (800a330 <vTaskSuspendAll+0x18>)
 800a324:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a326:	bf00      	nop
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr
 800a330:	20000c70 	.word	0x20000c70

0800a334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a33a:	2300      	movs	r3, #0
 800a33c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a33e:	2300      	movs	r3, #0
 800a340:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a342:	4b41      	ldr	r3, [pc, #260]	; (800a448 <xTaskResumeAll+0x114>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d109      	bne.n	800a35e <xTaskResumeAll+0x2a>
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	603b      	str	r3, [r7, #0]
 800a35c:	e7fe      	b.n	800a35c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a35e:	f001 f8f5 	bl	800b54c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a362:	4b39      	ldr	r3, [pc, #228]	; (800a448 <xTaskResumeAll+0x114>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3b01      	subs	r3, #1
 800a368:	4a37      	ldr	r2, [pc, #220]	; (800a448 <xTaskResumeAll+0x114>)
 800a36a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a36c:	4b36      	ldr	r3, [pc, #216]	; (800a448 <xTaskResumeAll+0x114>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d162      	bne.n	800a43a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a374:	4b35      	ldr	r3, [pc, #212]	; (800a44c <xTaskResumeAll+0x118>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d05e      	beq.n	800a43a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a37c:	e02f      	b.n	800a3de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a37e:	4b34      	ldr	r3, [pc, #208]	; (800a450 <xTaskResumeAll+0x11c>)
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3318      	adds	r3, #24
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe ffd2 	bl	8009334 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3304      	adds	r3, #4
 800a394:	4618      	mov	r0, r3
 800a396:	f7fe ffcd 	bl	8009334 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39e:	4b2d      	ldr	r3, [pc, #180]	; (800a454 <xTaskResumeAll+0x120>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d903      	bls.n	800a3ae <xTaskResumeAll+0x7a>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3aa:	4a2a      	ldr	r2, [pc, #168]	; (800a454 <xTaskResumeAll+0x120>)
 800a3ac:	6013      	str	r3, [r2, #0]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4a27      	ldr	r2, [pc, #156]	; (800a458 <xTaskResumeAll+0x124>)
 800a3bc:	441a      	add	r2, r3
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	f7fe ff58 	bl	800927a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ce:	4b23      	ldr	r3, [pc, #140]	; (800a45c <xTaskResumeAll+0x128>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d302      	bcc.n	800a3de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a3d8:	4b21      	ldr	r3, [pc, #132]	; (800a460 <xTaskResumeAll+0x12c>)
 800a3da:	2201      	movs	r2, #1
 800a3dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3de:	4b1c      	ldr	r3, [pc, #112]	; (800a450 <xTaskResumeAll+0x11c>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1cb      	bne.n	800a37e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a3ec:	f000 fb46 	bl	800aa7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a3f0:	4b1c      	ldr	r3, [pc, #112]	; (800a464 <xTaskResumeAll+0x130>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d010      	beq.n	800a41e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3fc:	f000 f846 	bl	800a48c <xTaskIncrementTick>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d002      	beq.n	800a40c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a406:	4b16      	ldr	r3, [pc, #88]	; (800a460 <xTaskResumeAll+0x12c>)
 800a408:	2201      	movs	r2, #1
 800a40a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	3b01      	subs	r3, #1
 800a410:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1f1      	bne.n	800a3fc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a418:	4b12      	ldr	r3, [pc, #72]	; (800a464 <xTaskResumeAll+0x130>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a41e:	4b10      	ldr	r3, [pc, #64]	; (800a460 <xTaskResumeAll+0x12c>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d009      	beq.n	800a43a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a426:	2301      	movs	r3, #1
 800a428:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a42a:	4b0f      	ldr	r3, [pc, #60]	; (800a468 <xTaskResumeAll+0x134>)
 800a42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a430:	601a      	str	r2, [r3, #0]
 800a432:	f3bf 8f4f 	dsb	sy
 800a436:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a43a:	f001 f8b5 	bl	800b5a8 <vPortExitCritical>

	return xAlreadyYielded;
 800a43e:	68bb      	ldr	r3, [r7, #8]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	20000c70 	.word	0x20000c70
 800a44c:	20000c48 	.word	0x20000c48
 800a450:	20000c08 	.word	0x20000c08
 800a454:	20000c50 	.word	0x20000c50
 800a458:	20000778 	.word	0x20000778
 800a45c:	20000774 	.word	0x20000774
 800a460:	20000c5c 	.word	0x20000c5c
 800a464:	20000c58 	.word	0x20000c58
 800a468:	e000ed04 	.word	0xe000ed04

0800a46c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a472:	4b05      	ldr	r3, [pc, #20]	; (800a488 <xTaskGetTickCount+0x1c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a478:	687b      	ldr	r3, [r7, #4]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	20000c4c 	.word	0x20000c4c

0800a48c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a492:	2300      	movs	r3, #0
 800a494:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a496:	4b4e      	ldr	r3, [pc, #312]	; (800a5d0 <xTaskIncrementTick+0x144>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f040 8088 	bne.w	800a5b0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4a0:	4b4c      	ldr	r3, [pc, #304]	; (800a5d4 <xTaskIncrementTick+0x148>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4a8:	4a4a      	ldr	r2, [pc, #296]	; (800a5d4 <xTaskIncrementTick+0x148>)
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d11f      	bne.n	800a4f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4b4:	4b48      	ldr	r3, [pc, #288]	; (800a5d8 <xTaskIncrementTick+0x14c>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d009      	beq.n	800a4d2 <xTaskIncrementTick+0x46>
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	603b      	str	r3, [r7, #0]
 800a4d0:	e7fe      	b.n	800a4d0 <xTaskIncrementTick+0x44>
 800a4d2:	4b41      	ldr	r3, [pc, #260]	; (800a5d8 <xTaskIncrementTick+0x14c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	4b40      	ldr	r3, [pc, #256]	; (800a5dc <xTaskIncrementTick+0x150>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a3e      	ldr	r2, [pc, #248]	; (800a5d8 <xTaskIncrementTick+0x14c>)
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	4a3e      	ldr	r2, [pc, #248]	; (800a5dc <xTaskIncrementTick+0x150>)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6013      	str	r3, [r2, #0]
 800a4e6:	4b3e      	ldr	r3, [pc, #248]	; (800a5e0 <xTaskIncrementTick+0x154>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	4a3c      	ldr	r2, [pc, #240]	; (800a5e0 <xTaskIncrementTick+0x154>)
 800a4ee:	6013      	str	r3, [r2, #0]
 800a4f0:	f000 fac4 	bl	800aa7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4f4:	4b3b      	ldr	r3, [pc, #236]	; (800a5e4 <xTaskIncrementTick+0x158>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	693a      	ldr	r2, [r7, #16]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d349      	bcc.n	800a592 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4fe:	4b36      	ldr	r3, [pc, #216]	; (800a5d8 <xTaskIncrementTick+0x14c>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d104      	bne.n	800a512 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a508:	4b36      	ldr	r3, [pc, #216]	; (800a5e4 <xTaskIncrementTick+0x158>)
 800a50a:	f04f 32ff 	mov.w	r2, #4294967295
 800a50e:	601a      	str	r2, [r3, #0]
					break;
 800a510:	e03f      	b.n	800a592 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a512:	4b31      	ldr	r3, [pc, #196]	; (800a5d8 <xTaskIncrementTick+0x14c>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a522:	693a      	ldr	r2, [r7, #16]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	429a      	cmp	r2, r3
 800a528:	d203      	bcs.n	800a532 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a52a:	4a2e      	ldr	r2, [pc, #184]	; (800a5e4 <xTaskIncrementTick+0x158>)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a530:	e02f      	b.n	800a592 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	3304      	adds	r3, #4
 800a536:	4618      	mov	r0, r3
 800a538:	f7fe fefc 	bl	8009334 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a540:	2b00      	cmp	r3, #0
 800a542:	d004      	beq.n	800a54e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	3318      	adds	r3, #24
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fe fef3 	bl	8009334 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a552:	4b25      	ldr	r3, [pc, #148]	; (800a5e8 <xTaskIncrementTick+0x15c>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	429a      	cmp	r2, r3
 800a558:	d903      	bls.n	800a562 <xTaskIncrementTick+0xd6>
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55e:	4a22      	ldr	r2, [pc, #136]	; (800a5e8 <xTaskIncrementTick+0x15c>)
 800a560:	6013      	str	r3, [r2, #0]
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a566:	4613      	mov	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4413      	add	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4a1f      	ldr	r2, [pc, #124]	; (800a5ec <xTaskIncrementTick+0x160>)
 800a570:	441a      	add	r2, r3
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	3304      	adds	r3, #4
 800a576:	4619      	mov	r1, r3
 800a578:	4610      	mov	r0, r2
 800a57a:	f7fe fe7e 	bl	800927a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a582:	4b1b      	ldr	r3, [pc, #108]	; (800a5f0 <xTaskIncrementTick+0x164>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a588:	429a      	cmp	r2, r3
 800a58a:	d3b8      	bcc.n	800a4fe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a58c:	2301      	movs	r3, #1
 800a58e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a590:	e7b5      	b.n	800a4fe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a592:	4b17      	ldr	r3, [pc, #92]	; (800a5f0 <xTaskIncrementTick+0x164>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a598:	4914      	ldr	r1, [pc, #80]	; (800a5ec <xTaskIncrementTick+0x160>)
 800a59a:	4613      	mov	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	440b      	add	r3, r1
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d907      	bls.n	800a5ba <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	617b      	str	r3, [r7, #20]
 800a5ae:	e004      	b.n	800a5ba <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a5b0:	4b10      	ldr	r3, [pc, #64]	; (800a5f4 <xTaskIncrementTick+0x168>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	4a0f      	ldr	r2, [pc, #60]	; (800a5f4 <xTaskIncrementTick+0x168>)
 800a5b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a5ba:	4b0f      	ldr	r3, [pc, #60]	; (800a5f8 <xTaskIncrementTick+0x16c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a5c6:	697b      	ldr	r3, [r7, #20]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3718      	adds	r7, #24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	20000c70 	.word	0x20000c70
 800a5d4:	20000c4c 	.word	0x20000c4c
 800a5d8:	20000c00 	.word	0x20000c00
 800a5dc:	20000c04 	.word	0x20000c04
 800a5e0:	20000c60 	.word	0x20000c60
 800a5e4:	20000c68 	.word	0x20000c68
 800a5e8:	20000c50 	.word	0x20000c50
 800a5ec:	20000778 	.word	0x20000778
 800a5f0:	20000774 	.word	0x20000774
 800a5f4:	20000c58 	.word	0x20000c58
 800a5f8:	20000c5c 	.word	0x20000c5c

0800a5fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a602:	4b27      	ldr	r3, [pc, #156]	; (800a6a0 <vTaskSwitchContext+0xa4>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d003      	beq.n	800a612 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a60a:	4b26      	ldr	r3, [pc, #152]	; (800a6a4 <vTaskSwitchContext+0xa8>)
 800a60c:	2201      	movs	r2, #1
 800a60e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a610:	e040      	b.n	800a694 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a612:	4b24      	ldr	r3, [pc, #144]	; (800a6a4 <vTaskSwitchContext+0xa8>)
 800a614:	2200      	movs	r2, #0
 800a616:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a618:	4b23      	ldr	r3, [pc, #140]	; (800a6a8 <vTaskSwitchContext+0xac>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	60fb      	str	r3, [r7, #12]
 800a61e:	e00f      	b.n	800a640 <vTaskSwitchContext+0x44>
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d109      	bne.n	800a63a <vTaskSwitchContext+0x3e>
 800a626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	607b      	str	r3, [r7, #4]
 800a638:	e7fe      	b.n	800a638 <vTaskSwitchContext+0x3c>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	60fb      	str	r3, [r7, #12]
 800a640:	491a      	ldr	r1, [pc, #104]	; (800a6ac <vTaskSwitchContext+0xb0>)
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	4613      	mov	r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	4413      	add	r3, r2
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	440b      	add	r3, r1
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d0e5      	beq.n	800a620 <vTaskSwitchContext+0x24>
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	4613      	mov	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4a13      	ldr	r2, [pc, #76]	; (800a6ac <vTaskSwitchContext+0xb0>)
 800a660:	4413      	add	r3, r2
 800a662:	60bb      	str	r3, [r7, #8]
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	605a      	str	r2, [r3, #4]
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	3308      	adds	r3, #8
 800a676:	429a      	cmp	r2, r3
 800a678:	d104      	bne.n	800a684 <vTaskSwitchContext+0x88>
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	605a      	str	r2, [r3, #4]
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	4a09      	ldr	r2, [pc, #36]	; (800a6b0 <vTaskSwitchContext+0xb4>)
 800a68c:	6013      	str	r3, [r2, #0]
 800a68e:	4a06      	ldr	r2, [pc, #24]	; (800a6a8 <vTaskSwitchContext+0xac>)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6013      	str	r3, [r2, #0]
}
 800a694:	bf00      	nop
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	20000c70 	.word	0x20000c70
 800a6a4:	20000c5c 	.word	0x20000c5c
 800a6a8:	20000c50 	.word	0x20000c50
 800a6ac:	20000778 	.word	0x20000778
 800a6b0:	20000774 	.word	0x20000774

0800a6b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d109      	bne.n	800a6d8 <vTaskPlaceOnEventList+0x24>
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	60fb      	str	r3, [r7, #12]
 800a6d6:	e7fe      	b.n	800a6d6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6d8:	4b07      	ldr	r3, [pc, #28]	; (800a6f8 <vTaskPlaceOnEventList+0x44>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	3318      	adds	r3, #24
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7fe fdee 	bl	80092c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6e6:	2101      	movs	r1, #1
 800a6e8:	6838      	ldr	r0, [r7, #0]
 800a6ea:	f000 fa71 	bl	800abd0 <prvAddCurrentTaskToDelayedList>
}
 800a6ee:	bf00      	nop
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	20000774 	.word	0x20000774

0800a6fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d109      	bne.n	800a722 <vTaskPlaceOnEventListRestricted+0x26>
 800a70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	617b      	str	r3, [r7, #20]
 800a720:	e7fe      	b.n	800a720 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a722:	4b0a      	ldr	r3, [pc, #40]	; (800a74c <vTaskPlaceOnEventListRestricted+0x50>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	3318      	adds	r3, #24
 800a728:	4619      	mov	r1, r3
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f7fe fda5 	bl	800927a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d002      	beq.n	800a73c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a736:	f04f 33ff 	mov.w	r3, #4294967295
 800a73a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a73c:	6879      	ldr	r1, [r7, #4]
 800a73e:	68b8      	ldr	r0, [r7, #8]
 800a740:	f000 fa46 	bl	800abd0 <prvAddCurrentTaskToDelayedList>
	}
 800a744:	bf00      	nop
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	20000774 	.word	0x20000774

0800a750 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d109      	bne.n	800a77a <xTaskRemoveFromEventList+0x2a>
 800a766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76a:	f383 8811 	msr	BASEPRI, r3
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	f3bf 8f4f 	dsb	sy
 800a776:	60fb      	str	r3, [r7, #12]
 800a778:	e7fe      	b.n	800a778 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	3318      	adds	r3, #24
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fe fdd8 	bl	8009334 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a784:	4b1d      	ldr	r3, [pc, #116]	; (800a7fc <xTaskRemoveFromEventList+0xac>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d11d      	bne.n	800a7c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	3304      	adds	r3, #4
 800a790:	4618      	mov	r0, r3
 800a792:	f7fe fdcf 	bl	8009334 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a79a:	4b19      	ldr	r3, [pc, #100]	; (800a800 <xTaskRemoveFromEventList+0xb0>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d903      	bls.n	800a7aa <xTaskRemoveFromEventList+0x5a>
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a6:	4a16      	ldr	r2, [pc, #88]	; (800a800 <xTaskRemoveFromEventList+0xb0>)
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4a13      	ldr	r2, [pc, #76]	; (800a804 <xTaskRemoveFromEventList+0xb4>)
 800a7b8:	441a      	add	r2, r3
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	3304      	adds	r3, #4
 800a7be:	4619      	mov	r1, r3
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	f7fe fd5a 	bl	800927a <vListInsertEnd>
 800a7c6:	e005      	b.n	800a7d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	3318      	adds	r3, #24
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	480e      	ldr	r0, [pc, #56]	; (800a808 <xTaskRemoveFromEventList+0xb8>)
 800a7d0:	f7fe fd53 	bl	800927a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d8:	4b0c      	ldr	r3, [pc, #48]	; (800a80c <xTaskRemoveFromEventList+0xbc>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d905      	bls.n	800a7ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a7e6:	4b0a      	ldr	r3, [pc, #40]	; (800a810 <xTaskRemoveFromEventList+0xc0>)
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	e001      	b.n	800a7f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a7f2:	697b      	ldr	r3, [r7, #20]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3718      	adds	r7, #24
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	20000c70 	.word	0x20000c70
 800a800:	20000c50 	.word	0x20000c50
 800a804:	20000778 	.word	0x20000778
 800a808:	20000c08 	.word	0x20000c08
 800a80c:	20000774 	.word	0x20000774
 800a810:	20000c5c 	.word	0x20000c5c

0800a814 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a81c:	4b06      	ldr	r3, [pc, #24]	; (800a838 <vTaskInternalSetTimeOutState+0x24>)
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a824:	4b05      	ldr	r3, [pc, #20]	; (800a83c <vTaskInternalSetTimeOutState+0x28>)
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	605a      	str	r2, [r3, #4]
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr
 800a838:	20000c60 	.word	0x20000c60
 800a83c:	20000c4c 	.word	0x20000c4c

0800a840 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d109      	bne.n	800a864 <xTaskCheckForTimeOut+0x24>
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	613b      	str	r3, [r7, #16]
 800a862:	e7fe      	b.n	800a862 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d109      	bne.n	800a87e <xTaskCheckForTimeOut+0x3e>
 800a86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86e:	f383 8811 	msr	BASEPRI, r3
 800a872:	f3bf 8f6f 	isb	sy
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	60fb      	str	r3, [r7, #12]
 800a87c:	e7fe      	b.n	800a87c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a87e:	f000 fe65 	bl	800b54c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a882:	4b1d      	ldr	r3, [pc, #116]	; (800a8f8 <xTaskCheckForTimeOut+0xb8>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	69ba      	ldr	r2, [r7, #24]
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a89a:	d102      	bne.n	800a8a2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a89c:	2300      	movs	r3, #0
 800a89e:	61fb      	str	r3, [r7, #28]
 800a8a0:	e023      	b.n	800a8ea <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	4b15      	ldr	r3, [pc, #84]	; (800a8fc <xTaskCheckForTimeOut+0xbc>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d007      	beq.n	800a8be <xTaskCheckForTimeOut+0x7e>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	69ba      	ldr	r2, [r7, #24]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d302      	bcc.n	800a8be <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	61fb      	str	r3, [r7, #28]
 800a8bc:	e015      	b.n	800a8ea <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d20b      	bcs.n	800a8e0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	1ad2      	subs	r2, r2, r3
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7ff ff9d 	bl	800a814 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	61fb      	str	r3, [r7, #28]
 800a8de:	e004      	b.n	800a8ea <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8ea:	f000 fe5d 	bl	800b5a8 <vPortExitCritical>

	return xReturn;
 800a8ee:	69fb      	ldr	r3, [r7, #28]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3720      	adds	r7, #32
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	20000c4c 	.word	0x20000c4c
 800a8fc:	20000c60 	.word	0x20000c60

0800a900 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a900:	b480      	push	{r7}
 800a902:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a904:	4b03      	ldr	r3, [pc, #12]	; (800a914 <vTaskMissedYield+0x14>)
 800a906:	2201      	movs	r2, #1
 800a908:	601a      	str	r2, [r3, #0]
}
 800a90a:	bf00      	nop
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	20000c5c 	.word	0x20000c5c

0800a918 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a920:	f000 f852 	bl	800a9c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a924:	4b06      	ldr	r3, [pc, #24]	; (800a940 <prvIdleTask+0x28>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d9f9      	bls.n	800a920 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a92c:	4b05      	ldr	r3, [pc, #20]	; (800a944 <prvIdleTask+0x2c>)
 800a92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a93c:	e7f0      	b.n	800a920 <prvIdleTask+0x8>
 800a93e:	bf00      	nop
 800a940:	20000778 	.word	0x20000778
 800a944:	e000ed04 	.word	0xe000ed04

0800a948 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a94e:	2300      	movs	r3, #0
 800a950:	607b      	str	r3, [r7, #4]
 800a952:	e00c      	b.n	800a96e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	4613      	mov	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4413      	add	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	4a12      	ldr	r2, [pc, #72]	; (800a9a8 <prvInitialiseTaskLists+0x60>)
 800a960:	4413      	add	r3, r2
 800a962:	4618      	mov	r0, r3
 800a964:	f7fe fc5c 	bl	8009220 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	3301      	adds	r3, #1
 800a96c:	607b      	str	r3, [r7, #4]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b37      	cmp	r3, #55	; 0x37
 800a972:	d9ef      	bls.n	800a954 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a974:	480d      	ldr	r0, [pc, #52]	; (800a9ac <prvInitialiseTaskLists+0x64>)
 800a976:	f7fe fc53 	bl	8009220 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a97a:	480d      	ldr	r0, [pc, #52]	; (800a9b0 <prvInitialiseTaskLists+0x68>)
 800a97c:	f7fe fc50 	bl	8009220 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a980:	480c      	ldr	r0, [pc, #48]	; (800a9b4 <prvInitialiseTaskLists+0x6c>)
 800a982:	f7fe fc4d 	bl	8009220 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a986:	480c      	ldr	r0, [pc, #48]	; (800a9b8 <prvInitialiseTaskLists+0x70>)
 800a988:	f7fe fc4a 	bl	8009220 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a98c:	480b      	ldr	r0, [pc, #44]	; (800a9bc <prvInitialiseTaskLists+0x74>)
 800a98e:	f7fe fc47 	bl	8009220 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a992:	4b0b      	ldr	r3, [pc, #44]	; (800a9c0 <prvInitialiseTaskLists+0x78>)
 800a994:	4a05      	ldr	r2, [pc, #20]	; (800a9ac <prvInitialiseTaskLists+0x64>)
 800a996:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a998:	4b0a      	ldr	r3, [pc, #40]	; (800a9c4 <prvInitialiseTaskLists+0x7c>)
 800a99a:	4a05      	ldr	r2, [pc, #20]	; (800a9b0 <prvInitialiseTaskLists+0x68>)
 800a99c:	601a      	str	r2, [r3, #0]
}
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	20000778 	.word	0x20000778
 800a9ac:	20000bd8 	.word	0x20000bd8
 800a9b0:	20000bec 	.word	0x20000bec
 800a9b4:	20000c08 	.word	0x20000c08
 800a9b8:	20000c1c 	.word	0x20000c1c
 800a9bc:	20000c34 	.word	0x20000c34
 800a9c0:	20000c00 	.word	0x20000c00
 800a9c4:	20000c04 	.word	0x20000c04

0800a9c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9ce:	e019      	b.n	800aa04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9d0:	f000 fdbc 	bl	800b54c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9d4:	4b0f      	ldr	r3, [pc, #60]	; (800aa14 <prvCheckTasksWaitingTermination+0x4c>)
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	3304      	adds	r3, #4
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fe fca7 	bl	8009334 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9e6:	4b0c      	ldr	r3, [pc, #48]	; (800aa18 <prvCheckTasksWaitingTermination+0x50>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	4a0a      	ldr	r2, [pc, #40]	; (800aa18 <prvCheckTasksWaitingTermination+0x50>)
 800a9ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9f0:	4b0a      	ldr	r3, [pc, #40]	; (800aa1c <prvCheckTasksWaitingTermination+0x54>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	4a09      	ldr	r2, [pc, #36]	; (800aa1c <prvCheckTasksWaitingTermination+0x54>)
 800a9f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9fa:	f000 fdd5 	bl	800b5a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f80e 	bl	800aa20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa04:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <prvCheckTasksWaitingTermination+0x54>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1e1      	bne.n	800a9d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa0c:	bf00      	nop
 800aa0e:	3708      	adds	r7, #8
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	20000c1c 	.word	0x20000c1c
 800aa18:	20000c48 	.word	0x20000c48
 800aa1c:	20000c30 	.word	0x20000c30

0800aa20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d108      	bne.n	800aa44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 ff64 	bl	800b904 <vPortFree>
				vPortFree( pxTCB );
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 ff61 	bl	800b904 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa42:	e017      	b.n	800aa74 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d103      	bne.n	800aa56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 ff58 	bl	800b904 <vPortFree>
	}
 800aa54:	e00e      	b.n	800aa74 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d009      	beq.n	800aa74 <prvDeleteTCB+0x54>
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	60fb      	str	r3, [r7, #12]
 800aa72:	e7fe      	b.n	800aa72 <prvDeleteTCB+0x52>
	}
 800aa74:	bf00      	nop
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa82:	4b0c      	ldr	r3, [pc, #48]	; (800aab4 <prvResetNextTaskUnblockTime+0x38>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d104      	bne.n	800aa96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa8c:	4b0a      	ldr	r3, [pc, #40]	; (800aab8 <prvResetNextTaskUnblockTime+0x3c>)
 800aa8e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa94:	e008      	b.n	800aaa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa96:	4b07      	ldr	r3, [pc, #28]	; (800aab4 <prvResetNextTaskUnblockTime+0x38>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	4a04      	ldr	r2, [pc, #16]	; (800aab8 <prvResetNextTaskUnblockTime+0x3c>)
 800aaa6:	6013      	str	r3, [r2, #0]
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	20000c00 	.word	0x20000c00
 800aab8:	20000c68 	.word	0x20000c68

0800aabc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aac2:	4b0b      	ldr	r3, [pc, #44]	; (800aaf0 <xTaskGetSchedulerState+0x34>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d102      	bne.n	800aad0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aaca:	2301      	movs	r3, #1
 800aacc:	607b      	str	r3, [r7, #4]
 800aace:	e008      	b.n	800aae2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aad0:	4b08      	ldr	r3, [pc, #32]	; (800aaf4 <xTaskGetSchedulerState+0x38>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d102      	bne.n	800aade <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aad8:	2302      	movs	r3, #2
 800aada:	607b      	str	r3, [r7, #4]
 800aadc:	e001      	b.n	800aae2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aade:	2300      	movs	r3, #0
 800aae0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aae2:	687b      	ldr	r3, [r7, #4]
	}
 800aae4:	4618      	mov	r0, r3
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	20000c54 	.word	0x20000c54
 800aaf4:	20000c70 	.word	0x20000c70

0800aaf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab04:	2300      	movs	r3, #0
 800ab06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d054      	beq.n	800abb8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab0e:	4b2d      	ldr	r3, [pc, #180]	; (800abc4 <xTaskPriorityDisinherit+0xcc>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d009      	beq.n	800ab2c <xTaskPriorityDisinherit+0x34>
 800ab18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1c:	f383 8811 	msr	BASEPRI, r3
 800ab20:	f3bf 8f6f 	isb	sy
 800ab24:	f3bf 8f4f 	dsb	sy
 800ab28:	60fb      	str	r3, [r7, #12]
 800ab2a:	e7fe      	b.n	800ab2a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d109      	bne.n	800ab48 <xTaskPriorityDisinherit+0x50>
 800ab34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	60bb      	str	r3, [r7, #8]
 800ab46:	e7fe      	b.n	800ab46 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab4c:	1e5a      	subs	r2, r3, #1
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d02c      	beq.n	800abb8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d128      	bne.n	800abb8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	3304      	adds	r3, #4
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe fbe2 	bl	8009334 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab88:	4b0f      	ldr	r3, [pc, #60]	; (800abc8 <xTaskPriorityDisinherit+0xd0>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d903      	bls.n	800ab98 <xTaskPriorityDisinherit+0xa0>
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab94:	4a0c      	ldr	r2, [pc, #48]	; (800abc8 <xTaskPriorityDisinherit+0xd0>)
 800ab96:	6013      	str	r3, [r2, #0]
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	4413      	add	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4a09      	ldr	r2, [pc, #36]	; (800abcc <xTaskPriorityDisinherit+0xd4>)
 800aba6:	441a      	add	r2, r3
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	3304      	adds	r3, #4
 800abac:	4619      	mov	r1, r3
 800abae:	4610      	mov	r0, r2
 800abb0:	f7fe fb63 	bl	800927a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800abb4:	2301      	movs	r3, #1
 800abb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abb8:	697b      	ldr	r3, [r7, #20]
	}
 800abba:	4618      	mov	r0, r3
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20000774 	.word	0x20000774
 800abc8:	20000c50 	.word	0x20000c50
 800abcc:	20000778 	.word	0x20000778

0800abd0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800abda:	4b21      	ldr	r3, [pc, #132]	; (800ac60 <prvAddCurrentTaskToDelayedList+0x90>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abe0:	4b20      	ldr	r3, [pc, #128]	; (800ac64 <prvAddCurrentTaskToDelayedList+0x94>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3304      	adds	r3, #4
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fe fba4 	bl	8009334 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf2:	d10a      	bne.n	800ac0a <prvAddCurrentTaskToDelayedList+0x3a>
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d007      	beq.n	800ac0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abfa:	4b1a      	ldr	r3, [pc, #104]	; (800ac64 <prvAddCurrentTaskToDelayedList+0x94>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	3304      	adds	r3, #4
 800ac00:	4619      	mov	r1, r3
 800ac02:	4819      	ldr	r0, [pc, #100]	; (800ac68 <prvAddCurrentTaskToDelayedList+0x98>)
 800ac04:	f7fe fb39 	bl	800927a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac08:	e026      	b.n	800ac58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4413      	add	r3, r2
 800ac10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac12:	4b14      	ldr	r3, [pc, #80]	; (800ac64 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d209      	bcs.n	800ac36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac22:	4b12      	ldr	r3, [pc, #72]	; (800ac6c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	4b0f      	ldr	r3, [pc, #60]	; (800ac64 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	4610      	mov	r0, r2
 800ac30:	f7fe fb47 	bl	80092c2 <vListInsert>
}
 800ac34:	e010      	b.n	800ac58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac36:	4b0e      	ldr	r3, [pc, #56]	; (800ac70 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	4b0a      	ldr	r3, [pc, #40]	; (800ac64 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3304      	adds	r3, #4
 800ac40:	4619      	mov	r1, r3
 800ac42:	4610      	mov	r0, r2
 800ac44:	f7fe fb3d 	bl	80092c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac48:	4b0a      	ldr	r3, [pc, #40]	; (800ac74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d202      	bcs.n	800ac58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac52:	4a08      	ldr	r2, [pc, #32]	; (800ac74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	6013      	str	r3, [r2, #0]
}
 800ac58:	bf00      	nop
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	20000c4c 	.word	0x20000c4c
 800ac64:	20000774 	.word	0x20000774
 800ac68:	20000c34 	.word	0x20000c34
 800ac6c:	20000c04 	.word	0x20000c04
 800ac70:	20000c00 	.word	0x20000c00
 800ac74:	20000c68 	.word	0x20000c68

0800ac78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b08a      	sub	sp, #40	; 0x28
 800ac7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac82:	f000 faff 	bl	800b284 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac86:	4b1c      	ldr	r3, [pc, #112]	; (800acf8 <xTimerCreateTimerTask+0x80>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d021      	beq.n	800acd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac92:	2300      	movs	r3, #0
 800ac94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac96:	1d3a      	adds	r2, r7, #4
 800ac98:	f107 0108 	add.w	r1, r7, #8
 800ac9c:	f107 030c 	add.w	r3, r7, #12
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7fe faa3 	bl	80091ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aca6:	6879      	ldr	r1, [r7, #4]
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	9202      	str	r2, [sp, #8]
 800acae:	9301      	str	r3, [sp, #4]
 800acb0:	2302      	movs	r3, #2
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	2300      	movs	r3, #0
 800acb6:	460a      	mov	r2, r1
 800acb8:	4910      	ldr	r1, [pc, #64]	; (800acfc <xTimerCreateTimerTask+0x84>)
 800acba:	4811      	ldr	r0, [pc, #68]	; (800ad00 <xTimerCreateTimerTask+0x88>)
 800acbc:	f7ff f8f6 	bl	8009eac <xTaskCreateStatic>
 800acc0:	4602      	mov	r2, r0
 800acc2:	4b10      	ldr	r3, [pc, #64]	; (800ad04 <xTimerCreateTimerTask+0x8c>)
 800acc4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800acc6:	4b0f      	ldr	r3, [pc, #60]	; (800ad04 <xTimerCreateTimerTask+0x8c>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d001      	beq.n	800acd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800acce:	2301      	movs	r3, #1
 800acd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d109      	bne.n	800acec <xTimerCreateTimerTask+0x74>
 800acd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acdc:	f383 8811 	msr	BASEPRI, r3
 800ace0:	f3bf 8f6f 	isb	sy
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	613b      	str	r3, [r7, #16]
 800acea:	e7fe      	b.n	800acea <xTimerCreateTimerTask+0x72>
	return xReturn;
 800acec:	697b      	ldr	r3, [r7, #20]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3718      	adds	r7, #24
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	20000ca4 	.word	0x20000ca4
 800acfc:	0800c404 	.word	0x0800c404
 800ad00:	0800ae39 	.word	0x0800ae39
 800ad04:	20000ca8 	.word	0x20000ca8

0800ad08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08a      	sub	sp, #40	; 0x28
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
 800ad14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad16:	2300      	movs	r3, #0
 800ad18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d109      	bne.n	800ad34 <xTimerGenericCommand+0x2c>
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	623b      	str	r3, [r7, #32]
 800ad32:	e7fe      	b.n	800ad32 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad34:	4b19      	ldr	r3, [pc, #100]	; (800ad9c <xTimerGenericCommand+0x94>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d02a      	beq.n	800ad92 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	2b05      	cmp	r3, #5
 800ad4c:	dc18      	bgt.n	800ad80 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad4e:	f7ff feb5 	bl	800aabc <xTaskGetSchedulerState>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	d109      	bne.n	800ad6c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad58:	4b10      	ldr	r3, [pc, #64]	; (800ad9c <xTimerGenericCommand+0x94>)
 800ad5a:	6818      	ldr	r0, [r3, #0]
 800ad5c:	f107 0110 	add.w	r1, r7, #16
 800ad60:	2300      	movs	r3, #0
 800ad62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad64:	f7fe fc4e 	bl	8009604 <xQueueGenericSend>
 800ad68:	6278      	str	r0, [r7, #36]	; 0x24
 800ad6a:	e012      	b.n	800ad92 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad6c:	4b0b      	ldr	r3, [pc, #44]	; (800ad9c <xTimerGenericCommand+0x94>)
 800ad6e:	6818      	ldr	r0, [r3, #0]
 800ad70:	f107 0110 	add.w	r1, r7, #16
 800ad74:	2300      	movs	r3, #0
 800ad76:	2200      	movs	r2, #0
 800ad78:	f7fe fc44 	bl	8009604 <xQueueGenericSend>
 800ad7c:	6278      	str	r0, [r7, #36]	; 0x24
 800ad7e:	e008      	b.n	800ad92 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad80:	4b06      	ldr	r3, [pc, #24]	; (800ad9c <xTimerGenericCommand+0x94>)
 800ad82:	6818      	ldr	r0, [r3, #0]
 800ad84:	f107 0110 	add.w	r1, r7, #16
 800ad88:	2300      	movs	r3, #0
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	f7fe fd34 	bl	80097f8 <xQueueGenericSendFromISR>
 800ad90:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3728      	adds	r7, #40	; 0x28
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	20000ca4 	.word	0x20000ca4

0800ada0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b088      	sub	sp, #32
 800ada4:	af02      	add	r7, sp, #8
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adaa:	4b22      	ldr	r3, [pc, #136]	; (800ae34 <prvProcessExpiredTimer+0x94>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	3304      	adds	r3, #4
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fe fabb 	bl	8009334 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adc4:	f003 0304 	and.w	r3, r3, #4
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d021      	beq.n	800ae10 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	699a      	ldr	r2, [r3, #24]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	18d1      	adds	r1, r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	6978      	ldr	r0, [r7, #20]
 800adda:	f000 f8d1 	bl	800af80 <prvInsertTimerInActiveList>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d01e      	beq.n	800ae22 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ade4:	2300      	movs	r3, #0
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	2300      	movs	r3, #0
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	2100      	movs	r1, #0
 800adee:	6978      	ldr	r0, [r7, #20]
 800adf0:	f7ff ff8a 	bl	800ad08 <xTimerGenericCommand>
 800adf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d112      	bne.n	800ae22 <prvProcessExpiredTimer+0x82>
 800adfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	60fb      	str	r3, [r7, #12]
 800ae0e:	e7fe      	b.n	800ae0e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae16:	f023 0301 	bic.w	r3, r3, #1
 800ae1a:	b2da      	uxtb	r2, r3
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	6978      	ldr	r0, [r7, #20]
 800ae28:	4798      	blx	r3
}
 800ae2a:	bf00      	nop
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	20000c9c 	.word	0x20000c9c

0800ae38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae40:	f107 0308 	add.w	r3, r7, #8
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 f857 	bl	800aef8 <prvGetNextExpireTime>
 800ae4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f000 f803 	bl	800ae5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae56:	f000 f8d5 	bl	800b004 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae5a:	e7f1      	b.n	800ae40 <prvTimerTask+0x8>

0800ae5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae66:	f7ff fa57 	bl	800a318 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae6a:	f107 0308 	add.w	r3, r7, #8
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f000 f866 	bl	800af40 <prvSampleTimeNow>
 800ae74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d130      	bne.n	800aede <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d10a      	bne.n	800ae98 <prvProcessTimerOrBlockTask+0x3c>
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d806      	bhi.n	800ae98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae8a:	f7ff fa53 	bl	800a334 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae8e:	68f9      	ldr	r1, [r7, #12]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f7ff ff85 	bl	800ada0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae96:	e024      	b.n	800aee2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d008      	beq.n	800aeb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae9e:	4b13      	ldr	r3, [pc, #76]	; (800aeec <prvProcessTimerOrBlockTask+0x90>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <prvProcessTimerOrBlockTask+0x50>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e000      	b.n	800aeae <prvProcessTimerOrBlockTask+0x52>
 800aeac:	2300      	movs	r3, #0
 800aeae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aeb0:	4b0f      	ldr	r3, [pc, #60]	; (800aef0 <prvProcessTimerOrBlockTask+0x94>)
 800aeb2:	6818      	ldr	r0, [r3, #0]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	683a      	ldr	r2, [r7, #0]
 800aebc:	4619      	mov	r1, r3
 800aebe:	f7fe ffc1 	bl	8009e44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aec2:	f7ff fa37 	bl	800a334 <xTaskResumeAll>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d10a      	bne.n	800aee2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aecc:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <prvProcessTimerOrBlockTask+0x98>)
 800aece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aed2:	601a      	str	r2, [r3, #0]
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	f3bf 8f6f 	isb	sy
}
 800aedc:	e001      	b.n	800aee2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aede:	f7ff fa29 	bl	800a334 <xTaskResumeAll>
}
 800aee2:	bf00      	nop
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	20000ca0 	.word	0x20000ca0
 800aef0:	20000ca4 	.word	0x20000ca4
 800aef4:	e000ed04 	.word	0xe000ed04

0800aef8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aef8:	b480      	push	{r7}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af00:	4b0e      	ldr	r3, [pc, #56]	; (800af3c <prvGetNextExpireTime+0x44>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d101      	bne.n	800af0e <prvGetNextExpireTime+0x16>
 800af0a:	2201      	movs	r2, #1
 800af0c:	e000      	b.n	800af10 <prvGetNextExpireTime+0x18>
 800af0e:	2200      	movs	r2, #0
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d105      	bne.n	800af28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af1c:	4b07      	ldr	r3, [pc, #28]	; (800af3c <prvGetNextExpireTime+0x44>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	60fb      	str	r3, [r7, #12]
 800af26:	e001      	b.n	800af2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800af28:	2300      	movs	r3, #0
 800af2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800af2c:	68fb      	ldr	r3, [r7, #12]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3714      	adds	r7, #20
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	20000c9c 	.word	0x20000c9c

0800af40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af48:	f7ff fa90 	bl	800a46c <xTaskGetTickCount>
 800af4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af4e:	4b0b      	ldr	r3, [pc, #44]	; (800af7c <prvSampleTimeNow+0x3c>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	429a      	cmp	r2, r3
 800af56:	d205      	bcs.n	800af64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af58:	f000 f930 	bl	800b1bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	e002      	b.n	800af6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af6a:	4a04      	ldr	r2, [pc, #16]	; (800af7c <prvSampleTimeNow+0x3c>)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af70:	68fb      	ldr	r3, [r7, #12]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	20000cac 	.word	0x20000cac

0800af80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
 800af8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af8e:	2300      	movs	r3, #0
 800af90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d812      	bhi.n	800afcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	1ad2      	subs	r2, r2, r3
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	699b      	ldr	r3, [r3, #24]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d302      	bcc.n	800afba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800afb4:	2301      	movs	r3, #1
 800afb6:	617b      	str	r3, [r7, #20]
 800afb8:	e01b      	b.n	800aff2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800afba:	4b10      	ldr	r3, [pc, #64]	; (800affc <prvInsertTimerInActiveList+0x7c>)
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	3304      	adds	r3, #4
 800afc2:	4619      	mov	r1, r3
 800afc4:	4610      	mov	r0, r2
 800afc6:	f7fe f97c 	bl	80092c2 <vListInsert>
 800afca:	e012      	b.n	800aff2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d206      	bcs.n	800afe2 <prvInsertTimerInActiveList+0x62>
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d302      	bcc.n	800afe2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800afdc:	2301      	movs	r3, #1
 800afde:	617b      	str	r3, [r7, #20]
 800afe0:	e007      	b.n	800aff2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afe2:	4b07      	ldr	r3, [pc, #28]	; (800b000 <prvInsertTimerInActiveList+0x80>)
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	3304      	adds	r3, #4
 800afea:	4619      	mov	r1, r3
 800afec:	4610      	mov	r0, r2
 800afee:	f7fe f968 	bl	80092c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aff2:	697b      	ldr	r3, [r7, #20]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3718      	adds	r7, #24
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20000ca0 	.word	0x20000ca0
 800b000:	20000c9c 	.word	0x20000c9c

0800b004 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08e      	sub	sp, #56	; 0x38
 800b008:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b00a:	e0c6      	b.n	800b19a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	da17      	bge.n	800b042 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b012:	1d3b      	adds	r3, r7, #4
 800b014:	3304      	adds	r3, #4
 800b016:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d109      	bne.n	800b032 <prvProcessReceivedCommands+0x2e>
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	61fb      	str	r3, [r7, #28]
 800b030:	e7fe      	b.n	800b030 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b038:	6850      	ldr	r0, [r2, #4]
 800b03a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b03c:	6892      	ldr	r2, [r2, #8]
 800b03e:	4611      	mov	r1, r2
 800b040:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	f2c0 80a7 	blt.w	800b198 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b050:	695b      	ldr	r3, [r3, #20]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d004      	beq.n	800b060 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b058:	3304      	adds	r3, #4
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fe f96a 	bl	8009334 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b060:	463b      	mov	r3, r7
 800b062:	4618      	mov	r0, r3
 800b064:	f7ff ff6c 	bl	800af40 <prvSampleTimeNow>
 800b068:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2b09      	cmp	r3, #9
 800b06e:	f200 8094 	bhi.w	800b19a <prvProcessReceivedCommands+0x196>
 800b072:	a201      	add	r2, pc, #4	; (adr r2, 800b078 <prvProcessReceivedCommands+0x74>)
 800b074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b078:	0800b0a1 	.word	0x0800b0a1
 800b07c:	0800b0a1 	.word	0x0800b0a1
 800b080:	0800b0a1 	.word	0x0800b0a1
 800b084:	0800b113 	.word	0x0800b113
 800b088:	0800b127 	.word	0x0800b127
 800b08c:	0800b16f 	.word	0x0800b16f
 800b090:	0800b0a1 	.word	0x0800b0a1
 800b094:	0800b0a1 	.word	0x0800b0a1
 800b098:	0800b113 	.word	0x0800b113
 800b09c:	0800b127 	.word	0x0800b127
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0a6:	f043 0301 	orr.w	r3, r3, #1
 800b0aa:	b2da      	uxtb	r2, r3
 800b0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b0b2:	68ba      	ldr	r2, [r7, #8]
 800b0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b6:	699b      	ldr	r3, [r3, #24]
 800b0b8:	18d1      	adds	r1, r2, r3
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0c0:	f7ff ff5e 	bl	800af80 <prvInsertTimerInActiveList>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d067      	beq.n	800b19a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0d8:	f003 0304 	and.w	r3, r3, #4
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d05c      	beq.n	800b19a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b0e0:	68ba      	ldr	r2, [r7, #8]
 800b0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e4:	699b      	ldr	r3, [r3, #24]
 800b0e6:	441a      	add	r2, r3
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0f2:	f7ff fe09 	bl	800ad08 <xTimerGenericCommand>
 800b0f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b0f8:	6a3b      	ldr	r3, [r7, #32]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d14d      	bne.n	800b19a <prvProcessReceivedCommands+0x196>
 800b0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	61bb      	str	r3, [r7, #24]
 800b110:	e7fe      	b.n	800b110 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b118:	f023 0301 	bic.w	r3, r3, #1
 800b11c:	b2da      	uxtb	r2, r3
 800b11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b120:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b124:	e039      	b.n	800b19a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b12c:	f043 0301 	orr.w	r3, r3, #1
 800b130:	b2da      	uxtb	r2, r3
 800b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b134:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b138:	68ba      	ldr	r2, [r7, #8]
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	699b      	ldr	r3, [r3, #24]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d109      	bne.n	800b15a <prvProcessReceivedCommands+0x156>
 800b146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14a:	f383 8811 	msr	BASEPRI, r3
 800b14e:	f3bf 8f6f 	isb	sy
 800b152:	f3bf 8f4f 	dsb	sy
 800b156:	617b      	str	r3, [r7, #20]
 800b158:	e7fe      	b.n	800b158 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15c:	699a      	ldr	r2, [r3, #24]
 800b15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b160:	18d1      	adds	r1, r2, r3
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b168:	f7ff ff0a 	bl	800af80 <prvInsertTimerInActiveList>
					break;
 800b16c:	e015      	b.n	800b19a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b174:	f003 0302 	and.w	r3, r3, #2
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d103      	bne.n	800b184 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800b17c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b17e:	f000 fbc1 	bl	800b904 <vPortFree>
 800b182:	e00a      	b.n	800b19a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b18a:	f023 0301 	bic.w	r3, r3, #1
 800b18e:	b2da      	uxtb	r2, r3
 800b190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b196:	e000      	b.n	800b19a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b198:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b19a:	4b07      	ldr	r3, [pc, #28]	; (800b1b8 <prvProcessReceivedCommands+0x1b4>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	1d39      	adds	r1, r7, #4
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fe fbbc 	bl	8009920 <xQueueReceive>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f47f af2e 	bne.w	800b00c <prvProcessReceivedCommands+0x8>
	}
}
 800b1b0:	bf00      	nop
 800b1b2:	3730      	adds	r7, #48	; 0x30
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	20000ca4 	.word	0x20000ca4

0800b1bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b088      	sub	sp, #32
 800b1c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b1c2:	e047      	b.n	800b254 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1c4:	4b2d      	ldr	r3, [pc, #180]	; (800b27c <prvSwitchTimerLists+0xc0>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1ce:	4b2b      	ldr	r3, [pc, #172]	; (800b27c <prvSwitchTimerLists+0xc0>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	3304      	adds	r3, #4
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7fe f8a9 	bl	8009334 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6a1b      	ldr	r3, [r3, #32]
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1f0:	f003 0304 	and.w	r3, r3, #4
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d02d      	beq.n	800b254 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	699b      	ldr	r3, [r3, #24]
 800b1fc:	693a      	ldr	r2, [r7, #16]
 800b1fe:	4413      	add	r3, r2
 800b200:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	429a      	cmp	r2, r3
 800b208:	d90e      	bls.n	800b228 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b216:	4b19      	ldr	r3, [pc, #100]	; (800b27c <prvSwitchTimerLists+0xc0>)
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	3304      	adds	r3, #4
 800b21e:	4619      	mov	r1, r3
 800b220:	4610      	mov	r0, r2
 800b222:	f7fe f84e 	bl	80092c2 <vListInsert>
 800b226:	e015      	b.n	800b254 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b228:	2300      	movs	r3, #0
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	2300      	movs	r3, #0
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	2100      	movs	r1, #0
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f7ff fd68 	bl	800ad08 <xTimerGenericCommand>
 800b238:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d109      	bne.n	800b254 <prvSwitchTimerLists+0x98>
 800b240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	603b      	str	r3, [r7, #0]
 800b252:	e7fe      	b.n	800b252 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b254:	4b09      	ldr	r3, [pc, #36]	; (800b27c <prvSwitchTimerLists+0xc0>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1b2      	bne.n	800b1c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b25e:	4b07      	ldr	r3, [pc, #28]	; (800b27c <prvSwitchTimerLists+0xc0>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b264:	4b06      	ldr	r3, [pc, #24]	; (800b280 <prvSwitchTimerLists+0xc4>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a04      	ldr	r2, [pc, #16]	; (800b27c <prvSwitchTimerLists+0xc0>)
 800b26a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b26c:	4a04      	ldr	r2, [pc, #16]	; (800b280 <prvSwitchTimerLists+0xc4>)
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	6013      	str	r3, [r2, #0]
}
 800b272:	bf00      	nop
 800b274:	3718      	adds	r7, #24
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	20000c9c 	.word	0x20000c9c
 800b280:	20000ca0 	.word	0x20000ca0

0800b284 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b28a:	f000 f95f 	bl	800b54c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b28e:	4b15      	ldr	r3, [pc, #84]	; (800b2e4 <prvCheckForValidListAndQueue+0x60>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d120      	bne.n	800b2d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b296:	4814      	ldr	r0, [pc, #80]	; (800b2e8 <prvCheckForValidListAndQueue+0x64>)
 800b298:	f7fd ffc2 	bl	8009220 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b29c:	4813      	ldr	r0, [pc, #76]	; (800b2ec <prvCheckForValidListAndQueue+0x68>)
 800b29e:	f7fd ffbf 	bl	8009220 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b2a2:	4b13      	ldr	r3, [pc, #76]	; (800b2f0 <prvCheckForValidListAndQueue+0x6c>)
 800b2a4:	4a10      	ldr	r2, [pc, #64]	; (800b2e8 <prvCheckForValidListAndQueue+0x64>)
 800b2a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b2a8:	4b12      	ldr	r3, [pc, #72]	; (800b2f4 <prvCheckForValidListAndQueue+0x70>)
 800b2aa:	4a10      	ldr	r2, [pc, #64]	; (800b2ec <prvCheckForValidListAndQueue+0x68>)
 800b2ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	4b11      	ldr	r3, [pc, #68]	; (800b2f8 <prvCheckForValidListAndQueue+0x74>)
 800b2b4:	4a11      	ldr	r2, [pc, #68]	; (800b2fc <prvCheckForValidListAndQueue+0x78>)
 800b2b6:	2110      	movs	r1, #16
 800b2b8:	200a      	movs	r0, #10
 800b2ba:	f7fe f8cd 	bl	8009458 <xQueueGenericCreateStatic>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	4b08      	ldr	r3, [pc, #32]	; (800b2e4 <prvCheckForValidListAndQueue+0x60>)
 800b2c2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b2c4:	4b07      	ldr	r3, [pc, #28]	; (800b2e4 <prvCheckForValidListAndQueue+0x60>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d005      	beq.n	800b2d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b2cc:	4b05      	ldr	r3, [pc, #20]	; (800b2e4 <prvCheckForValidListAndQueue+0x60>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	490b      	ldr	r1, [pc, #44]	; (800b300 <prvCheckForValidListAndQueue+0x7c>)
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7fe fd8e 	bl	8009df4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2d8:	f000 f966 	bl	800b5a8 <vPortExitCritical>
}
 800b2dc:	bf00      	nop
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20000ca4 	.word	0x20000ca4
 800b2e8:	20000c74 	.word	0x20000c74
 800b2ec:	20000c88 	.word	0x20000c88
 800b2f0:	20000c9c 	.word	0x20000c9c
 800b2f4:	20000ca0 	.word	0x20000ca0
 800b2f8:	20000d50 	.word	0x20000d50
 800b2fc:	20000cb0 	.word	0x20000cb0
 800b300:	0800c40c 	.word	0x0800c40c

0800b304 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	3b04      	subs	r3, #4
 800b314:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b31c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	3b04      	subs	r3, #4
 800b322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	f023 0201 	bic.w	r2, r3, #1
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	3b04      	subs	r3, #4
 800b332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b334:	4a0c      	ldr	r2, [pc, #48]	; (800b368 <pxPortInitialiseStack+0x64>)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	3b14      	subs	r3, #20
 800b33e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3b04      	subs	r3, #4
 800b34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f06f 0202 	mvn.w	r2, #2
 800b352:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	3b20      	subs	r3, #32
 800b358:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b35a:	68fb      	ldr	r3, [r7, #12]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3714      	adds	r7, #20
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr
 800b368:	0800b36d 	.word	0x0800b36d

0800b36c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b376:	4b11      	ldr	r3, [pc, #68]	; (800b3bc <prvTaskExitError+0x50>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b37e:	d009      	beq.n	800b394 <prvTaskExitError+0x28>
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	60fb      	str	r3, [r7, #12]
 800b392:	e7fe      	b.n	800b392 <prvTaskExitError+0x26>
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3a6:	bf00      	nop
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d0fc      	beq.n	800b3a8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b3ae:	bf00      	nop
 800b3b0:	3714      	adds	r7, #20
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	2000002c 	.word	0x2000002c

0800b3c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3c0:	4b07      	ldr	r3, [pc, #28]	; (800b3e0 <pxCurrentTCBConst2>)
 800b3c2:	6819      	ldr	r1, [r3, #0]
 800b3c4:	6808      	ldr	r0, [r1, #0]
 800b3c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ca:	f380 8809 	msr	PSP, r0
 800b3ce:	f3bf 8f6f 	isb	sy
 800b3d2:	f04f 0000 	mov.w	r0, #0
 800b3d6:	f380 8811 	msr	BASEPRI, r0
 800b3da:	4770      	bx	lr
 800b3dc:	f3af 8000 	nop.w

0800b3e0 <pxCurrentTCBConst2>:
 800b3e0:	20000774 	.word	0x20000774
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3e4:	bf00      	nop
 800b3e6:	bf00      	nop

0800b3e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3e8:	4808      	ldr	r0, [pc, #32]	; (800b40c <prvPortStartFirstTask+0x24>)
 800b3ea:	6800      	ldr	r0, [r0, #0]
 800b3ec:	6800      	ldr	r0, [r0, #0]
 800b3ee:	f380 8808 	msr	MSP, r0
 800b3f2:	f04f 0000 	mov.w	r0, #0
 800b3f6:	f380 8814 	msr	CONTROL, r0
 800b3fa:	b662      	cpsie	i
 800b3fc:	b661      	cpsie	f
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	df00      	svc	0
 800b408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b40a:	bf00      	nop
 800b40c:	e000ed08 	.word	0xe000ed08

0800b410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b416:	4b44      	ldr	r3, [pc, #272]	; (800b528 <xPortStartScheduler+0x118>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a44      	ldr	r2, [pc, #272]	; (800b52c <xPortStartScheduler+0x11c>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d109      	bne.n	800b434 <xPortStartScheduler+0x24>
 800b420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b424:	f383 8811 	msr	BASEPRI, r3
 800b428:	f3bf 8f6f 	isb	sy
 800b42c:	f3bf 8f4f 	dsb	sy
 800b430:	613b      	str	r3, [r7, #16]
 800b432:	e7fe      	b.n	800b432 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b434:	4b3c      	ldr	r3, [pc, #240]	; (800b528 <xPortStartScheduler+0x118>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a3d      	ldr	r2, [pc, #244]	; (800b530 <xPortStartScheduler+0x120>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d109      	bne.n	800b452 <xPortStartScheduler+0x42>
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	e7fe      	b.n	800b450 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b452:	4b38      	ldr	r3, [pc, #224]	; (800b534 <xPortStartScheduler+0x124>)
 800b454:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	22ff      	movs	r2, #255	; 0xff
 800b462:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b46c:	78fb      	ldrb	r3, [r7, #3]
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b474:	b2da      	uxtb	r2, r3
 800b476:	4b30      	ldr	r3, [pc, #192]	; (800b538 <xPortStartScheduler+0x128>)
 800b478:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b47a:	4b30      	ldr	r3, [pc, #192]	; (800b53c <xPortStartScheduler+0x12c>)
 800b47c:	2207      	movs	r2, #7
 800b47e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b480:	e009      	b.n	800b496 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b482:	4b2e      	ldr	r3, [pc, #184]	; (800b53c <xPortStartScheduler+0x12c>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	3b01      	subs	r3, #1
 800b488:	4a2c      	ldr	r2, [pc, #176]	; (800b53c <xPortStartScheduler+0x12c>)
 800b48a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b48c:	78fb      	ldrb	r3, [r7, #3]
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	005b      	lsls	r3, r3, #1
 800b492:	b2db      	uxtb	r3, r3
 800b494:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b496:	78fb      	ldrb	r3, [r7, #3]
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b49e:	2b80      	cmp	r3, #128	; 0x80
 800b4a0:	d0ef      	beq.n	800b482 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b4a2:	4b26      	ldr	r3, [pc, #152]	; (800b53c <xPortStartScheduler+0x12c>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f1c3 0307 	rsb	r3, r3, #7
 800b4aa:	2b04      	cmp	r3, #4
 800b4ac:	d009      	beq.n	800b4c2 <xPortStartScheduler+0xb2>
 800b4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	60bb      	str	r3, [r7, #8]
 800b4c0:	e7fe      	b.n	800b4c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4c2:	4b1e      	ldr	r3, [pc, #120]	; (800b53c <xPortStartScheduler+0x12c>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	021b      	lsls	r3, r3, #8
 800b4c8:	4a1c      	ldr	r2, [pc, #112]	; (800b53c <xPortStartScheduler+0x12c>)
 800b4ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4cc:	4b1b      	ldr	r3, [pc, #108]	; (800b53c <xPortStartScheduler+0x12c>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4d4:	4a19      	ldr	r2, [pc, #100]	; (800b53c <xPortStartScheduler+0x12c>)
 800b4d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	b2da      	uxtb	r2, r3
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4e0:	4b17      	ldr	r3, [pc, #92]	; (800b540 <xPortStartScheduler+0x130>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a16      	ldr	r2, [pc, #88]	; (800b540 <xPortStartScheduler+0x130>)
 800b4e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4ec:	4b14      	ldr	r3, [pc, #80]	; (800b540 <xPortStartScheduler+0x130>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a13      	ldr	r2, [pc, #76]	; (800b540 <xPortStartScheduler+0x130>)
 800b4f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b4f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4f8:	f000 f8d6 	bl	800b6a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4fc:	4b11      	ldr	r3, [pc, #68]	; (800b544 <xPortStartScheduler+0x134>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b502:	f000 f8f5 	bl	800b6f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b506:	4b10      	ldr	r3, [pc, #64]	; (800b548 <xPortStartScheduler+0x138>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a0f      	ldr	r2, [pc, #60]	; (800b548 <xPortStartScheduler+0x138>)
 800b50c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b510:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b512:	f7ff ff69 	bl	800b3e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b516:	f7ff f871 	bl	800a5fc <vTaskSwitchContext>
	prvTaskExitError();
 800b51a:	f7ff ff27 	bl	800b36c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3718      	adds	r7, #24
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	e000ed00 	.word	0xe000ed00
 800b52c:	410fc271 	.word	0x410fc271
 800b530:	410fc270 	.word	0x410fc270
 800b534:	e000e400 	.word	0xe000e400
 800b538:	20000da0 	.word	0x20000da0
 800b53c:	20000da4 	.word	0x20000da4
 800b540:	e000ed20 	.word	0xe000ed20
 800b544:	2000002c 	.word	0x2000002c
 800b548:	e000ef34 	.word	0xe000ef34

0800b54c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b564:	4b0e      	ldr	r3, [pc, #56]	; (800b5a0 <vPortEnterCritical+0x54>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	3301      	adds	r3, #1
 800b56a:	4a0d      	ldr	r2, [pc, #52]	; (800b5a0 <vPortEnterCritical+0x54>)
 800b56c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b56e:	4b0c      	ldr	r3, [pc, #48]	; (800b5a0 <vPortEnterCritical+0x54>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b01      	cmp	r3, #1
 800b574:	d10e      	bne.n	800b594 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b576:	4b0b      	ldr	r3, [pc, #44]	; (800b5a4 <vPortEnterCritical+0x58>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d009      	beq.n	800b594 <vPortEnterCritical+0x48>
 800b580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	603b      	str	r3, [r7, #0]
 800b592:	e7fe      	b.n	800b592 <vPortEnterCritical+0x46>
	}
}
 800b594:	bf00      	nop
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	2000002c 	.word	0x2000002c
 800b5a4:	e000ed04 	.word	0xe000ed04

0800b5a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b5ae:	4b11      	ldr	r3, [pc, #68]	; (800b5f4 <vPortExitCritical+0x4c>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d109      	bne.n	800b5ca <vPortExitCritical+0x22>
 800b5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	607b      	str	r3, [r7, #4]
 800b5c8:	e7fe      	b.n	800b5c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b5ca:	4b0a      	ldr	r3, [pc, #40]	; (800b5f4 <vPortExitCritical+0x4c>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	4a08      	ldr	r2, [pc, #32]	; (800b5f4 <vPortExitCritical+0x4c>)
 800b5d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5d4:	4b07      	ldr	r3, [pc, #28]	; (800b5f4 <vPortExitCritical+0x4c>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d104      	bne.n	800b5e6 <vPortExitCritical+0x3e>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5e6:	bf00      	nop
 800b5e8:	370c      	adds	r7, #12
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	2000002c 	.word	0x2000002c
	...

0800b600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b600:	f3ef 8009 	mrs	r0, PSP
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	4b15      	ldr	r3, [pc, #84]	; (800b660 <pxCurrentTCBConst>)
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	f01e 0f10 	tst.w	lr, #16
 800b610:	bf08      	it	eq
 800b612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61a:	6010      	str	r0, [r2, #0]
 800b61c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b620:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b624:	f380 8811 	msr	BASEPRI, r0
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	f3bf 8f6f 	isb	sy
 800b630:	f7fe ffe4 	bl	800a5fc <vTaskSwitchContext>
 800b634:	f04f 0000 	mov.w	r0, #0
 800b638:	f380 8811 	msr	BASEPRI, r0
 800b63c:	bc09      	pop	{r0, r3}
 800b63e:	6819      	ldr	r1, [r3, #0]
 800b640:	6808      	ldr	r0, [r1, #0]
 800b642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b646:	f01e 0f10 	tst.w	lr, #16
 800b64a:	bf08      	it	eq
 800b64c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b650:	f380 8809 	msr	PSP, r0
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	f3af 8000 	nop.w

0800b660 <pxCurrentTCBConst>:
 800b660:	20000774 	.word	0x20000774
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b664:	bf00      	nop
 800b666:	bf00      	nop

0800b668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b680:	f7fe ff04 	bl	800a48c <xTaskIncrementTick>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d003      	beq.n	800b692 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b68a:	4b06      	ldr	r3, [pc, #24]	; (800b6a4 <SysTick_Handler+0x3c>)
 800b68c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b690:	601a      	str	r2, [r3, #0]
 800b692:	2300      	movs	r3, #0
 800b694:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b69c:	bf00      	nop
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	e000ed04 	.word	0xe000ed04

0800b6a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b6ac:	4b0b      	ldr	r3, [pc, #44]	; (800b6dc <vPortSetupTimerInterrupt+0x34>)
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6b2:	4b0b      	ldr	r3, [pc, #44]	; (800b6e0 <vPortSetupTimerInterrupt+0x38>)
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b6b8:	4b0a      	ldr	r3, [pc, #40]	; (800b6e4 <vPortSetupTimerInterrupt+0x3c>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a0a      	ldr	r2, [pc, #40]	; (800b6e8 <vPortSetupTimerInterrupt+0x40>)
 800b6be:	fba2 2303 	umull	r2, r3, r2, r3
 800b6c2:	099b      	lsrs	r3, r3, #6
 800b6c4:	4a09      	ldr	r2, [pc, #36]	; (800b6ec <vPortSetupTimerInterrupt+0x44>)
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b6ca:	4b04      	ldr	r3, [pc, #16]	; (800b6dc <vPortSetupTimerInterrupt+0x34>)
 800b6cc:	2207      	movs	r2, #7
 800b6ce:	601a      	str	r2, [r3, #0]
}
 800b6d0:	bf00      	nop
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	e000e010 	.word	0xe000e010
 800b6e0:	e000e018 	.word	0xe000e018
 800b6e4:	20000000 	.word	0x20000000
 800b6e8:	10624dd3 	.word	0x10624dd3
 800b6ec:	e000e014 	.word	0xe000e014

0800b6f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b700 <vPortEnableVFP+0x10>
 800b6f4:	6801      	ldr	r1, [r0, #0]
 800b6f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b6fa:	6001      	str	r1, [r0, #0]
 800b6fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6fe:	bf00      	nop
 800b700:	e000ed88 	.word	0xe000ed88

0800b704 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b70a:	f3ef 8305 	mrs	r3, IPSR
 800b70e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2b0f      	cmp	r3, #15
 800b714:	d913      	bls.n	800b73e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b716:	4a16      	ldr	r2, [pc, #88]	; (800b770 <vPortValidateInterruptPriority+0x6c>)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	4413      	add	r3, r2
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b720:	4b14      	ldr	r3, [pc, #80]	; (800b774 <vPortValidateInterruptPriority+0x70>)
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	7afa      	ldrb	r2, [r7, #11]
 800b726:	429a      	cmp	r2, r3
 800b728:	d209      	bcs.n	800b73e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	607b      	str	r3, [r7, #4]
 800b73c:	e7fe      	b.n	800b73c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b73e:	4b0e      	ldr	r3, [pc, #56]	; (800b778 <vPortValidateInterruptPriority+0x74>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b746:	4b0d      	ldr	r3, [pc, #52]	; (800b77c <vPortValidateInterruptPriority+0x78>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d909      	bls.n	800b762 <vPortValidateInterruptPriority+0x5e>
 800b74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	603b      	str	r3, [r7, #0]
 800b760:	e7fe      	b.n	800b760 <vPortValidateInterruptPriority+0x5c>
	}
 800b762:	bf00      	nop
 800b764:	3714      	adds	r7, #20
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	e000e3f0 	.word	0xe000e3f0
 800b774:	20000da0 	.word	0x20000da0
 800b778:	e000ed0c 	.word	0xe000ed0c
 800b77c:	20000da4 	.word	0x20000da4

0800b780 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b08a      	sub	sp, #40	; 0x28
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b788:	2300      	movs	r3, #0
 800b78a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b78c:	f7fe fdc4 	bl	800a318 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b790:	4b57      	ldr	r3, [pc, #348]	; (800b8f0 <pvPortMalloc+0x170>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d101      	bne.n	800b79c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b798:	f000 f90c 	bl	800b9b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b79c:	4b55      	ldr	r3, [pc, #340]	; (800b8f4 <pvPortMalloc+0x174>)
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f040 808c 	bne.w	800b8c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d01c      	beq.n	800b7ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b7b0:	2208      	movs	r2, #8
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f003 0307 	and.w	r3, r3, #7
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d013      	beq.n	800b7ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f023 0307 	bic.w	r3, r3, #7
 800b7c8:	3308      	adds	r3, #8
 800b7ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f003 0307 	and.w	r3, r3, #7
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d009      	beq.n	800b7ea <pvPortMalloc+0x6a>
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	617b      	str	r3, [r7, #20]
 800b7e8:	e7fe      	b.n	800b7e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d068      	beq.n	800b8c2 <pvPortMalloc+0x142>
 800b7f0:	4b41      	ldr	r3, [pc, #260]	; (800b8f8 <pvPortMalloc+0x178>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d863      	bhi.n	800b8c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7fa:	4b40      	ldr	r3, [pc, #256]	; (800b8fc <pvPortMalloc+0x17c>)
 800b7fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7fe:	4b3f      	ldr	r3, [pc, #252]	; (800b8fc <pvPortMalloc+0x17c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b804:	e004      	b.n	800b810 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b808:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	429a      	cmp	r2, r3
 800b818:	d903      	bls.n	800b822 <pvPortMalloc+0xa2>
 800b81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d1f1      	bne.n	800b806 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b822:	4b33      	ldr	r3, [pc, #204]	; (800b8f0 <pvPortMalloc+0x170>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b828:	429a      	cmp	r2, r3
 800b82a:	d04a      	beq.n	800b8c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2208      	movs	r2, #8
 800b832:	4413      	add	r3, r2
 800b834:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	685a      	ldr	r2, [r3, #4]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	1ad2      	subs	r2, r2, r3
 800b846:	2308      	movs	r3, #8
 800b848:	005b      	lsls	r3, r3, #1
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d91e      	bls.n	800b88c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b84e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4413      	add	r3, r2
 800b854:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	f003 0307 	and.w	r3, r3, #7
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d009      	beq.n	800b874 <pvPortMalloc+0xf4>
 800b860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b864:	f383 8811 	msr	BASEPRI, r3
 800b868:	f3bf 8f6f 	isb	sy
 800b86c:	f3bf 8f4f 	dsb	sy
 800b870:	613b      	str	r3, [r7, #16]
 800b872:	e7fe      	b.n	800b872 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	685a      	ldr	r2, [r3, #4]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	1ad2      	subs	r2, r2, r3
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b886:	69b8      	ldr	r0, [r7, #24]
 800b888:	f000 f8f6 	bl	800ba78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b88c:	4b1a      	ldr	r3, [pc, #104]	; (800b8f8 <pvPortMalloc+0x178>)
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	4a18      	ldr	r2, [pc, #96]	; (800b8f8 <pvPortMalloc+0x178>)
 800b898:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b89a:	4b17      	ldr	r3, [pc, #92]	; (800b8f8 <pvPortMalloc+0x178>)
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	4b18      	ldr	r3, [pc, #96]	; (800b900 <pvPortMalloc+0x180>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d203      	bcs.n	800b8ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8a6:	4b14      	ldr	r3, [pc, #80]	; (800b8f8 <pvPortMalloc+0x178>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a15      	ldr	r2, [pc, #84]	; (800b900 <pvPortMalloc+0x180>)
 800b8ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b0:	685a      	ldr	r2, [r3, #4]
 800b8b2:	4b10      	ldr	r3, [pc, #64]	; (800b8f4 <pvPortMalloc+0x174>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	431a      	orrs	r2, r3
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	2200      	movs	r2, #0
 800b8c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8c2:	f7fe fd37 	bl	800a334 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	f003 0307 	and.w	r3, r3, #7
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d009      	beq.n	800b8e4 <pvPortMalloc+0x164>
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	60fb      	str	r3, [r7, #12]
 800b8e2:	e7fe      	b.n	800b8e2 <pvPortMalloc+0x162>
	return pvReturn;
 800b8e4:	69fb      	ldr	r3, [r7, #28]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3728      	adds	r7, #40	; 0x28
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	200049b0 	.word	0x200049b0
 800b8f4:	200049bc 	.word	0x200049bc
 800b8f8:	200049b4 	.word	0x200049b4
 800b8fc:	200049a8 	.word	0x200049a8
 800b900:	200049b8 	.word	0x200049b8

0800b904 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b086      	sub	sp, #24
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d046      	beq.n	800b9a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b916:	2308      	movs	r3, #8
 800b918:	425b      	negs	r3, r3
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	4413      	add	r3, r2
 800b91e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	685a      	ldr	r2, [r3, #4]
 800b928:	4b20      	ldr	r3, [pc, #128]	; (800b9ac <vPortFree+0xa8>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4013      	ands	r3, r2
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d109      	bne.n	800b946 <vPortFree+0x42>
 800b932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	60fb      	str	r3, [r7, #12]
 800b944:	e7fe      	b.n	800b944 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d009      	beq.n	800b962 <vPortFree+0x5e>
 800b94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	60bb      	str	r3, [r7, #8]
 800b960:	e7fe      	b.n	800b960 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	4b11      	ldr	r3, [pc, #68]	; (800b9ac <vPortFree+0xa8>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4013      	ands	r3, r2
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d019      	beq.n	800b9a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d115      	bne.n	800b9a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	685a      	ldr	r2, [r3, #4]
 800b97c:	4b0b      	ldr	r3, [pc, #44]	; (800b9ac <vPortFree+0xa8>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	43db      	mvns	r3, r3
 800b982:	401a      	ands	r2, r3
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b988:	f7fe fcc6 	bl	800a318 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	685a      	ldr	r2, [r3, #4]
 800b990:	4b07      	ldr	r3, [pc, #28]	; (800b9b0 <vPortFree+0xac>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4413      	add	r3, r2
 800b996:	4a06      	ldr	r2, [pc, #24]	; (800b9b0 <vPortFree+0xac>)
 800b998:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b99a:	6938      	ldr	r0, [r7, #16]
 800b99c:	f000 f86c 	bl	800ba78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b9a0:	f7fe fcc8 	bl	800a334 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9a4:	bf00      	nop
 800b9a6:	3718      	adds	r7, #24
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	200049bc 	.word	0x200049bc
 800b9b0:	200049b4 	.word	0x200049b4

0800b9b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b9be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9c0:	4b27      	ldr	r3, [pc, #156]	; (800ba60 <prvHeapInit+0xac>)
 800b9c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f003 0307 	and.w	r3, r3, #7
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00c      	beq.n	800b9e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	3307      	adds	r3, #7
 800b9d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f023 0307 	bic.w	r3, r3, #7
 800b9da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	4a1f      	ldr	r2, [pc, #124]	; (800ba60 <prvHeapInit+0xac>)
 800b9e4:	4413      	add	r3, r2
 800b9e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9ec:	4a1d      	ldr	r2, [pc, #116]	; (800ba64 <prvHeapInit+0xb0>)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b9f2:	4b1c      	ldr	r3, [pc, #112]	; (800ba64 <prvHeapInit+0xb0>)
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	68ba      	ldr	r2, [r7, #8]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba00:	2208      	movs	r2, #8
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	1a9b      	subs	r3, r3, r2
 800ba06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f023 0307 	bic.w	r3, r3, #7
 800ba0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	4a15      	ldr	r2, [pc, #84]	; (800ba68 <prvHeapInit+0xb4>)
 800ba14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba16:	4b14      	ldr	r3, [pc, #80]	; (800ba68 <prvHeapInit+0xb4>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba1e:	4b12      	ldr	r3, [pc, #72]	; (800ba68 <prvHeapInit+0xb4>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2200      	movs	r2, #0
 800ba24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	1ad2      	subs	r2, r2, r3
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba34:	4b0c      	ldr	r3, [pc, #48]	; (800ba68 <prvHeapInit+0xb4>)
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	4a0a      	ldr	r2, [pc, #40]	; (800ba6c <prvHeapInit+0xb8>)
 800ba42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	4a09      	ldr	r2, [pc, #36]	; (800ba70 <prvHeapInit+0xbc>)
 800ba4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba4c:	4b09      	ldr	r3, [pc, #36]	; (800ba74 <prvHeapInit+0xc0>)
 800ba4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba52:	601a      	str	r2, [r3, #0]
}
 800ba54:	bf00      	nop
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr
 800ba60:	20000da8 	.word	0x20000da8
 800ba64:	200049a8 	.word	0x200049a8
 800ba68:	200049b0 	.word	0x200049b0
 800ba6c:	200049b8 	.word	0x200049b8
 800ba70:	200049b4 	.word	0x200049b4
 800ba74:	200049bc 	.word	0x200049bc

0800ba78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba80:	4b28      	ldr	r3, [pc, #160]	; (800bb24 <prvInsertBlockIntoFreeList+0xac>)
 800ba82:	60fb      	str	r3, [r7, #12]
 800ba84:	e002      	b.n	800ba8c <prvInsertBlockIntoFreeList+0x14>
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	60fb      	str	r3, [r7, #12]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d8f7      	bhi.n	800ba86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	4413      	add	r3, r2
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d108      	bne.n	800baba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	685a      	ldr	r2, [r3, #4]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	441a      	add	r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	441a      	add	r2, r3
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d118      	bne.n	800bb00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	4b15      	ldr	r3, [pc, #84]	; (800bb28 <prvInsertBlockIntoFreeList+0xb0>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d00d      	beq.n	800baf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	685a      	ldr	r2, [r3, #4]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	441a      	add	r2, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	601a      	str	r2, [r3, #0]
 800baf4:	e008      	b.n	800bb08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800baf6:	4b0c      	ldr	r3, [pc, #48]	; (800bb28 <prvInsertBlockIntoFreeList+0xb0>)
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	601a      	str	r2, [r3, #0]
 800bafe:	e003      	b.n	800bb08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d002      	beq.n	800bb16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb16:	bf00      	nop
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	200049a8 	.word	0x200049a8
 800bb28:	200049b0 	.word	0x200049b0

0800bb2c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bb30:	2201      	movs	r2, #1
 800bb32:	490e      	ldr	r1, [pc, #56]	; (800bb6c <MX_USB_HOST_Init+0x40>)
 800bb34:	480e      	ldr	r0, [pc, #56]	; (800bb70 <MX_USB_HOST_Init+0x44>)
 800bb36:	f7fb fb03 	bl	8007140 <USBH_Init>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d001      	beq.n	800bb44 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bb40:	f7f5 f862 	bl	8000c08 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bb44:	490b      	ldr	r1, [pc, #44]	; (800bb74 <MX_USB_HOST_Init+0x48>)
 800bb46:	480a      	ldr	r0, [pc, #40]	; (800bb70 <MX_USB_HOST_Init+0x44>)
 800bb48:	f7fb fbaa 	bl	80072a0 <USBH_RegisterClass>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d001      	beq.n	800bb56 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bb52:	f7f5 f859 	bl	8000c08 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bb56:	4806      	ldr	r0, [pc, #24]	; (800bb70 <MX_USB_HOST_Init+0x44>)
 800bb58:	f7fb fc2e 	bl	80073b8 <USBH_Start>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d001      	beq.n	800bb66 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bb62:	f7f5 f851 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bb66:	bf00      	nop
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	0800bb79 	.word	0x0800bb79
 800bb70:	20004c34 	.word	0x20004c34
 800bb74:	2000000c 	.word	0x2000000c

0800bb78 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	460b      	mov	r3, r1
 800bb82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bb84:	78fb      	ldrb	r3, [r7, #3]
 800bb86:	3b01      	subs	r3, #1
 800bb88:	2b04      	cmp	r3, #4
 800bb8a:	d819      	bhi.n	800bbc0 <USBH_UserProcess+0x48>
 800bb8c:	a201      	add	r2, pc, #4	; (adr r2, 800bb94 <USBH_UserProcess+0x1c>)
 800bb8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb92:	bf00      	nop
 800bb94:	0800bbc1 	.word	0x0800bbc1
 800bb98:	0800bbb1 	.word	0x0800bbb1
 800bb9c:	0800bbc1 	.word	0x0800bbc1
 800bba0:	0800bbb9 	.word	0x0800bbb9
 800bba4:	0800bba9 	.word	0x0800bba9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bba8:	4b09      	ldr	r3, [pc, #36]	; (800bbd0 <USBH_UserProcess+0x58>)
 800bbaa:	2203      	movs	r2, #3
 800bbac:	701a      	strb	r2, [r3, #0]
  break;
 800bbae:	e008      	b.n	800bbc2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bbb0:	4b07      	ldr	r3, [pc, #28]	; (800bbd0 <USBH_UserProcess+0x58>)
 800bbb2:	2202      	movs	r2, #2
 800bbb4:	701a      	strb	r2, [r3, #0]
  break;
 800bbb6:	e004      	b.n	800bbc2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bbb8:	4b05      	ldr	r3, [pc, #20]	; (800bbd0 <USBH_UserProcess+0x58>)
 800bbba:	2201      	movs	r2, #1
 800bbbc:	701a      	strb	r2, [r3, #0]
  break;
 800bbbe:	e000      	b.n	800bbc2 <USBH_UserProcess+0x4a>

  default:
  break;
 800bbc0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bbc2:	bf00      	nop
 800bbc4:	370c      	adds	r7, #12
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	200049c0 	.word	0x200049c0

0800bbd4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08a      	sub	sp, #40	; 0x28
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbdc:	f107 0314 	add.w	r3, r7, #20
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	605a      	str	r2, [r3, #4]
 800bbe6:	609a      	str	r2, [r3, #8]
 800bbe8:	60da      	str	r2, [r3, #12]
 800bbea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbf4:	d147      	bne.n	800bc86 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	613b      	str	r3, [r7, #16]
 800bbfa:	4b25      	ldr	r3, [pc, #148]	; (800bc90 <HAL_HCD_MspInit+0xbc>)
 800bbfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbfe:	4a24      	ldr	r2, [pc, #144]	; (800bc90 <HAL_HCD_MspInit+0xbc>)
 800bc00:	f043 0301 	orr.w	r3, r3, #1
 800bc04:	6313      	str	r3, [r2, #48]	; 0x30
 800bc06:	4b22      	ldr	r3, [pc, #136]	; (800bc90 <HAL_HCD_MspInit+0xbc>)
 800bc08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc0a:	f003 0301 	and.w	r3, r3, #1
 800bc0e:	613b      	str	r3, [r7, #16]
 800bc10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bc12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bc20:	f107 0314 	add.w	r3, r7, #20
 800bc24:	4619      	mov	r1, r3
 800bc26:	481b      	ldr	r0, [pc, #108]	; (800bc94 <HAL_HCD_MspInit+0xc0>)
 800bc28:	f7f5 feba 	bl	80019a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bc2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800bc30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc32:	2302      	movs	r3, #2
 800bc34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc36:	2300      	movs	r3, #0
 800bc38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc3e:	230a      	movs	r3, #10
 800bc40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc42:	f107 0314 	add.w	r3, r7, #20
 800bc46:	4619      	mov	r1, r3
 800bc48:	4812      	ldr	r0, [pc, #72]	; (800bc94 <HAL_HCD_MspInit+0xc0>)
 800bc4a:	f7f5 fea9 	bl	80019a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc4e:	4b10      	ldr	r3, [pc, #64]	; (800bc90 <HAL_HCD_MspInit+0xbc>)
 800bc50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc52:	4a0f      	ldr	r2, [pc, #60]	; (800bc90 <HAL_HCD_MspInit+0xbc>)
 800bc54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc58:	6353      	str	r3, [r2, #52]	; 0x34
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	60fb      	str	r3, [r7, #12]
 800bc5e:	4b0c      	ldr	r3, [pc, #48]	; (800bc90 <HAL_HCD_MspInit+0xbc>)
 800bc60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc62:	4a0b      	ldr	r2, [pc, #44]	; (800bc90 <HAL_HCD_MspInit+0xbc>)
 800bc64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc68:	6453      	str	r3, [r2, #68]	; 0x44
 800bc6a:	4b09      	ldr	r3, [pc, #36]	; (800bc90 <HAL_HCD_MspInit+0xbc>)
 800bc6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc72:	60fb      	str	r3, [r7, #12]
 800bc74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bc76:	2200      	movs	r2, #0
 800bc78:	2105      	movs	r1, #5
 800bc7a:	2043      	movs	r0, #67	; 0x43
 800bc7c:	f7f5 fe66 	bl	800194c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc80:	2043      	movs	r0, #67	; 0x43
 800bc82:	f7f5 fe7f 	bl	8001984 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc86:	bf00      	nop
 800bc88:	3728      	adds	r7, #40	; 0x28
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	40023800 	.word	0x40023800
 800bc94:	40020000 	.word	0x40020000

0800bc98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7fc f833 	bl	8007d12 <USBH_LL_IncTimer>
}
 800bcac:	bf00      	nop
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fc f877 	bl	8007db6 <USBH_LL_Connect>
}
 800bcc8:	bf00      	nop
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fc f88c 	bl	8007dfc <USBH_LL_Disconnect>
}
 800bce4:	bf00      	nop
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	70fb      	strb	r3, [r7, #3]
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fc f8c3 	bl	8007e8e <USBH_LL_NotifyURBChange>
#endif
}
 800bd08:	bf00      	nop
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7fc f821 	bl	8007d66 <USBH_LL_PortEnabled>
}
 800bd24:	bf00      	nop
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7fc f82d 	bl	8007d9a <USBH_LL_PortDisabled>
}
 800bd40:	bf00      	nop
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d12a      	bne.n	800bdb0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bd5a:	4a18      	ldr	r2, [pc, #96]	; (800bdbc <USBH_LL_Init+0x74>)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	4a15      	ldr	r2, [pc, #84]	; (800bdbc <USBH_LL_Init+0x74>)
 800bd66:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd6a:	4b14      	ldr	r3, [pc, #80]	; (800bdbc <USBH_LL_Init+0x74>)
 800bd6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bd70:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bd72:	4b12      	ldr	r3, [pc, #72]	; (800bdbc <USBH_LL_Init+0x74>)
 800bd74:	2208      	movs	r2, #8
 800bd76:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bd78:	4b10      	ldr	r3, [pc, #64]	; (800bdbc <USBH_LL_Init+0x74>)
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bd7e:	4b0f      	ldr	r3, [pc, #60]	; (800bdbc <USBH_LL_Init+0x74>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bd84:	4b0d      	ldr	r3, [pc, #52]	; (800bdbc <USBH_LL_Init+0x74>)
 800bd86:	2202      	movs	r2, #2
 800bd88:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bd8a:	4b0c      	ldr	r3, [pc, #48]	; (800bdbc <USBH_LL_Init+0x74>)
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bd90:	480a      	ldr	r0, [pc, #40]	; (800bdbc <USBH_LL_Init+0x74>)
 800bd92:	f7f5 ffb8 	bl	8001d06 <HAL_HCD_Init>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d001      	beq.n	800bda0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bd9c:	f7f4 ff34 	bl	8000c08 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bda0:	4806      	ldr	r0, [pc, #24]	; (800bdbc <USBH_LL_Init+0x74>)
 800bda2:	f7f6 fbbb 	bl	800251c <HAL_HCD_GetCurrentFrame>
 800bda6:	4603      	mov	r3, r0
 800bda8:	4619      	mov	r1, r3
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f7fb ffa2 	bl	8007cf4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	20005018 	.word	0x20005018

0800bdc0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7f6 fb28 	bl	800242c <HAL_HCD_Start>
 800bddc:	4603      	mov	r3, r0
 800bdde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bde0:	7bfb      	ldrb	r3, [r7, #15]
 800bde2:	4618      	mov	r0, r3
 800bde4:	f000 f95c 	bl	800c0a0 <USBH_Get_USB_Status>
 800bde8:	4603      	mov	r3, r0
 800bdea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdec:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b084      	sub	sp, #16
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdfe:	2300      	movs	r3, #0
 800be00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be02:	2300      	movs	r3, #0
 800be04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7f6 fb30 	bl	8002472 <HAL_HCD_Stop>
 800be12:	4603      	mov	r3, r0
 800be14:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be16:	7bfb      	ldrb	r3, [r7, #15]
 800be18:	4618      	mov	r0, r3
 800be1a:	f000 f941 	bl	800c0a0 <USBH_Get_USB_Status>
 800be1e:	4603      	mov	r3, r0
 800be20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be22:	7bbb      	ldrb	r3, [r7, #14]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800be34:	2301      	movs	r3, #1
 800be36:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be3e:	4618      	mov	r0, r3
 800be40:	f7f6 fb7a 	bl	8002538 <HAL_HCD_GetCurrentSpeed>
 800be44:	4603      	mov	r3, r0
 800be46:	2b01      	cmp	r3, #1
 800be48:	d007      	beq.n	800be5a <USBH_LL_GetSpeed+0x2e>
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d302      	bcc.n	800be54 <USBH_LL_GetSpeed+0x28>
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d006      	beq.n	800be60 <USBH_LL_GetSpeed+0x34>
 800be52:	e008      	b.n	800be66 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800be54:	2300      	movs	r3, #0
 800be56:	73fb      	strb	r3, [r7, #15]
    break;
 800be58:	e008      	b.n	800be6c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800be5a:	2301      	movs	r3, #1
 800be5c:	73fb      	strb	r3, [r7, #15]
    break;
 800be5e:	e005      	b.n	800be6c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800be60:	2302      	movs	r3, #2
 800be62:	73fb      	strb	r3, [r7, #15]
    break;
 800be64:	e002      	b.n	800be6c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800be66:	2301      	movs	r3, #1
 800be68:	73fb      	strb	r3, [r7, #15]
    break;
 800be6a:	bf00      	nop
  }
  return  speed;
 800be6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b084      	sub	sp, #16
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be7e:	2300      	movs	r3, #0
 800be80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7f6 fb0d 	bl	80024ac <HAL_HCD_ResetPort>
 800be92:	4603      	mov	r3, r0
 800be94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be96:	7bfb      	ldrb	r3, [r7, #15]
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 f901 	bl	800c0a0 <USBH_Get_USB_Status>
 800be9e:	4603      	mov	r3, r0
 800bea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bea2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	460b      	mov	r3, r1
 800beb6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bebe:	78fa      	ldrb	r2, [r7, #3]
 800bec0:	4611      	mov	r1, r2
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7f6 fb15 	bl	80024f2 <HAL_HCD_HC_GetXferCount>
 800bec8:	4603      	mov	r3, r0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bed2:	b590      	push	{r4, r7, lr}
 800bed4:	b089      	sub	sp, #36	; 0x24
 800bed6:	af04      	add	r7, sp, #16
 800bed8:	6078      	str	r0, [r7, #4]
 800beda:	4608      	mov	r0, r1
 800bedc:	4611      	mov	r1, r2
 800bede:	461a      	mov	r2, r3
 800bee0:	4603      	mov	r3, r0
 800bee2:	70fb      	strb	r3, [r7, #3]
 800bee4:	460b      	mov	r3, r1
 800bee6:	70bb      	strb	r3, [r7, #2]
 800bee8:	4613      	mov	r3, r2
 800beea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bef0:	2300      	movs	r3, #0
 800bef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800befa:	787c      	ldrb	r4, [r7, #1]
 800befc:	78ba      	ldrb	r2, [r7, #2]
 800befe:	78f9      	ldrb	r1, [r7, #3]
 800bf00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bf02:	9302      	str	r3, [sp, #8]
 800bf04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf08:	9301      	str	r3, [sp, #4]
 800bf0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	4623      	mov	r3, r4
 800bf12:	f7f5 ff5a 	bl	8001dca <HAL_HCD_HC_Init>
 800bf16:	4603      	mov	r3, r0
 800bf18:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f000 f8bf 	bl	800c0a0 <USBH_Get_USB_Status>
 800bf22:	4603      	mov	r3, r0
 800bf24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf26:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3714      	adds	r7, #20
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd90      	pop	{r4, r7, pc}

0800bf30 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bf4a:	78fa      	ldrb	r2, [r7, #3]
 800bf4c:	4611      	mov	r1, r2
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7f5 ffd3 	bl	8001efa <HAL_HCD_HC_Halt>
 800bf54:	4603      	mov	r3, r0
 800bf56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf58:	7bfb      	ldrb	r3, [r7, #15]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 f8a0 	bl	800c0a0 <USBH_Get_USB_Status>
 800bf60:	4603      	mov	r3, r0
 800bf62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf64:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bf6e:	b590      	push	{r4, r7, lr}
 800bf70:	b089      	sub	sp, #36	; 0x24
 800bf72:	af04      	add	r7, sp, #16
 800bf74:	6078      	str	r0, [r7, #4]
 800bf76:	4608      	mov	r0, r1
 800bf78:	4611      	mov	r1, r2
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	70fb      	strb	r3, [r7, #3]
 800bf80:	460b      	mov	r3, r1
 800bf82:	70bb      	strb	r3, [r7, #2]
 800bf84:	4613      	mov	r3, r2
 800bf86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bf96:	787c      	ldrb	r4, [r7, #1]
 800bf98:	78ba      	ldrb	r2, [r7, #2]
 800bf9a:	78f9      	ldrb	r1, [r7, #3]
 800bf9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bfa0:	9303      	str	r3, [sp, #12]
 800bfa2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bfa4:	9302      	str	r3, [sp, #8]
 800bfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa8:	9301      	str	r3, [sp, #4]
 800bfaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	4623      	mov	r3, r4
 800bfb2:	f7f5 ffc5 	bl	8001f40 <HAL_HCD_HC_SubmitRequest>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bfba:	7bfb      	ldrb	r3, [r7, #15]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f000 f86f 	bl	800c0a0 <USBH_Get_USB_Status>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3714      	adds	r7, #20
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd90      	pop	{r4, r7, pc}

0800bfd0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	460b      	mov	r3, r1
 800bfda:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bfe2:	78fa      	ldrb	r2, [r7, #3]
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7f6 fa6e 	bl	80024c8 <HAL_HCD_HC_GetURBState>
 800bfec:	4603      	mov	r3, r0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b082      	sub	sp, #8
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
 800bffe:	460b      	mov	r3, r1
 800c000:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d103      	bne.n	800c014 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c00c:	78fb      	ldrb	r3, [r7, #3]
 800c00e:	4618      	mov	r0, r3
 800c010:	f000 f872 	bl	800c0f8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c014:	20c8      	movs	r0, #200	; 0xc8
 800c016:	f7f5 f95d 	bl	80012d4 <HAL_Delay>
  return USBH_OK;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	460b      	mov	r3, r1
 800c02e:	70fb      	strb	r3, [r7, #3]
 800c030:	4613      	mov	r3, r2
 800c032:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c03a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c03c:	78fa      	ldrb	r2, [r7, #3]
 800c03e:	68f9      	ldr	r1, [r7, #12]
 800c040:	4613      	mov	r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	4413      	add	r3, r2
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	440b      	add	r3, r1
 800c04a:	333b      	adds	r3, #59	; 0x3b
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00a      	beq.n	800c068 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c052:	78fa      	ldrb	r2, [r7, #3]
 800c054:	68f9      	ldr	r1, [r7, #12]
 800c056:	4613      	mov	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	4413      	add	r3, r2
 800c05c:	00db      	lsls	r3, r3, #3
 800c05e:	440b      	add	r3, r1
 800c060:	3350      	adds	r3, #80	; 0x50
 800c062:	78ba      	ldrb	r2, [r7, #2]
 800c064:	701a      	strb	r2, [r3, #0]
 800c066:	e009      	b.n	800c07c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c068:	78fa      	ldrb	r2, [r7, #3]
 800c06a:	68f9      	ldr	r1, [r7, #12]
 800c06c:	4613      	mov	r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4413      	add	r3, r2
 800c072:	00db      	lsls	r3, r3, #3
 800c074:	440b      	add	r3, r1
 800c076:	3351      	adds	r3, #81	; 0x51
 800c078:	78ba      	ldrb	r2, [r7, #2]
 800c07a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3714      	adds	r7, #20
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr

0800c08a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b082      	sub	sp, #8
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7f5 f91e 	bl	80012d4 <HAL_Delay>
}
 800c098:	bf00      	nop
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c0ae:	79fb      	ldrb	r3, [r7, #7]
 800c0b0:	2b03      	cmp	r3, #3
 800c0b2:	d817      	bhi.n	800c0e4 <USBH_Get_USB_Status+0x44>
 800c0b4:	a201      	add	r2, pc, #4	; (adr r2, 800c0bc <USBH_Get_USB_Status+0x1c>)
 800c0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ba:	bf00      	nop
 800c0bc:	0800c0cd 	.word	0x0800c0cd
 800c0c0:	0800c0d3 	.word	0x0800c0d3
 800c0c4:	0800c0d9 	.word	0x0800c0d9
 800c0c8:	0800c0df 	.word	0x0800c0df
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c0d0:	e00b      	b.n	800c0ea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c0d2:	2302      	movs	r3, #2
 800c0d4:	73fb      	strb	r3, [r7, #15]
    break;
 800c0d6:	e008      	b.n	800c0ea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	73fb      	strb	r3, [r7, #15]
    break;
 800c0dc:	e005      	b.n	800c0ea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c0de:	2302      	movs	r3, #2
 800c0e0:	73fb      	strb	r3, [r7, #15]
    break;
 800c0e2:	e002      	b.n	800c0ea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c0e8:	bf00      	nop
  }
  return usb_status;
 800c0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	4603      	mov	r3, r0
 800c100:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c102:	79fb      	ldrb	r3, [r7, #7]
 800c104:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c106:	79fb      	ldrb	r3, [r7, #7]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d102      	bne.n	800c112 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c10c:	2301      	movs	r3, #1
 800c10e:	73fb      	strb	r3, [r7, #15]
 800c110:	e001      	b.n	800c116 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c112:	2300      	movs	r3, #0
 800c114:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c116:	7bfb      	ldrb	r3, [r7, #15]
 800c118:	461a      	mov	r2, r3
 800c11a:	2101      	movs	r1, #1
 800c11c:	4803      	ldr	r0, [pc, #12]	; (800c12c <MX_DriverVbusFS+0x34>)
 800c11e:	f7f5 fdd9 	bl	8001cd4 <HAL_GPIO_WritePin>
}
 800c122:	bf00      	nop
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	40020800 	.word	0x40020800

0800c130 <__errno>:
 800c130:	4b01      	ldr	r3, [pc, #4]	; (800c138 <__errno+0x8>)
 800c132:	6818      	ldr	r0, [r3, #0]
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	20000030 	.word	0x20000030

0800c13c <__libc_init_array>:
 800c13c:	b570      	push	{r4, r5, r6, lr}
 800c13e:	4e0d      	ldr	r6, [pc, #52]	; (800c174 <__libc_init_array+0x38>)
 800c140:	4c0d      	ldr	r4, [pc, #52]	; (800c178 <__libc_init_array+0x3c>)
 800c142:	1ba4      	subs	r4, r4, r6
 800c144:	10a4      	asrs	r4, r4, #2
 800c146:	2500      	movs	r5, #0
 800c148:	42a5      	cmp	r5, r4
 800c14a:	d109      	bne.n	800c160 <__libc_init_array+0x24>
 800c14c:	4e0b      	ldr	r6, [pc, #44]	; (800c17c <__libc_init_array+0x40>)
 800c14e:	4c0c      	ldr	r4, [pc, #48]	; (800c180 <__libc_init_array+0x44>)
 800c150:	f000 f8f6 	bl	800c340 <_init>
 800c154:	1ba4      	subs	r4, r4, r6
 800c156:	10a4      	asrs	r4, r4, #2
 800c158:	2500      	movs	r5, #0
 800c15a:	42a5      	cmp	r5, r4
 800c15c:	d105      	bne.n	800c16a <__libc_init_array+0x2e>
 800c15e:	bd70      	pop	{r4, r5, r6, pc}
 800c160:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c164:	4798      	blx	r3
 800c166:	3501      	adds	r5, #1
 800c168:	e7ee      	b.n	800c148 <__libc_init_array+0xc>
 800c16a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c16e:	4798      	blx	r3
 800c170:	3501      	adds	r5, #1
 800c172:	e7f2      	b.n	800c15a <__libc_init_array+0x1e>
 800c174:	0800c458 	.word	0x0800c458
 800c178:	0800c458 	.word	0x0800c458
 800c17c:	0800c458 	.word	0x0800c458
 800c180:	0800c45c 	.word	0x0800c45c

0800c184 <malloc>:
 800c184:	4b02      	ldr	r3, [pc, #8]	; (800c190 <malloc+0xc>)
 800c186:	4601      	mov	r1, r0
 800c188:	6818      	ldr	r0, [r3, #0]
 800c18a:	f000 b86d 	b.w	800c268 <_malloc_r>
 800c18e:	bf00      	nop
 800c190:	20000030 	.word	0x20000030

0800c194 <free>:
 800c194:	4b02      	ldr	r3, [pc, #8]	; (800c1a0 <free+0xc>)
 800c196:	4601      	mov	r1, r0
 800c198:	6818      	ldr	r0, [r3, #0]
 800c19a:	f000 b817 	b.w	800c1cc <_free_r>
 800c19e:	bf00      	nop
 800c1a0:	20000030 	.word	0x20000030

0800c1a4 <memcpy>:
 800c1a4:	b510      	push	{r4, lr}
 800c1a6:	1e43      	subs	r3, r0, #1
 800c1a8:	440a      	add	r2, r1
 800c1aa:	4291      	cmp	r1, r2
 800c1ac:	d100      	bne.n	800c1b0 <memcpy+0xc>
 800c1ae:	bd10      	pop	{r4, pc}
 800c1b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1b8:	e7f7      	b.n	800c1aa <memcpy+0x6>

0800c1ba <memset>:
 800c1ba:	4402      	add	r2, r0
 800c1bc:	4603      	mov	r3, r0
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d100      	bne.n	800c1c4 <memset+0xa>
 800c1c2:	4770      	bx	lr
 800c1c4:	f803 1b01 	strb.w	r1, [r3], #1
 800c1c8:	e7f9      	b.n	800c1be <memset+0x4>
	...

0800c1cc <_free_r>:
 800c1cc:	b538      	push	{r3, r4, r5, lr}
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	2900      	cmp	r1, #0
 800c1d2:	d045      	beq.n	800c260 <_free_r+0x94>
 800c1d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1d8:	1f0c      	subs	r4, r1, #4
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	bfb8      	it	lt
 800c1de:	18e4      	addlt	r4, r4, r3
 800c1e0:	f000 f8ac 	bl	800c33c <__malloc_lock>
 800c1e4:	4a1f      	ldr	r2, [pc, #124]	; (800c264 <_free_r+0x98>)
 800c1e6:	6813      	ldr	r3, [r2, #0]
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	b933      	cbnz	r3, 800c1fa <_free_r+0x2e>
 800c1ec:	6063      	str	r3, [r4, #4]
 800c1ee:	6014      	str	r4, [r2, #0]
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1f6:	f000 b8a2 	b.w	800c33e <__malloc_unlock>
 800c1fa:	42a3      	cmp	r3, r4
 800c1fc:	d90c      	bls.n	800c218 <_free_r+0x4c>
 800c1fe:	6821      	ldr	r1, [r4, #0]
 800c200:	1862      	adds	r2, r4, r1
 800c202:	4293      	cmp	r3, r2
 800c204:	bf04      	itt	eq
 800c206:	681a      	ldreq	r2, [r3, #0]
 800c208:	685b      	ldreq	r3, [r3, #4]
 800c20a:	6063      	str	r3, [r4, #4]
 800c20c:	bf04      	itt	eq
 800c20e:	1852      	addeq	r2, r2, r1
 800c210:	6022      	streq	r2, [r4, #0]
 800c212:	6004      	str	r4, [r0, #0]
 800c214:	e7ec      	b.n	800c1f0 <_free_r+0x24>
 800c216:	4613      	mov	r3, r2
 800c218:	685a      	ldr	r2, [r3, #4]
 800c21a:	b10a      	cbz	r2, 800c220 <_free_r+0x54>
 800c21c:	42a2      	cmp	r2, r4
 800c21e:	d9fa      	bls.n	800c216 <_free_r+0x4a>
 800c220:	6819      	ldr	r1, [r3, #0]
 800c222:	1858      	adds	r0, r3, r1
 800c224:	42a0      	cmp	r0, r4
 800c226:	d10b      	bne.n	800c240 <_free_r+0x74>
 800c228:	6820      	ldr	r0, [r4, #0]
 800c22a:	4401      	add	r1, r0
 800c22c:	1858      	adds	r0, r3, r1
 800c22e:	4282      	cmp	r2, r0
 800c230:	6019      	str	r1, [r3, #0]
 800c232:	d1dd      	bne.n	800c1f0 <_free_r+0x24>
 800c234:	6810      	ldr	r0, [r2, #0]
 800c236:	6852      	ldr	r2, [r2, #4]
 800c238:	605a      	str	r2, [r3, #4]
 800c23a:	4401      	add	r1, r0
 800c23c:	6019      	str	r1, [r3, #0]
 800c23e:	e7d7      	b.n	800c1f0 <_free_r+0x24>
 800c240:	d902      	bls.n	800c248 <_free_r+0x7c>
 800c242:	230c      	movs	r3, #12
 800c244:	602b      	str	r3, [r5, #0]
 800c246:	e7d3      	b.n	800c1f0 <_free_r+0x24>
 800c248:	6820      	ldr	r0, [r4, #0]
 800c24a:	1821      	adds	r1, r4, r0
 800c24c:	428a      	cmp	r2, r1
 800c24e:	bf04      	itt	eq
 800c250:	6811      	ldreq	r1, [r2, #0]
 800c252:	6852      	ldreq	r2, [r2, #4]
 800c254:	6062      	str	r2, [r4, #4]
 800c256:	bf04      	itt	eq
 800c258:	1809      	addeq	r1, r1, r0
 800c25a:	6021      	streq	r1, [r4, #0]
 800c25c:	605c      	str	r4, [r3, #4]
 800c25e:	e7c7      	b.n	800c1f0 <_free_r+0x24>
 800c260:	bd38      	pop	{r3, r4, r5, pc}
 800c262:	bf00      	nop
 800c264:	200049c4 	.word	0x200049c4

0800c268 <_malloc_r>:
 800c268:	b570      	push	{r4, r5, r6, lr}
 800c26a:	1ccd      	adds	r5, r1, #3
 800c26c:	f025 0503 	bic.w	r5, r5, #3
 800c270:	3508      	adds	r5, #8
 800c272:	2d0c      	cmp	r5, #12
 800c274:	bf38      	it	cc
 800c276:	250c      	movcc	r5, #12
 800c278:	2d00      	cmp	r5, #0
 800c27a:	4606      	mov	r6, r0
 800c27c:	db01      	blt.n	800c282 <_malloc_r+0x1a>
 800c27e:	42a9      	cmp	r1, r5
 800c280:	d903      	bls.n	800c28a <_malloc_r+0x22>
 800c282:	230c      	movs	r3, #12
 800c284:	6033      	str	r3, [r6, #0]
 800c286:	2000      	movs	r0, #0
 800c288:	bd70      	pop	{r4, r5, r6, pc}
 800c28a:	f000 f857 	bl	800c33c <__malloc_lock>
 800c28e:	4a21      	ldr	r2, [pc, #132]	; (800c314 <_malloc_r+0xac>)
 800c290:	6814      	ldr	r4, [r2, #0]
 800c292:	4621      	mov	r1, r4
 800c294:	b991      	cbnz	r1, 800c2bc <_malloc_r+0x54>
 800c296:	4c20      	ldr	r4, [pc, #128]	; (800c318 <_malloc_r+0xb0>)
 800c298:	6823      	ldr	r3, [r4, #0]
 800c29a:	b91b      	cbnz	r3, 800c2a4 <_malloc_r+0x3c>
 800c29c:	4630      	mov	r0, r6
 800c29e:	f000 f83d 	bl	800c31c <_sbrk_r>
 800c2a2:	6020      	str	r0, [r4, #0]
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f000 f838 	bl	800c31c <_sbrk_r>
 800c2ac:	1c43      	adds	r3, r0, #1
 800c2ae:	d124      	bne.n	800c2fa <_malloc_r+0x92>
 800c2b0:	230c      	movs	r3, #12
 800c2b2:	6033      	str	r3, [r6, #0]
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	f000 f842 	bl	800c33e <__malloc_unlock>
 800c2ba:	e7e4      	b.n	800c286 <_malloc_r+0x1e>
 800c2bc:	680b      	ldr	r3, [r1, #0]
 800c2be:	1b5b      	subs	r3, r3, r5
 800c2c0:	d418      	bmi.n	800c2f4 <_malloc_r+0x8c>
 800c2c2:	2b0b      	cmp	r3, #11
 800c2c4:	d90f      	bls.n	800c2e6 <_malloc_r+0x7e>
 800c2c6:	600b      	str	r3, [r1, #0]
 800c2c8:	50cd      	str	r5, [r1, r3]
 800c2ca:	18cc      	adds	r4, r1, r3
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f000 f836 	bl	800c33e <__malloc_unlock>
 800c2d2:	f104 000b 	add.w	r0, r4, #11
 800c2d6:	1d23      	adds	r3, r4, #4
 800c2d8:	f020 0007 	bic.w	r0, r0, #7
 800c2dc:	1ac3      	subs	r3, r0, r3
 800c2de:	d0d3      	beq.n	800c288 <_malloc_r+0x20>
 800c2e0:	425a      	negs	r2, r3
 800c2e2:	50e2      	str	r2, [r4, r3]
 800c2e4:	e7d0      	b.n	800c288 <_malloc_r+0x20>
 800c2e6:	428c      	cmp	r4, r1
 800c2e8:	684b      	ldr	r3, [r1, #4]
 800c2ea:	bf16      	itet	ne
 800c2ec:	6063      	strne	r3, [r4, #4]
 800c2ee:	6013      	streq	r3, [r2, #0]
 800c2f0:	460c      	movne	r4, r1
 800c2f2:	e7eb      	b.n	800c2cc <_malloc_r+0x64>
 800c2f4:	460c      	mov	r4, r1
 800c2f6:	6849      	ldr	r1, [r1, #4]
 800c2f8:	e7cc      	b.n	800c294 <_malloc_r+0x2c>
 800c2fa:	1cc4      	adds	r4, r0, #3
 800c2fc:	f024 0403 	bic.w	r4, r4, #3
 800c300:	42a0      	cmp	r0, r4
 800c302:	d005      	beq.n	800c310 <_malloc_r+0xa8>
 800c304:	1a21      	subs	r1, r4, r0
 800c306:	4630      	mov	r0, r6
 800c308:	f000 f808 	bl	800c31c <_sbrk_r>
 800c30c:	3001      	adds	r0, #1
 800c30e:	d0cf      	beq.n	800c2b0 <_malloc_r+0x48>
 800c310:	6025      	str	r5, [r4, #0]
 800c312:	e7db      	b.n	800c2cc <_malloc_r+0x64>
 800c314:	200049c4 	.word	0x200049c4
 800c318:	200049c8 	.word	0x200049c8

0800c31c <_sbrk_r>:
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	4c06      	ldr	r4, [pc, #24]	; (800c338 <_sbrk_r+0x1c>)
 800c320:	2300      	movs	r3, #0
 800c322:	4605      	mov	r5, r0
 800c324:	4608      	mov	r0, r1
 800c326:	6023      	str	r3, [r4, #0]
 800c328:	f7f4 ff1c 	bl	8001164 <_sbrk>
 800c32c:	1c43      	adds	r3, r0, #1
 800c32e:	d102      	bne.n	800c336 <_sbrk_r+0x1a>
 800c330:	6823      	ldr	r3, [r4, #0]
 800c332:	b103      	cbz	r3, 800c336 <_sbrk_r+0x1a>
 800c334:	602b      	str	r3, [r5, #0]
 800c336:	bd38      	pop	{r3, r4, r5, pc}
 800c338:	200052dc 	.word	0x200052dc

0800c33c <__malloc_lock>:
 800c33c:	4770      	bx	lr

0800c33e <__malloc_unlock>:
 800c33e:	4770      	bx	lr

0800c340 <_init>:
 800c340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c342:	bf00      	nop
 800c344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c346:	bc08      	pop	{r3}
 800c348:	469e      	mov	lr, r3
 800c34a:	4770      	bx	lr

0800c34c <_fini>:
 800c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34e:	bf00      	nop
 800c350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c352:	bc08      	pop	{r3}
 800c354:	469e      	mov	lr, r3
 800c356:	4770      	bx	lr
