
FreeRtosTestProjectWithoutHal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08007ea4  08007ea4  00017ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f38  08007f38  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007f38  08007f38  00017f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f40  08007f40  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f40  08007f40  00017f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f44  08007f44  00017f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004de4  20000010  08007f58  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004df4  08007f58  00024df4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024dfb  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004433  00000000  00000000  00044e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001db8  00000000  00000000  00049270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c08  00000000  00000000  0004b028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004d74  00000000  00000000  0004cc30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001825a  00000000  00000000  000519a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ddef2  00000000  00000000  00069bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147af0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f48  00000000  00000000  00147b6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e8c 	.word	0x08007e8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007e8c 	.word	0x08007e8c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vTaskForModbus>:
/* USER CODE BEGIN 0 */

/*-----------------------------------------------------------*/
/* Обмен по ModBus */
void vTaskForModbus( void *pvParameters )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]

  for( ;; )
 80004d8:	e7fe      	b.n	80004d8 <vTaskForModbus+0x8>

080004da <vTaskForSPI>:
  vTaskDelete( NULL );
}
/*-----------------------------------------------------------*/
/* Обмен по SPI */
void vTaskForSPI( void *pvParameters )
{
 80004da:	b480      	push	{r7}
 80004dc:	b083      	sub	sp, #12
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]

  for( ;; )
 80004e2:	e7fe      	b.n	80004e2 <vTaskForSPI+0x8>

080004e4 <vTaskForUART>:
  vTaskDelete( NULL );
}

/* Обмен по UART */
void vTaskForUART( void *pvParameters )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]

  for( ;; )
 80004ec:	e7fe      	b.n	80004ec <vTaskForUART+0x8>

080004ee <vTaskForI2C>:
  vTaskDelete( NULL );
}

/* Обмен по I2C */
void vTaskForI2C( void *pvParameters )
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]

  for( ;; )
 80004f6:	e7fe      	b.n	80004f6 <vTaskForI2C+0x8>

080004f8 <vTaskForDisplay>:
  vTaskDelete( NULL );
}

/* Работа с драйвером дисплея */
void vTaskForDisplay( void *pvParameters )
{
 80004f8:	b480      	push	{r7}
 80004fa:	b087      	sub	sp, #28
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]

	int displayNumbers[4];

  for( ;; )
 8000500:	e7fe      	b.n	8000500 <vTaskForDisplay+0x8>

08000502 <vTaskForPorts>:
  vTaskDelete( NULL );
}

/* Работа с портами */
void vTaskForPorts( void *pvParameters )
{
 8000502:	b480      	push	{r7}
 8000504:	b087      	sub	sp, #28
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
	int portNumbers[4];

  for( ;; )
 800050a:	e7fe      	b.n	800050a <vTaskForPorts+0x8>

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fd6f 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f867 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f9cf 	bl	80008bc <MX_GPIO_Init>
  MX_I2C1_Init();
 800051e:	f000 f8e5 	bl	80006ec <MX_I2C1_Init>
  MX_I2S3_Init();
 8000522:	f000 f911 	bl	8000748 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000526:	f000 f93f 	bl	80007a8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800052a:	f000 f973 	bl	8000814 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800052e:	f000 f99b 	bl	8000868 <MX_USART3_UART_Init>
   //DDRF |= (1 << DDF0) | (1 << DDF1);

   /* Создать задачу 1, заметьте,  что реальная программа должна
   /* проверять возвращаемое  значение, чтобы убедиться,
   /* что задача создана успешно */
   xTaskCreate( vTaskForModbus,  /* Указатель на функцию, реализующую задачу */
 8000532:	2300      	movs	r3, #0
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2300      	movs	r3, #0
 800053c:	2280      	movs	r2, #128	; 0x80
 800053e:	491e      	ldr	r1, [pc, #120]	; (80005b8 <main+0xac>)
 8000540:	481e      	ldr	r0, [pc, #120]	; (80005bc <main+0xb0>)
 8000542:	f005 fe19 	bl	8006178 <xTaskCreate>
       NULL,  /* Параметр, передаваемый задаче, – не используется */
       1,  /* Приоритет = 1 */
       NULL );  /* Получение дескриптора задачи – не используется */

   /* Создать задачу 2 */
   xTaskCreate(vTaskForSPI,  (signed char *) "vTaskForSPI", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8000546:	2300      	movs	r3, #0
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2300      	movs	r3, #0
 8000550:	2280      	movs	r2, #128	; 0x80
 8000552:	491b      	ldr	r1, [pc, #108]	; (80005c0 <main+0xb4>)
 8000554:	481b      	ldr	r0, [pc, #108]	; (80005c4 <main+0xb8>)
 8000556:	f005 fe0f 	bl	8006178 <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForUART,  (signed char *) "vTaskForUART", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 800055a:	2300      	movs	r3, #0
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	2301      	movs	r3, #1
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2300      	movs	r3, #0
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	4918      	ldr	r1, [pc, #96]	; (80005c8 <main+0xbc>)
 8000568:	4818      	ldr	r0, [pc, #96]	; (80005cc <main+0xc0>)
 800056a:	f005 fe05 	bl	8006178 <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForI2C,  (signed  char *) "vTaskForI2C", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 800056e:	2300      	movs	r3, #0
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	2280      	movs	r2, #128	; 0x80
 800057a:	4915      	ldr	r1, [pc, #84]	; (80005d0 <main+0xc4>)
 800057c:	4815      	ldr	r0, [pc, #84]	; (80005d4 <main+0xc8>)
 800057e:	f005 fdfb 	bl	8006178 <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForDisplay,  (signed  char *) "vTaskForDisplay", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8000582:	2300      	movs	r3, #0
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2301      	movs	r3, #1
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	4912      	ldr	r1, [pc, #72]	; (80005d8 <main+0xcc>)
 8000590:	4812      	ldr	r0, [pc, #72]	; (80005dc <main+0xd0>)
 8000592:	f005 fdf1 	bl	8006178 <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForPorts,  (signed  char *) "vTaskForPorts", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8000596:	2300      	movs	r3, #0
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2301      	movs	r3, #1
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2300      	movs	r3, #0
 80005a0:	2280      	movs	r2, #128	; 0x80
 80005a2:	490f      	ldr	r1, [pc, #60]	; (80005e0 <main+0xd4>)
 80005a4:	480f      	ldr	r0, [pc, #60]	; (80005e4 <main+0xd8>)
 80005a6:	f005 fde7 	bl	8006178 <xTaskCreate>

   /* Запустить планировщик. Задачи начнут выполняться. */
   vTaskStartScheduler();
 80005aa:	f005 ff29 	bl	8006400 <vTaskStartScheduler>

   return 0;
 80005ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	08007eb0 	.word	0x08007eb0
 80005bc:	080004d1 	.word	0x080004d1
 80005c0:	08007ec0 	.word	0x08007ec0
 80005c4:	080004db 	.word	0x080004db
 80005c8:	08007ecc 	.word	0x08007ecc
 80005cc:	080004e5 	.word	0x080004e5
 80005d0:	08007edc 	.word	0x08007edc
 80005d4:	080004ef 	.word	0x080004ef
 80005d8:	08007ee8 	.word	0x08007ee8
 80005dc:	080004f9 	.word	0x080004f9
 80005e0:	08007ef8 	.word	0x08007ef8
 80005e4:	08000503 	.word	0x08000503

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b098      	sub	sp, #96	; 0x60
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f007 fc3f 	bl	8007e7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b31      	ldr	r3, [pc, #196]	; (80006e4 <SystemClock_Config+0xfc>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <SystemClock_Config+0xfc>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	6413      	str	r3, [r2, #64]	; 0x40
 800062a:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <SystemClock_Config+0xfc>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <SystemClock_Config+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a2a      	ldr	r2, [pc, #168]	; (80006e8 <SystemClock_Config+0x100>)
 8000640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0x100>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000652:	2301      	movs	r3, #1
 8000654:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000660:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000666:	2308      	movs	r3, #8
 8000668:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800066a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800066e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000674:	2307      	movs	r3, #7
 8000676:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800067c:	4618      	mov	r0, r3
 800067e:	f002 ff53 	bl	8003528 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000688:	f000 fa28 	bl	8000adc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000698:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	2105      	movs	r1, #5
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 f9ac 	bl	8003a08 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006b6:	f000 fa11 	bl	8000adc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006ba:	2301      	movs	r3, #1
 80006bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006be:	23c0      	movs	r3, #192	; 0xc0
 80006c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fbc0 	bl	8003e50 <HAL_RCCEx_PeriphCLKConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006d6:	f000 fa01 	bl	8000adc <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3760      	adds	r7, #96	; 0x60
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	; (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_I2C1_Init+0x50>)
 800072a:	f002 f925 	bl	8002978 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 f9d2 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20004978 	.word	0x20004978
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_I2S3_Init+0x54>)
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <MX_I2S3_Init+0x58>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2S3_Init+0x54>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_I2S3_Init+0x54>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_I2S3_Init+0x54>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_I2S3_Init+0x54>)
 8000768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_I2S3_Init+0x54>)
 8000770:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <MX_I2S3_Init+0x5c>)
 8000772:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_I2S3_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_I2S3_Init+0x54>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_I2S3_Init+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_I2S3_Init+0x54>)
 8000788:	f002 fa2e 	bl	8002be8 <HAL_I2S_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000792:	f000 f9a3 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20004a64 	.word	0x20004a64
 80007a0:	40003c00 	.word	0x40003c00
 80007a4:	00017700 	.word	0x00017700

080007a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_SPI1_Init+0x64>)
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <MX_SPI1_Init+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_SPI1_Init+0x64>)
 80007b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_SPI1_Init+0x64>)
 80007d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_SPI1_Init+0x64>)
 80007dc:	2238      	movs	r2, #56	; 0x38
 80007de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_SPI1_Init+0x64>)
 80007f4:	220a      	movs	r2, #10
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_SPI1_Init+0x64>)
 80007fa:	f003 fc67 	bl	80040cc <HAL_SPI_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000804:	f000 f96a 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200049cc 	.word	0x200049cc
 8000810:	40013000 	.word	0x40013000

08000814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_USART2_UART_Init+0x50>)
 800081c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000820:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800084c:	f003 fee0 	bl	8004610 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000856:	f000 f941 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20004a24 	.word	0x20004a24
 8000864:	40004400 	.word	0x40004400

08000868 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_USART3_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 8000874:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 80008a0:	f003 feb6 	bl	8004610 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f000 f917 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20004938 	.word	0x20004938
 80008b8:	40004800 	.word	0x40004800

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4b71      	ldr	r3, [pc, #452]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a70      	ldr	r2, [pc, #448]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b6e      	ldr	r3, [pc, #440]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0310 	and.w	r3, r3, #16
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	4b6a      	ldr	r3, [pc, #424]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a69      	ldr	r2, [pc, #420]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b67      	ldr	r3, [pc, #412]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b63      	ldr	r3, [pc, #396]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a62      	ldr	r2, [pc, #392]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 8000914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b60      	ldr	r3, [pc, #384]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b5c      	ldr	r3, [pc, #368]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a5b      	ldr	r2, [pc, #364]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b59      	ldr	r3, [pc, #356]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b55      	ldr	r3, [pc, #340]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a54      	ldr	r2, [pc, #336]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b52      	ldr	r3, [pc, #328]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b4e      	ldr	r3, [pc, #312]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a4d      	ldr	r2, [pc, #308]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b4b      	ldr	r3, [pc, #300]	; (8000a9c <MX_GPIO_Init+0x1e0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2108      	movs	r1, #8
 800097e:	4848      	ldr	r0, [pc, #288]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000980:	f000 fdf6 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2101      	movs	r1, #1
 8000988:	4846      	ldr	r0, [pc, #280]	; (8000aa4 <MX_GPIO_Init+0x1e8>)
 800098a:	f000 fdf1 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800098e:	2200      	movs	r2, #0
 8000990:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000994:	4844      	ldr	r0, [pc, #272]	; (8000aa8 <MX_GPIO_Init+0x1ec>)
 8000996:	f000 fdeb 	bl	8001570 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800099a:	2308      	movs	r3, #8
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	483b      	ldr	r0, [pc, #236]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 80009b2:	f000 fc43 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4835      	ldr	r0, [pc, #212]	; (8000aa4 <MX_GPIO_Init+0x1e8>)
 80009ce:	f000 fc35 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009d2:	2308      	movs	r3, #8
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e2:	2305      	movs	r3, #5
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	482d      	ldr	r0, [pc, #180]	; (8000aa4 <MX_GPIO_Init+0x1e8>)
 80009ee:	f000 fc25 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <MX_GPIO_Init+0x1f0>)
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	482a      	ldr	r0, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0x1f4>)
 8000a06:	f000 fc19 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4825      	ldr	r0, [pc, #148]	; (8000ab4 <MX_GPIO_Init+0x1f8>)
 8000a1e:	f000 fc0d 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a34:	2305      	movs	r3, #5
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481d      	ldr	r0, [pc, #116]	; (8000ab4 <MX_GPIO_Init+0x1f8>)
 8000a40:	f000 fbfc 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a44:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a48:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4812      	ldr	r0, [pc, #72]	; (8000aa8 <MX_GPIO_Init+0x1ec>)
 8000a5e:	f000 fbed 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a62:	2320      	movs	r3, #32
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <MX_GPIO_Init+0x1ec>)
 8000a76:	f000 fbe1 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_GPIO_Init+0x1f0>)
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_GPIO_Init+0x1e4>)
 8000a8e:	f000 fbd5 	bl	800123c <HAL_GPIO_Init>

}
 8000a92:	bf00      	nop
 8000a94:	3730      	adds	r7, #48	; 0x30
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	10120000 	.word	0x10120000
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d101      	bne.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aca:	f000 fab5 	bl	8001038 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40010000 	.word	0x40010000

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <Error_Handler+0x6>

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_MspInit+0x54>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <HAL_MspInit+0x54>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <HAL_MspInit+0x54>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_MspInit+0x54>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <HAL_MspInit+0x54>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_MspInit+0x54>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	210f      	movs	r1, #15
 8000b26:	f06f 0001 	mvn.w	r0, #1
 8000b2a:	f000 fb5d 	bl	80011e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_I2C_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12c      	bne.n	8000bb8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b7a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b80:	2312      	movs	r3, #18
 8000b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <HAL_I2C_MspInit+0x8c>)
 8000b98:	f000 fb50 	bl	800123c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000ba6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000baa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	; 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020400 	.word	0x40020400

08000bcc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a28      	ldr	r2, [pc, #160]	; (8000c8c <HAL_I2S_MspInit+0xc0>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d14a      	bne.n	8000c84 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <HAL_I2S_MspInit+0xc4>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a26      	ldr	r2, [pc, #152]	; (8000c90 <HAL_I2S_MspInit+0xc4>)
 8000bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <HAL_I2S_MspInit+0xc4>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <HAL_I2S_MspInit+0xc4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <HAL_I2S_MspInit+0xc4>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <HAL_I2S_MspInit+0xc4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_I2S_MspInit+0xc4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <HAL_I2S_MspInit+0xc4>)
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <HAL_I2S_MspInit+0xc4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c52:	2306      	movs	r3, #6
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <HAL_I2S_MspInit+0xc8>)
 8000c5e:	f000 faed 	bl	800123c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c62:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c74:	2306      	movs	r3, #6
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <HAL_I2S_MspInit+0xcc>)
 8000c80:	f000 fadc 	bl	800123c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40003c00 	.word	0x40003c00
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	40020800 	.word	0x40020800

08000c9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	; (8000d20 <HAL_SPI_MspInit+0x84>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d12b      	bne.n	8000d16 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000cc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_SPI_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cf6:	23e0      	movs	r3, #224	; 0xe0
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d06:	2305      	movs	r3, #5
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000d12:	f000 fa93 	bl	800123c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	; 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40013000 	.word	0x40013000
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	; 0x30
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a42      	ldr	r2, [pc, #264]	; (8000e54 <HAL_UART_MspInit+0x128>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d12c      	bne.n	8000da8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
 8000d52:	4b41      	ldr	r3, [pc, #260]	; (8000e58 <HAL_UART_MspInit+0x12c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a40      	ldr	r2, [pc, #256]	; (8000e58 <HAL_UART_MspInit+0x12c>)
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b3e      	ldr	r3, [pc, #248]	; (8000e58 <HAL_UART_MspInit+0x12c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <HAL_UART_MspInit+0x12c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a39      	ldr	r2, [pc, #228]	; (8000e58 <HAL_UART_MspInit+0x12c>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <HAL_UART_MspInit+0x12c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d86:	230c      	movs	r3, #12
 8000d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d96:	2307      	movs	r3, #7
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	482e      	ldr	r0, [pc, #184]	; (8000e5c <HAL_UART_MspInit+0x130>)
 8000da2:	f000 fa4b 	bl	800123c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000da6:	e050      	b.n	8000e4a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a2c      	ldr	r2, [pc, #176]	; (8000e60 <HAL_UART_MspInit+0x134>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d14b      	bne.n	8000e4a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <HAL_UART_MspInit+0x12c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <HAL_UART_MspInit+0x12c>)
 8000dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <HAL_UART_MspInit+0x12c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <HAL_UART_MspInit+0x12c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a20      	ldr	r2, [pc, #128]	; (8000e58 <HAL_UART_MspInit+0x12c>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <HAL_UART_MspInit+0x12c>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_UART_MspInit+0x12c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <HAL_UART_MspInit+0x12c>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_UART_MspInit+0x12c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0308 	and.w	r3, r3, #8
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e18:	2307      	movs	r3, #7
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4810      	ldr	r0, [pc, #64]	; (8000e64 <HAL_UART_MspInit+0x138>)
 8000e24:	f000 fa0a 	bl	800123c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	4808      	ldr	r0, [pc, #32]	; (8000e68 <HAL_UART_MspInit+0x13c>)
 8000e46:	f000 f9f9 	bl	800123c <HAL_GPIO_Init>
}
 8000e4a:	bf00      	nop
 8000e4c:	3730      	adds	r7, #48	; 0x30
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40004400 	.word	0x40004400
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	40004800 	.word	0x40004800
 8000e64:	40020400 	.word	0x40020400
 8000e68:	40020c00 	.word	0x40020c00

08000e6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	; 0x30
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	2019      	movs	r0, #25
 8000e82:	f000 f9b1 	bl	80011e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e86:	2019      	movs	r0, #25
 8000e88:	f000 f9ca 	bl	8001220 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <HAL_InitTick+0xa4>)
 8000e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e94:	4a1e      	ldr	r2, [pc, #120]	; (8000f10 <HAL_InitTick+0xa4>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_InitTick+0xa4>)
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ea8:	f107 0210 	add.w	r2, r7, #16
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 ff9a 	bl	8003dec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000eb8:	f002 ff84 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec4:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <HAL_InitTick+0xa8>)
 8000ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eca:	0c9b      	lsrs	r3, r3, #18
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_InitTick+0xac>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <HAL_InitTick+0xb0>)
 8000ed4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <HAL_InitTick+0xac>)
 8000ed8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000edc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_InitTick+0xac>)
 8000ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_InitTick+0xac>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_InitTick+0xac>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <HAL_InitTick+0xac>)
 8000ef2:	f003 f94f 	bl	8004194 <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d104      	bne.n	8000f06 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000efc:	4806      	ldr	r0, [pc, #24]	; (8000f18 <HAL_InitTick+0xac>)
 8000efe:	f003 f97e 	bl	80041fe <HAL_TIM_Base_Start_IT>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3730      	adds	r7, #48	; 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40023800 	.word	0x40023800
 8000f14:	431bde83 	.word	0x431bde83
 8000f18:	20004aac 	.word	0x20004aac
 8000f1c:	40010000 	.word	0x40010000

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f52:	f003 f978 	bl	8004246 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20004aac 	.word	0x20004aac

08000f60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <OTG_FS_IRQHandler+0x10>)
 8000f66:	f000 fb1c 	bl	80015a2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20004b30 	.word	0x20004b30

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <SystemInit+0x28>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <SystemInit+0x28>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SystemInit+0x28>)
 8000f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fa6:	e003      	b.n	8000fb0 <LoopCopyDataInit>

08000fa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000faa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fae:	3104      	adds	r1, #4

08000fb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb8:	d3f6      	bcc.n	8000fa8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fbc:	e002      	b.n	8000fc4 <LoopFillZerobss>

08000fbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fc0:	f842 3b04 	str.w	r3, [r2], #4

08000fc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc8:	d3f9      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fca:	f7ff ffd3 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f006 ff25 	bl	8007e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fa9b 	bl	800050c <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fdc:	08007f48 	.word	0x08007f48
  ldr  r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fe4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000fe8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000fec:	20004df4 	.word	0x20004df4

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_Init+0x40>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_Init+0x40>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x40>)
 8001016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f8d8 	bl	80011d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	2000      	movs	r0, #0
 8001024:	f7ff ff22 	bl	8000e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fd5c 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	20004aec 	.word	0x20004aec

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20004aec 	.word	0x20004aec

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff4c 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011fa:	f7ff ff61 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 80011fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	6978      	ldr	r0, [r7, #20]
 8001206:	f7ff ffb1 	bl	800116c <NVIC_EncodePriority>
 800120a:	4602      	mov	r2, r0
 800120c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff80 	bl	8001118 <__NVIC_SetPriority>
}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff54 	bl	80010dc <__NVIC_EnableIRQ>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	e16b      	b.n	8001530 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	429a      	cmp	r2, r3
 8001272:	f040 815a 	bne.w	800152a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d00b      	beq.n	8001296 <HAL_GPIO_Init+0x5a>
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d007      	beq.n	8001296 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800128a:	2b11      	cmp	r3, #17
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b12      	cmp	r3, #18
 8001294:	d130      	bne.n	80012f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012cc:	2201      	movs	r2, #1
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	f003 0201 	and.w	r2, r3, #1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0xfc>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b12      	cmp	r3, #18
 8001336:	d123      	bne.n	8001380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	08da      	lsrs	r2, r3, #3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3208      	adds	r2, #8
 8001340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	08da      	lsrs	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3208      	adds	r2, #8
 800137a:	69b9      	ldr	r1, [r7, #24]
 800137c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0203 	and.w	r2, r3, #3
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80b4 	beq.w	800152a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <HAL_GPIO_Init+0x308>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a5e      	ldr	r2, [pc, #376]	; (8001544 <HAL_GPIO_Init+0x308>)
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
 80013d2:	4b5c      	ldr	r3, [pc, #368]	; (8001544 <HAL_GPIO_Init+0x308>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013de:	4a5a      	ldr	r2, [pc, #360]	; (8001548 <HAL_GPIO_Init+0x30c>)
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a51      	ldr	r2, [pc, #324]	; (800154c <HAL_GPIO_Init+0x310>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d02b      	beq.n	8001462 <HAL_GPIO_Init+0x226>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a50      	ldr	r2, [pc, #320]	; (8001550 <HAL_GPIO_Init+0x314>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d025      	beq.n	800145e <HAL_GPIO_Init+0x222>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4f      	ldr	r2, [pc, #316]	; (8001554 <HAL_GPIO_Init+0x318>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d01f      	beq.n	800145a <HAL_GPIO_Init+0x21e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4e      	ldr	r2, [pc, #312]	; (8001558 <HAL_GPIO_Init+0x31c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d019      	beq.n	8001456 <HAL_GPIO_Init+0x21a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4d      	ldr	r2, [pc, #308]	; (800155c <HAL_GPIO_Init+0x320>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d013      	beq.n	8001452 <HAL_GPIO_Init+0x216>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4c      	ldr	r2, [pc, #304]	; (8001560 <HAL_GPIO_Init+0x324>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00d      	beq.n	800144e <HAL_GPIO_Init+0x212>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4b      	ldr	r2, [pc, #300]	; (8001564 <HAL_GPIO_Init+0x328>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d007      	beq.n	800144a <HAL_GPIO_Init+0x20e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4a      	ldr	r2, [pc, #296]	; (8001568 <HAL_GPIO_Init+0x32c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_GPIO_Init+0x20a>
 8001442:	2307      	movs	r3, #7
 8001444:	e00e      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001446:	2308      	movs	r3, #8
 8001448:	e00c      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800144a:	2306      	movs	r3, #6
 800144c:	e00a      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800144e:	2305      	movs	r3, #5
 8001450:	e008      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001452:	2304      	movs	r3, #4
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001456:	2303      	movs	r3, #3
 8001458:	e004      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800145a:	2302      	movs	r3, #2
 800145c:	e002      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001462:	2300      	movs	r3, #0
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	f002 0203 	and.w	r2, r2, #3
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	4093      	lsls	r3, r2
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001474:	4934      	ldr	r1, [pc, #208]	; (8001548 <HAL_GPIO_Init+0x30c>)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001482:	4b3a      	ldr	r3, [pc, #232]	; (800156c <HAL_GPIO_Init+0x330>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a6:	4a31      	ldr	r2, [pc, #196]	; (800156c <HAL_GPIO_Init+0x330>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014ac:	4b2f      	ldr	r3, [pc, #188]	; (800156c <HAL_GPIO_Init+0x330>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014d0:	4a26      	ldr	r2, [pc, #152]	; (800156c <HAL_GPIO_Init+0x330>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d6:	4b25      	ldr	r3, [pc, #148]	; (800156c <HAL_GPIO_Init+0x330>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <HAL_GPIO_Init+0x330>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HAL_GPIO_Init+0x330>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_GPIO_Init+0x330>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3301      	adds	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	f67f ae90 	bls.w	8001258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001538:	bf00      	nop
 800153a:	3724      	adds	r7, #36	; 0x24
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40023800 	.word	0x40023800
 8001548:	40013800 	.word	0x40013800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400
 8001554:	40020800 	.word	0x40020800
 8001558:	40020c00 	.word	0x40020c00
 800155c:	40021000 	.word	0x40021000
 8001560:	40021400 	.word	0x40021400
 8001564:	40021800 	.word	0x40021800
 8001568:	40021c00 	.word	0x40021c00
 800156c:	40013c00 	.word	0x40013c00

08001570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	807b      	strh	r3, [r7, #2]
 800157c:	4613      	mov	r3, r2
 800157e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001580:	787b      	ldrb	r3, [r7, #1]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800158c:	e003      	b.n	8001596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	041a      	lsls	r2, r3, #16
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	619a      	str	r2, [r3, #24]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 fc99 	bl	8004ef0 <USB_GetMode>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	f040 80ef 	bne.w	80017a4 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fc7d 	bl	8004eca <USB_ReadInterrupts>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80e5 	beq.w	80017a2 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 fc74 	bl	8004eca <USB_ReadInterrupts>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80015ec:	d104      	bne.n	80015f8 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015f6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 fc64 	bl	8004eca <USB_ReadInterrupts>
 8001602:	4603      	mov	r3, r0
 8001604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800160c:	d104      	bne.n	8001618 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001616:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f003 fc54 	bl	8004eca <USB_ReadInterrupts>
 8001622:	4603      	mov	r3, r0
 8001624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001628:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800162c:	d104      	bne.n	8001638 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001636:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f003 fc44 	bl	8004eca <USB_ReadInterrupts>
 8001642:	4603      	mov	r3, r0
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b02      	cmp	r3, #2
 800164a:	d103      	bne.n	8001654 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2202      	movs	r2, #2
 8001652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f003 fc36 	bl	8004eca <USB_ReadInterrupts>
 800165e:	4603      	mov	r3, r0
 8001660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001668:	d115      	bne.n	8001696 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001672:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d108      	bne.n	8001696 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f006 fb45 	bl	8007d14 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2101      	movs	r1, #1
 8001690:	4618      	mov	r0, r3
 8001692:	f003 fc3b 	bl	8004f0c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fc15 	bl	8004eca <USB_ReadInterrupts>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016aa:	d102      	bne.n	80016b2 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f001 f8ef 	bl	8002890 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 fc07 	bl	8004eca <USB_ReadInterrupts>
 80016bc:	4603      	mov	r3, r0
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d106      	bne.n	80016d4 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f006 fb08 	bl	8007cdc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2208      	movs	r2, #8
 80016d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f003 fbf6 	bl	8004eca <USB_ReadInterrupts>
 80016de:	4603      	mov	r3, r0
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016e8:	d138      	bne.n	800175c <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 fc46 	bl	8004f80 <USB_HC_ReadInterrupt>
 80016f4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e025      	b.n	8001748 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d018      	beq.n	8001742 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	015a      	lsls	r2, r3, #5
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001726:	d106      	bne.n	8001736 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f858 	bl	80017e4 <HCD_HC_IN_IRQHandler>
 8001734:	e005      	b.n	8001742 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	4619      	mov	r1, r3
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fc86 	bl	800204e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	429a      	cmp	r2, r3
 8001750:	d3d4      	bcc.n	80016fc <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800175a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f003 fbb2 	bl	8004eca <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	2b10      	cmp	r3, #16
 800176e:	d101      	bne.n	8001774 <HAL_HCD_IRQHandler+0x1d2>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <HAL_HCD_IRQHandler+0x1d4>
 8001774:	2300      	movs	r3, #0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d014      	beq.n	80017a4 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	699a      	ldr	r2, [r3, #24]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0210 	bic.w	r2, r2, #16
 8001788:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 ffd4 	bl	8002738 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699a      	ldr	r2, [r3, #24]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0210 	orr.w	r2, r2, #16
 800179e:	619a      	str	r2, [r3, #24]
 80017a0:	e000      	b.n	80017a4 <HAL_HCD_IRQHandler+0x202>
      return;
 80017a2:	bf00      	nop
    }
  }
}
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_HCD_Stop+0x16>
 80017bc:	2302      	movs	r3, #2
 80017be:	e00d      	b.n	80017dc <HAL_HCD_Stop+0x32>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f003 fce7 	bl	80051a0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	015a      	lsls	r2, r3, #5
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4413      	add	r3, r2
 8001806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b04      	cmp	r3, #4
 8001812:	d119      	bne.n	8001848 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	015a      	lsls	r2, r3, #5
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4413      	add	r3, r2
 800181c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001820:	461a      	mov	r2, r3
 8001822:	2304      	movs	r3, #4
 8001824:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	015a      	lsls	r2, r3, #5
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4413      	add	r3, r2
 800182e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	0151      	lsls	r1, r2, #5
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	440a      	add	r2, r1
 800183c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	60d3      	str	r3, [r2, #12]
 8001846:	e0ce      	b.n	80019e6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	015a      	lsls	r2, r3, #5
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4413      	add	r3, r2
 8001850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800185e:	d12c      	bne.n	80018ba <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	015a      	lsls	r2, r3, #5
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4413      	add	r3, r2
 8001868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800186c:	461a      	mov	r2, r3
 800186e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001872:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	335d      	adds	r3, #93	; 0x5d
 8001884:	2207      	movs	r2, #7
 8001886:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	015a      	lsls	r2, r3, #5
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4413      	add	r3, r2
 8001890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	0151      	lsls	r1, r2, #5
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	440a      	add	r2, r1
 800189e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f003 fb75 	bl	8004fa2 <USB_HC_Halt>
 80018b8:	e095      	b.n	80019e6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	015a      	lsls	r2, r3, #5
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4413      	add	r3, r2
 80018c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0320 	and.w	r3, r3, #32
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d109      	bne.n	80018e4 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	015a      	lsls	r2, r3, #5
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4413      	add	r3, r2
 80018d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018dc:	461a      	mov	r2, r3
 80018de:	2320      	movs	r3, #32
 80018e0:	6093      	str	r3, [r2, #8]
 80018e2:	e080      	b.n	80019e6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	015a      	lsls	r2, r3, #5
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d134      	bne.n	8001964 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	015a      	lsls	r2, r3, #5
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4413      	add	r3, r2
 8001902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	0151      	lsls	r1, r2, #5
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	440a      	add	r2, r1
 8001910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	335d      	adds	r3, #93	; 0x5d
 800192a:	2205      	movs	r2, #5
 800192c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	015a      	lsls	r2, r3, #5
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4413      	add	r3, r2
 8001936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800193a:	461a      	mov	r2, r3
 800193c:	2310      	movs	r3, #16
 800193e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	015a      	lsls	r2, r3, #5
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4413      	add	r3, r2
 8001948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800194c:	461a      	mov	r2, r3
 800194e:	2308      	movs	r3, #8
 8001950:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f003 fb20 	bl	8004fa2 <USB_HC_Halt>
 8001962:	e040      	b.n	80019e6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	015a      	lsls	r2, r3, #5
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4413      	add	r3, r2
 800196c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197a:	d134      	bne.n	80019e6 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	015a      	lsls	r2, r3, #5
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4413      	add	r3, r2
 8001984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	0151      	lsls	r1, r2, #5
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	440a      	add	r2, r1
 8001992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001996:	f043 0302 	orr.w	r3, r3, #2
 800199a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 fafb 	bl	8004fa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	015a      	lsls	r2, r3, #5
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4413      	add	r3, r2
 80019b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b8:	461a      	mov	r2, r3
 80019ba:	2310      	movs	r3, #16
 80019bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	440b      	add	r3, r1
 80019cc:	335d      	adds	r3, #93	; 0x5d
 80019ce:	2208      	movs	r2, #8
 80019d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	015a      	lsls	r2, r3, #5
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4413      	add	r3, r2
 80019da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019de:	461a      	mov	r2, r3
 80019e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	015a      	lsls	r2, r3, #5
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019fc:	d122      	bne.n	8001a44 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	0151      	lsls	r1, r2, #5
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	440a      	add	r2, r1
 8001a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 faba 	bl	8004fa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	015a      	lsls	r2, r3, #5
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a40:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001a42:	e300      	b.n	8002046 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	015a      	lsls	r2, r3, #5
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	f040 80fd 	bne.w	8001c56 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d01b      	beq.n	8001a9c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	3348      	adds	r3, #72	; 0x48
 8001a74:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	0159      	lsls	r1, r3, #5
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	440b      	add	r3, r1
 8001a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001a88:	1ad1      	subs	r1, r2, r3
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4403      	add	r3, r0
 8001a98:	334c      	adds	r3, #76	; 0x4c
 8001a9a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	335d      	adds	r3, #93	; 0x5d
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	3358      	adds	r3, #88	; 0x58
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	015a      	lsls	r2, r3, #5
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4413      	add	r3, r2
 8001acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	440b      	add	r3, r1
 8001ae4:	333f      	adds	r3, #63	; 0x3f
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00a      	beq.n	8001b02 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	440b      	add	r3, r1
 8001afa:	333f      	adds	r3, #63	; 0x3f
 8001afc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d121      	bne.n	8001b46 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	015a      	lsls	r2, r3, #5
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4413      	add	r3, r2
 8001b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	0151      	lsls	r1, r2, #5
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	440a      	add	r2, r1
 8001b18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 fa38 	bl	8004fa2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	015a      	lsls	r2, r3, #5
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2310      	movs	r3, #16
 8001b42:	6093      	str	r3, [r2, #8]
 8001b44:	e070      	b.n	8001c28 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	333f      	adds	r3, #63	; 0x3f
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d12a      	bne.n	8001bb2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	015a      	lsls	r2, r3, #5
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	0151      	lsls	r1, r2, #5
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	440a      	add	r2, r1
 8001b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b7a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	335c      	adds	r3, #92	; 0x5c
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	b2d8      	uxtb	r0, r3
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	335c      	adds	r3, #92	; 0x5c
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4601      	mov	r1, r0
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f006 f8c0 	bl	8007d30 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001bb0:	e03a      	b.n	8001c28 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	333f      	adds	r3, #63	; 0x3f
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d12f      	bne.n	8001c28 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	335c      	adds	r3, #92	; 0x5c
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	440b      	add	r3, r1
 8001bea:	3350      	adds	r3, #80	; 0x50
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	f083 0301 	eor.w	r3, r3, #1
 8001bf2:	b2d8      	uxtb	r0, r3
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	3350      	adds	r3, #80	; 0x50
 8001c04:	4602      	mov	r2, r0
 8001c06:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	b2d8      	uxtb	r0, r3
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	335c      	adds	r3, #92	; 0x5c
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4601      	mov	r1, r0
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f006 f884 	bl	8007d30 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	440b      	add	r3, r1
 8001c36:	3350      	adds	r3, #80	; 0x50
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	f083 0301 	eor.w	r3, r3, #1
 8001c3e:	b2d8      	uxtb	r0, r3
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3350      	adds	r3, #80	; 0x50
 8001c50:	4602      	mov	r2, r0
 8001c52:	701a      	strb	r2, [r3, #0]
}
 8001c54:	e1f7      	b.n	8002046 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	f040 811a 	bne.w	8001ea2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	0151      	lsls	r1, r2, #5
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	440a      	add	r2, r1
 8001c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c88:	f023 0302 	bic.w	r3, r3, #2
 8001c8c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	440b      	add	r3, r1
 8001c9c:	335d      	adds	r3, #93	; 0x5d
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10a      	bne.n	8001cba <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	335c      	adds	r3, #92	; 0x5c
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
 8001cb8:	e0d9      	b.n	8001e6e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	335d      	adds	r3, #93	; 0x5d
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	d10a      	bne.n	8001ce6 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	440b      	add	r3, r1
 8001cde:	335c      	adds	r3, #92	; 0x5c
 8001ce0:	2205      	movs	r2, #5
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e0c3      	b.n	8001e6e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	335d      	adds	r3, #93	; 0x5d
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b06      	cmp	r3, #6
 8001cfa:	d00a      	beq.n	8001d12 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	440b      	add	r3, r1
 8001d0a:	335d      	adds	r3, #93	; 0x5d
 8001d0c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d156      	bne.n	8001dc0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	3358      	adds	r3, #88	; 0x58
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	1c59      	adds	r1, r3, #1
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4403      	add	r3, r0
 8001d34:	3358      	adds	r3, #88	; 0x58
 8001d36:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	3358      	adds	r3, #88	; 0x58
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d914      	bls.n	8001d78 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3358      	adds	r3, #88	; 0x58
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	440b      	add	r3, r1
 8001d70:	335c      	adds	r3, #92	; 0x5c
 8001d72:	2204      	movs	r2, #4
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	e009      	b.n	8001d8c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	335c      	adds	r3, #92	; 0x5c
 8001d88:	2202      	movs	r2, #2
 8001d8a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001da2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001daa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	015a      	lsls	r2, r3, #5
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db8:	461a      	mov	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e056      	b.n	8001e6e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	440b      	add	r3, r1
 8001dce:	335d      	adds	r3, #93	; 0x5d
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d123      	bne.n	8001e1e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	335c      	adds	r3, #92	; 0x5c
 8001de6:	2202      	movs	r2, #2
 8001de8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e00:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e08:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e16:	461a      	mov	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	e027      	b.n	8001e6e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	440b      	add	r3, r1
 8001e2c:	335d      	adds	r3, #93	; 0x5d
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b07      	cmp	r3, #7
 8001e32:	d11c      	bne.n	8001e6e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	440b      	add	r3, r1
 8001e42:	3358      	adds	r3, #88	; 0x58
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	1c59      	adds	r1, r3, #1
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4403      	add	r3, r0
 8001e56:	3358      	adds	r3, #88	; 0x58
 8001e58:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	335c      	adds	r3, #92	; 0x5c
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	b2d8      	uxtb	r0, r3
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	335c      	adds	r3, #92	; 0x5c
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	4601      	mov	r1, r0
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f005 ff48 	bl	8007d30 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001ea0:	e0d1      	b.n	8002046 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb4:	2b80      	cmp	r3, #128	; 0x80
 8001eb6:	d13e      	bne.n	8001f36 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	0151      	lsls	r1, r2, #5
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	440a      	add	r2, r1
 8001ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed2:	f043 0302 	orr.w	r3, r3, #2
 8001ed6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3358      	adds	r3, #88	; 0x58
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	1c59      	adds	r1, r3, #1
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4403      	add	r3, r0
 8001efa:	3358      	adds	r3, #88	; 0x58
 8001efc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	335d      	adds	r3, #93	; 0x5d
 8001f0e:	2206      	movs	r2, #6
 8001f10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 f840 	bl	8004fa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	6093      	str	r3, [r2, #8]
}
 8001f34:	e087      	b.n	8002046 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b10      	cmp	r3, #16
 8001f4a:	d17c      	bne.n	8002046 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	440b      	add	r3, r1
 8001f5a:	333f      	adds	r3, #63	; 0x3f
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d122      	bne.n	8001fa8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	3358      	adds	r3, #88	; 0x58
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	0151      	lsls	r1, r2, #5
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	440a      	add	r2, r1
 8001f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f002 fffe 	bl	8004fa2 <USB_HC_Halt>
 8001fa6:	e045      	b.n	8002034 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	333f      	adds	r3, #63	; 0x3f
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	440b      	add	r3, r1
 8001fcc:	333f      	adds	r3, #63	; 0x3f
 8001fce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d12f      	bne.n	8002034 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3358      	adds	r3, #88	; 0x58
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d121      	bne.n	8002034 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	335d      	adds	r3, #93	; 0x5d
 8002000:	2203      	movs	r2, #3
 8002002:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	0151      	lsls	r1, r2, #5
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	440a      	add	r2, r1
 800201a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f002 ffb7 	bl	8004fa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002040:	461a      	mov	r2, r3
 8002042:	2310      	movs	r3, #16
 8002044:	6093      	str	r3, [r2, #8]
}
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b04      	cmp	r3, #4
 800207c:	d119      	bne.n	80020b2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4413      	add	r3, r2
 8002086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208a:	461a      	mov	r2, r3
 800208c:	2304      	movs	r3, #4
 800208e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	0151      	lsls	r1, r2, #5
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	440a      	add	r2, r1
 80020a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80020b0:	e33e      	b.n	8002730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d141      	bne.n	800214c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d4:	461a      	mov	r2, r3
 80020d6:	2320      	movs	r3, #32
 80020d8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	333d      	adds	r3, #61	; 0x3d
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	f040 831f 	bne.w	8002730 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	440b      	add	r3, r1
 8002100:	333d      	adds	r3, #61	; 0x3d
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	440b      	add	r3, r1
 8002114:	335c      	adds	r3, #92	; 0x5c
 8002116:	2202      	movs	r2, #2
 8002118:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4413      	add	r3, r2
 8002122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	0151      	lsls	r1, r2, #5
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	440a      	add	r2, r1
 8002130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f002 ff2c 	bl	8004fa2 <USB_HC_Halt>
}
 800214a:	e2f1      	b.n	8002730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b40      	cmp	r3, #64	; 0x40
 8002160:	d13f      	bne.n	80021e2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	335d      	adds	r3, #93	; 0x5d
 8002172:	2204      	movs	r2, #4
 8002174:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	333d      	adds	r3, #61	; 0x3d
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	440b      	add	r3, r1
 8002198:	3358      	adds	r3, #88	; 0x58
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	0151      	lsls	r1, r2, #5
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	440a      	add	r2, r1
 80021b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f002 feea 	bl	8004fa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021da:	461a      	mov	r2, r3
 80021dc:	2340      	movs	r3, #64	; 0x40
 80021de:	6093      	str	r3, [r2, #8]
}
 80021e0:	e2a6      	b.n	8002730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021f8:	d122      	bne.n	8002240 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	0151      	lsls	r1, r2, #5
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	440a      	add	r2, r1
 8002210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f002 febc 	bl	8004fa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002236:	461a      	mov	r2, r3
 8002238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800223c:	6093      	str	r3, [r2, #8]
}
 800223e:	e277      	b.n	8002730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d135      	bne.n	80022c2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	3358      	adds	r3, #88	; 0x58
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	0151      	lsls	r1, r2, #5
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	440a      	add	r2, r1
 8002280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f002 fe84 	bl	8004fa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a6:	461a      	mov	r2, r3
 80022a8:	2301      	movs	r3, #1
 80022aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	335d      	adds	r3, #93	; 0x5d
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
}
 80022c0:	e236      	b.n	8002730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d12b      	bne.n	8002330 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e4:	461a      	mov	r2, r3
 80022e6:	2308      	movs	r3, #8
 80022e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	0151      	lsls	r1, r2, #5
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	440a      	add	r2, r1
 8002300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f002 fe44 	bl	8004fa2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	335d      	adds	r3, #93	; 0x5d
 800232a:	2205      	movs	r2, #5
 800232c:	701a      	strb	r2, [r3, #0]
}
 800232e:	e1ff      	b.n	8002730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4413      	add	r3, r2
 8002338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b10      	cmp	r3, #16
 8002344:	d155      	bne.n	80023f2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	440b      	add	r3, r1
 8002354:	3358      	adds	r3, #88	; 0x58
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	335d      	adds	r3, #93	; 0x5d
 800236a:	2203      	movs	r2, #3
 800236c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	333d      	adds	r3, #61	; 0x3d
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d114      	bne.n	80023ae <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	333c      	adds	r3, #60	; 0x3c
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	440b      	add	r3, r1
 80023a8:	333d      	adds	r3, #61	; 0x3d
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	0151      	lsls	r1, r2, #5
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	440a      	add	r2, r1
 80023c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 fde2 	bl	8004fa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ea:	461a      	mov	r2, r3
 80023ec:	2310      	movs	r3, #16
 80023ee:	6093      	str	r3, [r2, #8]
}
 80023f0:	e19e      	b.n	8002730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002404:	2b80      	cmp	r3, #128	; 0x80
 8002406:	d12b      	bne.n	8002460 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	0151      	lsls	r1, r2, #5
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	440a      	add	r2, r1
 800241e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002422:	f043 0302 	orr.w	r3, r3, #2
 8002426:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fdb5 	bl	8004fa2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	440b      	add	r3, r1
 8002446:	335d      	adds	r3, #93	; 0x5d
 8002448:	2206      	movs	r2, #6
 800244a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	461a      	mov	r2, r3
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	6093      	str	r3, [r2, #8]
}
 800245e:	e167      	b.n	8002730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002476:	d135      	bne.n	80024e4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	0151      	lsls	r1, r2, #5
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	440a      	add	r2, r1
 800248e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002492:	f043 0302 	orr.w	r3, r3, #2
 8002496:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 fd7d 	bl	8004fa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b4:	461a      	mov	r2, r3
 80024b6:	2310      	movs	r3, #16
 80024b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	461a      	mov	r2, r3
 80024c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	335d      	adds	r3, #93	; 0x5d
 80024de:	2208      	movs	r2, #8
 80024e0:	701a      	strb	r2, [r3, #0]
}
 80024e2:	e125      	b.n	8002730 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	f040 811a 	bne.w	8002730 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	0151      	lsls	r1, r2, #5
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	440a      	add	r2, r1
 8002512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002516:	f023 0302 	bic.w	r3, r3, #2
 800251a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	335d      	adds	r3, #93	; 0x5d
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d137      	bne.n	80025a2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	335c      	adds	r3, #92	; 0x5c
 8002542:	2201      	movs	r2, #1
 8002544:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	333f      	adds	r3, #63	; 0x3f
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d00b      	beq.n	8002574 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	440b      	add	r3, r1
 800256a:	333f      	adds	r3, #63	; 0x3f
 800256c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800256e:	2b03      	cmp	r3, #3
 8002570:	f040 80c5 	bne.w	80026fe <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	440b      	add	r3, r1
 8002582:	3351      	adds	r3, #81	; 0x51
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	f083 0301 	eor.w	r3, r3, #1
 800258a:	b2d8      	uxtb	r0, r3
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	3351      	adds	r3, #81	; 0x51
 800259c:	4602      	mov	r2, r0
 800259e:	701a      	strb	r2, [r3, #0]
 80025a0:	e0ad      	b.n	80026fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	335d      	adds	r3, #93	; 0x5d
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d10a      	bne.n	80025ce <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	440b      	add	r3, r1
 80025c6:	335c      	adds	r3, #92	; 0x5c
 80025c8:	2202      	movs	r2, #2
 80025ca:	701a      	strb	r2, [r3, #0]
 80025cc:	e097      	b.n	80026fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	440b      	add	r3, r1
 80025dc:	335d      	adds	r3, #93	; 0x5d
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d10a      	bne.n	80025fa <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	335c      	adds	r3, #92	; 0x5c
 80025f4:	2202      	movs	r2, #2
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	e081      	b.n	80026fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	440b      	add	r3, r1
 8002608:	335d      	adds	r3, #93	; 0x5d
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b05      	cmp	r3, #5
 800260e:	d10a      	bne.n	8002626 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	335c      	adds	r3, #92	; 0x5c
 8002620:	2205      	movs	r2, #5
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e06b      	b.n	80026fe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	440b      	add	r3, r1
 8002634:	335d      	adds	r3, #93	; 0x5d
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b06      	cmp	r3, #6
 800263a:	d00a      	beq.n	8002652 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	335d      	adds	r3, #93	; 0x5d
 800264c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800264e:	2b08      	cmp	r3, #8
 8002650:	d155      	bne.n	80026fe <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	440b      	add	r3, r1
 8002660:	3358      	adds	r3, #88	; 0x58
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	1c59      	adds	r1, r3, #1
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4403      	add	r3, r0
 8002674:	3358      	adds	r3, #88	; 0x58
 8002676:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	3358      	adds	r3, #88	; 0x58
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b03      	cmp	r3, #3
 800268c:	d914      	bls.n	80026b8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	3358      	adds	r3, #88	; 0x58
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	335c      	adds	r3, #92	; 0x5c
 80026b2:	2204      	movs	r2, #4
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e009      	b.n	80026cc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	335c      	adds	r3, #92	; 0x5c
 80026c8:	2202      	movs	r2, #2
 80026ca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026e2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026ea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	461a      	mov	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270a:	461a      	mov	r2, r3
 800270c:	2302      	movs	r3, #2
 800270e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	b2d8      	uxtb	r0, r3
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	335c      	adds	r3, #92	; 0x5c
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	4601      	mov	r1, r0
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f005 fb00 	bl	8007d30 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002730:	bf00      	nop
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	0c5b      	lsrs	r3, r3, #17
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800276c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d003      	beq.n	800277c <HCD_RXQLVL_IRQHandler+0x44>
 8002774:	2b05      	cmp	r3, #5
 8002776:	f000 8082 	beq.w	800287e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800277a:	e083      	b.n	8002884 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d07f      	beq.n	8002882 <HCD_RXQLVL_IRQHandler+0x14a>
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	440b      	add	r3, r1
 8002790:	3344      	adds	r3, #68	; 0x44
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d074      	beq.n	8002882 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	3344      	adds	r3, #68	; 0x44
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	b292      	uxth	r2, r2
 80027b2:	4619      	mov	r1, r3
 80027b4:	f002 fb60 	bl	8004e78 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	3344      	adds	r3, #68	; 0x44
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	18d1      	adds	r1, r2, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4403      	add	r3, r0
 80027dc:	3344      	adds	r3, #68	; 0x44
 80027de:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	334c      	adds	r3, #76	; 0x4c
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	18d1      	adds	r1, r2, r3
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4403      	add	r3, r0
 8002804:	334c      	adds	r3, #76	; 0x4c
 8002806:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HCD_RXQLVL_IRQHandler+0x154>)
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d031      	beq.n	8002882 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	4413      	add	r3, r2
 8002826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002834:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800283c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	461a      	mov	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	3350      	adds	r3, #80	; 0x50
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	f083 0301 	eor.w	r3, r3, #1
 8002866:	b2d8      	uxtb	r0, r3
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	440b      	add	r3, r1
 8002876:	3350      	adds	r3, #80	; 0x50
 8002878:	4602      	mov	r2, r0
 800287a:	701a      	strb	r2, [r3, #0]
      break;
 800287c:	e001      	b.n	8002882 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800287e:	bf00      	nop
 8002880:	e000      	b.n	8002884 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002882:	bf00      	nop
  }
}
 8002884:	bf00      	nop
 8002886:	3728      	adds	r7, #40	; 0x28
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	1ff80000 	.word	0x1ff80000

08002890 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80028bc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d10b      	bne.n	80028e0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d102      	bne.n	80028d8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f005 fa10 	bl	8007cf8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f043 0302 	orr.w	r3, r3, #2
 80028de:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d132      	bne.n	8002950 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f043 0308 	orr.w	r3, r3, #8
 80028f0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d126      	bne.n	800294a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d113      	bne.n	800292c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800290a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800290e:	d106      	bne.n	800291e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2102      	movs	r1, #2
 8002916:	4618      	mov	r0, r3
 8002918:	f002 faf8 	bl	8004f0c <USB_InitFSLSPClkSel>
 800291c:	e011      	b.n	8002942 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2101      	movs	r1, #1
 8002924:	4618      	mov	r0, r3
 8002926:	f002 faf1 	bl	8004f0c <USB_InitFSLSPClkSel>
 800292a:	e00a      	b.n	8002942 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d106      	bne.n	8002942 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800293a:	461a      	mov	r2, r3
 800293c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002940:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f005 fa06 	bl	8007d54 <HAL_HCD_PortEnabled_Callback>
 8002948:	e002      	b.n	8002950 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f005 fa10 	bl	8007d70 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b20      	cmp	r3, #32
 8002958:	d103      	bne.n	8002962 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f043 0320 	orr.w	r3, r3, #32
 8002960:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002968:	461a      	mov	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	6013      	str	r3, [r2, #0]
}
 800296e:	bf00      	nop
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e11f      	b.n	8002bca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe f8cc 	bl	8000b3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2224      	movs	r2, #36	; 0x24
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029dc:	f001 f9de 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 80029e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4a7b      	ldr	r2, [pc, #492]	; (8002bd4 <HAL_I2C_Init+0x25c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d807      	bhi.n	80029fc <HAL_I2C_Init+0x84>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a7a      	ldr	r2, [pc, #488]	; (8002bd8 <HAL_I2C_Init+0x260>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	bf94      	ite	ls
 80029f4:	2301      	movls	r3, #1
 80029f6:	2300      	movhi	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	e006      	b.n	8002a0a <HAL_I2C_Init+0x92>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4a77      	ldr	r2, [pc, #476]	; (8002bdc <HAL_I2C_Init+0x264>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	bf94      	ite	ls
 8002a04:	2301      	movls	r3, #1
 8002a06:	2300      	movhi	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0db      	b.n	8002bca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a72      	ldr	r2, [pc, #456]	; (8002be0 <HAL_I2C_Init+0x268>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0c9b      	lsrs	r3, r3, #18
 8002a1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a64      	ldr	r2, [pc, #400]	; (8002bd4 <HAL_I2C_Init+0x25c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d802      	bhi.n	8002a4c <HAL_I2C_Init+0xd4>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	e009      	b.n	8002a60 <HAL_I2C_Init+0xe8>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	4a63      	ldr	r2, [pc, #396]	; (8002be4 <HAL_I2C_Init+0x26c>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	099b      	lsrs	r3, r3, #6
 8002a5e:	3301      	adds	r3, #1
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4956      	ldr	r1, [pc, #344]	; (8002bd4 <HAL_I2C_Init+0x25c>)
 8002a7c:	428b      	cmp	r3, r1
 8002a7e:	d80d      	bhi.n	8002a9c <HAL_I2C_Init+0x124>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1e59      	subs	r1, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	bf38      	it	cc
 8002a98:	2304      	movcc	r3, #4
 8002a9a:	e04f      	b.n	8002b3c <HAL_I2C_Init+0x1c4>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d111      	bne.n	8002ac8 <HAL_I2C_Init+0x150>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	440b      	add	r3, r1
 8002ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	e012      	b.n	8002aee <HAL_I2C_Init+0x176>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1e58      	subs	r0, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	0099      	lsls	r1, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Init+0x17e>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e022      	b.n	8002b3c <HAL_I2C_Init+0x1c4>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10e      	bne.n	8002b1c <HAL_I2C_Init+0x1a4>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1e58      	subs	r0, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	440b      	add	r3, r1
 8002b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1a:	e00f      	b.n	8002b3c <HAL_I2C_Init+0x1c4>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1e58      	subs	r0, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	0099      	lsls	r1, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b32:	3301      	adds	r3, #1
 8002b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	6809      	ldr	r1, [r1, #0]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6911      	ldr	r1, [r2, #16]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68d2      	ldr	r2, [r2, #12]
 8002b76:	4311      	orrs	r1, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	000186a0 	.word	0x000186a0
 8002bd8:	001e847f 	.word	0x001e847f
 8002bdc:	003d08ff 	.word	0x003d08ff
 8002be0:	431bde83 	.word	0x431bde83
 8002be4:	10624dd3 	.word	0x10624dd3

08002be8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e128      	b.n	8002e4c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a90      	ldr	r2, [pc, #576]	; (8002e54 <HAL_I2S_Init+0x26c>)
 8002c12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7fd ffd9 	bl	8000bcc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002c30:	f023 030f 	bic.w	r3, r3, #15
 8002c34:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d060      	beq.n	8002d08 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002c4e:	2310      	movs	r3, #16
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e001      	b.n	8002c58 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002c54:	2320      	movs	r3, #32
 8002c56:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d802      	bhi.n	8002c66 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002c66:	2001      	movs	r0, #1
 8002c68:	f001 f9d4 	bl	8004014 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c6c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c76:	d125      	bne.n	8002cc4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d010      	beq.n	8002ca2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	461a      	mov	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	3305      	adds	r3, #5
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	e01f      	b.n	8002ce2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbe:	3305      	adds	r3, #5
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	e00e      	b.n	8002ce2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	3305      	adds	r3, #5
 8002ce0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4a5c      	ldr	r2, [pc, #368]	; (8002e58 <HAL_I2S_Init+0x270>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	08db      	lsrs	r3, r3, #3
 8002cec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	e003      	b.n	8002d10 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d902      	bls.n	8002d1c <HAL_I2S_Init+0x134>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	2bff      	cmp	r3, #255	; 0xff
 8002d1a:	d907      	bls.n	8002d2c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d20:	f043 0210 	orr.w	r2, r3, #16
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e08f      	b.n	8002e4c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	ea42 0103 	orr.w	r1, r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002d4a:	f023 030f 	bic.w	r3, r3, #15
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6851      	ldr	r1, [r2, #4]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6892      	ldr	r2, [r2, #8]
 8002d56:	4311      	orrs	r1, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68d2      	ldr	r2, [r2, #12]
 8002d5c:	4311      	orrs	r1, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6992      	ldr	r2, [r2, #24]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d6e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d161      	bne.n	8002e3c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a38      	ldr	r2, [pc, #224]	; (8002e5c <HAL_I2S_Init+0x274>)
 8002d7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a37      	ldr	r2, [pc, #220]	; (8002e60 <HAL_I2S_Init+0x278>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d101      	bne.n	8002d8c <HAL_I2S_Init+0x1a4>
 8002d88:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <HAL_I2S_Init+0x27c>)
 8002d8a:	e001      	b.n	8002d90 <HAL_I2S_Init+0x1a8>
 8002d8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	4932      	ldr	r1, [pc, #200]	; (8002e60 <HAL_I2S_Init+0x278>)
 8002d98:	428a      	cmp	r2, r1
 8002d9a:	d101      	bne.n	8002da0 <HAL_I2S_Init+0x1b8>
 8002d9c:	4a31      	ldr	r2, [pc, #196]	; (8002e64 <HAL_I2S_Init+0x27c>)
 8002d9e:	e001      	b.n	8002da4 <HAL_I2S_Init+0x1bc>
 8002da0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002da4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002da8:	f023 030f 	bic.w	r3, r3, #15
 8002dac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2b      	ldr	r2, [pc, #172]	; (8002e60 <HAL_I2S_Init+0x278>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d101      	bne.n	8002dbc <HAL_I2S_Init+0x1d4>
 8002db8:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <HAL_I2S_Init+0x27c>)
 8002dba:	e001      	b.n	8002dc0 <HAL_I2S_Init+0x1d8>
 8002dbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a25      	ldr	r2, [pc, #148]	; (8002e60 <HAL_I2S_Init+0x278>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2S_Init+0x1ea>
 8002dce:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <HAL_I2S_Init+0x27c>)
 8002dd0:	e001      	b.n	8002dd6 <HAL_I2S_Init+0x1ee>
 8002dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de2:	d003      	beq.n	8002dec <HAL_I2S_Init+0x204>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d103      	bne.n	8002df4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	e001      	b.n	8002df8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002df4:	2300      	movs	r3, #0
 8002df6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	b299      	uxth	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002e0e:	4303      	orrs	r3, r0
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	430b      	orrs	r3, r1
 8002e14:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002e16:	4313      	orrs	r3, r2
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	897b      	ldrh	r3, [r7, #10]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e24:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a0d      	ldr	r2, [pc, #52]	; (8002e60 <HAL_I2S_Init+0x278>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_I2S_Init+0x24c>
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <HAL_I2S_Init+0x27c>)
 8002e32:	e001      	b.n	8002e38 <HAL_I2S_Init+0x250>
 8002e34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e38:	897a      	ldrh	r2, [r7, #10]
 8002e3a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	08002f5f 	.word	0x08002f5f
 8002e58:	cccccccd 	.word	0xcccccccd
 8002e5c:	08003075 	.word	0x08003075
 8002e60:	40003800 	.word	0x40003800
 8002e64:	40003400 	.word	0x40003400

08002e68 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	881a      	ldrh	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	1c9a      	adds	r2, r3, #2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10e      	bne.n	8002ef8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ee8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ffb8 	bl	8002e68 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	b292      	uxth	r2, r2
 8002f14:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	1c9a      	adds	r2, r3, #2
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10e      	bne.n	8002f56 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f46:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ff93 	bl	8002e7c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b086      	sub	sp, #24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d13a      	bne.n	8002ff0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d109      	bne.n	8002f98 <I2S_IRQHandler+0x3a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8e:	2b40      	cmp	r3, #64	; 0x40
 8002f90:	d102      	bne.n	8002f98 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ffb4 	bl	8002f00 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d126      	bne.n	8002ff0 <I2S_IRQHandler+0x92>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d11f      	bne.n	8002ff0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fbe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f043 0202 	orr.w	r2, r3, #2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff ff50 	bl	8002e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d136      	bne.n	800306a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b02      	cmp	r3, #2
 8003004:	d109      	bne.n	800301a <I2S_IRQHandler+0xbc>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003010:	2b80      	cmp	r3, #128	; 0x80
 8003012:	d102      	bne.n	800301a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ff45 	bl	8002ea4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b08      	cmp	r3, #8
 8003022:	d122      	bne.n	800306a <I2S_IRQHandler+0x10c>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b20      	cmp	r3, #32
 8003030:	d11b      	bne.n	800306a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003040:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	f043 0204 	orr.w	r2, r3, #4
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff13 	bl	8002e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800306a:	bf00      	nop
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4aa2      	ldr	r2, [pc, #648]	; (8003314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800308e:	4ba2      	ldr	r3, [pc, #648]	; (8003318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003090:	e001      	b.n	8003096 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003092:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a9b      	ldr	r2, [pc, #620]	; (8003314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d101      	bne.n	80030b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80030ac:	4b9a      	ldr	r3, [pc, #616]	; (8003318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030ae:	e001      	b.n	80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80030b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c0:	d004      	beq.n	80030cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f040 8099 	bne.w	80031fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d107      	bne.n	80030e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f925 	bl	8003330 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d107      	bne.n	8003100 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f9c8 	bl	8003490 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b40      	cmp	r3, #64	; 0x40
 8003108:	d13a      	bne.n	8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d035      	beq.n	8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a7e      	ldr	r2, [pc, #504]	; (8003314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800311e:	4b7e      	ldr	r3, [pc, #504]	; (8003318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003120:	e001      	b.n	8003126 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003122:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4979      	ldr	r1, [pc, #484]	; (8003314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800312e:	428b      	cmp	r3, r1
 8003130:	d101      	bne.n	8003136 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003132:	4b79      	ldr	r3, [pc, #484]	; (8003318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003134:	e001      	b.n	800313a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003136:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800313a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800313e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800314e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f043 0202 	orr.w	r2, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff fe88 	bl	8002e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b08      	cmp	r3, #8
 8003188:	f040 80be 	bne.w	8003308 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 80b8 	beq.w	8003308 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a59      	ldr	r2, [pc, #356]	; (8003314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80031b2:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031b4:	e001      	b.n	80031ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80031b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4954      	ldr	r1, [pc, #336]	; (8003314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031c2:	428b      	cmp	r3, r1
 80031c4:	d101      	bne.n	80031ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80031c6:	4b54      	ldr	r3, [pc, #336]	; (8003318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031c8:	e001      	b.n	80031ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80031ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80031d4:	2300      	movs	r3, #0
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f043 0204 	orr.w	r2, r3, #4
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fe4a 	bl	8002e90 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031fc:	e084      	b.n	8003308 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b02      	cmp	r3, #2
 8003206:	d107      	bne.n	8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f8be 	bl	8003394 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d107      	bne.n	8003232 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f8fd 	bl	800342c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003238:	2b40      	cmp	r3, #64	; 0x40
 800323a:	d12f      	bne.n	800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	d02a      	beq.n	800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003254:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a2e      	ldr	r2, [pc, #184]	; (8003314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d101      	bne.n	8003264 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003260:	4b2d      	ldr	r3, [pc, #180]	; (8003318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003262:	e001      	b.n	8003268 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4929      	ldr	r1, [pc, #164]	; (8003314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003270:	428b      	cmp	r3, r1
 8003272:	d101      	bne.n	8003278 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003274:	4b28      	ldr	r3, [pc, #160]	; (8003318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003276:	e001      	b.n	800327c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800327c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003280:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f043 0202 	orr.w	r2, r3, #2
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff fdfa 	bl	8002e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d131      	bne.n	800330a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d02c      	beq.n	800330a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d101      	bne.n	80032be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80032ba:	4b17      	ldr	r3, [pc, #92]	; (8003318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80032bc:	e001      	b.n	80032c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80032be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4912      	ldr	r1, [pc, #72]	; (8003314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80032ca:	428b      	cmp	r3, r1
 80032cc:	d101      	bne.n	80032d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80032d0:	e001      	b.n	80032d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80032d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032da:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032ea:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	f043 0204 	orr.w	r2, r3, #4
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff fdc5 	bl	8002e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003306:	e000      	b.n	800330a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003308:	bf00      	nop
}
 800330a:	bf00      	nop
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40003800 	.word	0x40003800
 8003318:	40003400 	.word	0x40003400

0800331c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	1c99      	adds	r1, r3, #2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6251      	str	r1, [r2, #36]	; 0x24
 8003342:	881a      	ldrh	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d113      	bne.n	800338a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003370:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ffc9 	bl	800331c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	1c99      	adds	r1, r3, #2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6251      	str	r1, [r2, #36]	; 0x24
 80033a6:	8819      	ldrh	r1, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1d      	ldr	r2, [pc, #116]	; (8003424 <I2SEx_TxISR_I2SExt+0x90>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d101      	bne.n	80033b6 <I2SEx_TxISR_I2SExt+0x22>
 80033b2:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <I2SEx_TxISR_I2SExt+0x94>)
 80033b4:	e001      	b.n	80033ba <I2SEx_TxISR_I2SExt+0x26>
 80033b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ba:	460a      	mov	r2, r1
 80033bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d121      	bne.n	800341a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a12      	ldr	r2, [pc, #72]	; (8003424 <I2SEx_TxISR_I2SExt+0x90>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d101      	bne.n	80033e4 <I2SEx_TxISR_I2SExt+0x50>
 80033e0:	4b11      	ldr	r3, [pc, #68]	; (8003428 <I2SEx_TxISR_I2SExt+0x94>)
 80033e2:	e001      	b.n	80033e8 <I2SEx_TxISR_I2SExt+0x54>
 80033e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	490d      	ldr	r1, [pc, #52]	; (8003424 <I2SEx_TxISR_I2SExt+0x90>)
 80033f0:	428b      	cmp	r3, r1
 80033f2:	d101      	bne.n	80033f8 <I2SEx_TxISR_I2SExt+0x64>
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <I2SEx_TxISR_I2SExt+0x94>)
 80033f6:	e001      	b.n	80033fc <I2SEx_TxISR_I2SExt+0x68>
 80033f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003400:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff ff81 	bl	800331c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40003800 	.word	0x40003800
 8003428:	40003400 	.word	0x40003400

0800342c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68d8      	ldr	r0, [r3, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	1c99      	adds	r1, r3, #2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003444:	b282      	uxth	r2, r0
 8003446:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d113      	bne.n	8003488 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800346e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff ff4a 	bl	800331c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a20      	ldr	r2, [pc, #128]	; (8003520 <I2SEx_RxISR_I2SExt+0x90>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <I2SEx_RxISR_I2SExt+0x16>
 80034a2:	4b20      	ldr	r3, [pc, #128]	; (8003524 <I2SEx_RxISR_I2SExt+0x94>)
 80034a4:	e001      	b.n	80034aa <I2SEx_RxISR_I2SExt+0x1a>
 80034a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034aa:	68d8      	ldr	r0, [r3, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	1c99      	adds	r1, r3, #2
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80034b6:	b282      	uxth	r2, r0
 80034b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d121      	bne.n	8003516 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a12      	ldr	r2, [pc, #72]	; (8003520 <I2SEx_RxISR_I2SExt+0x90>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d101      	bne.n	80034e0 <I2SEx_RxISR_I2SExt+0x50>
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <I2SEx_RxISR_I2SExt+0x94>)
 80034de:	e001      	b.n	80034e4 <I2SEx_RxISR_I2SExt+0x54>
 80034e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	490d      	ldr	r1, [pc, #52]	; (8003520 <I2SEx_RxISR_I2SExt+0x90>)
 80034ec:	428b      	cmp	r3, r1
 80034ee:	d101      	bne.n	80034f4 <I2SEx_RxISR_I2SExt+0x64>
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <I2SEx_RxISR_I2SExt+0x94>)
 80034f2:	e001      	b.n	80034f8 <I2SEx_RxISR_I2SExt+0x68>
 80034f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d106      	bne.n	8003516 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ff03 	bl	800331c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40003800 	.word	0x40003800
 8003524:	40003400 	.word	0x40003400

08003528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e25b      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d075      	beq.n	8003632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003546:	4ba3      	ldr	r3, [pc, #652]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b04      	cmp	r3, #4
 8003550:	d00c      	beq.n	800356c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003552:	4ba0      	ldr	r3, [pc, #640]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800355a:	2b08      	cmp	r3, #8
 800355c:	d112      	bne.n	8003584 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355e:	4b9d      	ldr	r3, [pc, #628]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800356a:	d10b      	bne.n	8003584 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356c:	4b99      	ldr	r3, [pc, #612]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d05b      	beq.n	8003630 <HAL_RCC_OscConfig+0x108>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d157      	bne.n	8003630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e236      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d106      	bne.n	800359c <HAL_RCC_OscConfig+0x74>
 800358e:	4b91      	ldr	r3, [pc, #580]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a90      	ldr	r2, [pc, #576]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e01d      	b.n	80035d8 <HAL_RCC_OscConfig+0xb0>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x98>
 80035a6:	4b8b      	ldr	r3, [pc, #556]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a8a      	ldr	r2, [pc, #552]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	4b88      	ldr	r3, [pc, #544]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a87      	ldr	r2, [pc, #540]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e00b      	b.n	80035d8 <HAL_RCC_OscConfig+0xb0>
 80035c0:	4b84      	ldr	r3, [pc, #528]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a83      	ldr	r2, [pc, #524]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	4b81      	ldr	r3, [pc, #516]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a80      	ldr	r2, [pc, #512]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d013      	beq.n	8003608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fd fd3e 	bl	8001060 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e8:	f7fd fd3a 	bl	8001060 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	; 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1fb      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	4b76      	ldr	r3, [pc, #472]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0xc0>
 8003606:	e014      	b.n	8003632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fd fd2a 	bl	8001060 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003610:	f7fd fd26 	bl	8001060 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	; 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e1e7      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003622:	4b6c      	ldr	r3, [pc, #432]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0xe8>
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d063      	beq.n	8003706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800363e:	4b65      	ldr	r3, [pc, #404]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364a:	4b62      	ldr	r3, [pc, #392]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003652:	2b08      	cmp	r3, #8
 8003654:	d11c      	bne.n	8003690 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003656:	4b5f      	ldr	r3, [pc, #380]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d116      	bne.n	8003690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003662:	4b5c      	ldr	r3, [pc, #368]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_RCC_OscConfig+0x152>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d001      	beq.n	800367a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e1bb      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367a:	4b56      	ldr	r3, [pc, #344]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4952      	ldr	r1, [pc, #328]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	e03a      	b.n	8003706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003698:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <HAL_RCC_OscConfig+0x2b0>)
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7fd fcdf 	bl	8001060 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a6:	f7fd fcdb 	bl	8001060 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e19c      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b8:	4b46      	ldr	r3, [pc, #280]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c4:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4940      	ldr	r1, [pc, #256]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]
 80036d8:	e015      	b.n	8003706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036da:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <HAL_RCC_OscConfig+0x2b0>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fd fcbe 	bl	8001060 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e8:	f7fd fcba 	bl	8001060 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e17b      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fa:	4b36      	ldr	r3, [pc, #216]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d030      	beq.n	8003774 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d016      	beq.n	8003748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371a:	4b30      	ldr	r3, [pc, #192]	; (80037dc <HAL_RCC_OscConfig+0x2b4>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fd fc9e 	bl	8001060 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003728:	f7fd fc9a 	bl	8001060 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e15b      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373a:	4b26      	ldr	r3, [pc, #152]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800373c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x200>
 8003746:	e015      	b.n	8003774 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003748:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCC_OscConfig+0x2b4>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374e:	f7fd fc87 	bl	8001060 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003756:	f7fd fc83 	bl	8001060 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e144      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003768:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800376a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f0      	bne.n	8003756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a0 	beq.w	80038c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a0e      	ldr	r2, [pc, #56]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_OscConfig+0x2b8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d121      	bne.n	8003802 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <HAL_RCC_OscConfig+0x2b8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a07      	ldr	r2, [pc, #28]	; (80037e0 <HAL_RCC_OscConfig+0x2b8>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ca:	f7fd fc49 	bl	8001060 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	e011      	b.n	80037f6 <HAL_RCC_OscConfig+0x2ce>
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	42470000 	.word	0x42470000
 80037dc:	42470e80 	.word	0x42470e80
 80037e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e4:	f7fd fc3c 	bl	8001060 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0fd      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f6:	4b81      	ldr	r3, [pc, #516]	; (80039fc <HAL_RCC_OscConfig+0x4d4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d106      	bne.n	8003818 <HAL_RCC_OscConfig+0x2f0>
 800380a:	4b7d      	ldr	r3, [pc, #500]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a7c      	ldr	r2, [pc, #496]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6713      	str	r3, [r2, #112]	; 0x70
 8003816:	e01c      	b.n	8003852 <HAL_RCC_OscConfig+0x32a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b05      	cmp	r3, #5
 800381e:	d10c      	bne.n	800383a <HAL_RCC_OscConfig+0x312>
 8003820:	4b77      	ldr	r3, [pc, #476]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4a76      	ldr	r2, [pc, #472]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	6713      	str	r3, [r2, #112]	; 0x70
 800382c:	4b74      	ldr	r3, [pc, #464]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	4a73      	ldr	r2, [pc, #460]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6713      	str	r3, [r2, #112]	; 0x70
 8003838:	e00b      	b.n	8003852 <HAL_RCC_OscConfig+0x32a>
 800383a:	4b71      	ldr	r3, [pc, #452]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	4a70      	ldr	r2, [pc, #448]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6713      	str	r3, [r2, #112]	; 0x70
 8003846:	4b6e      	ldr	r3, [pc, #440]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	4a6d      	ldr	r2, [pc, #436]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 800384c:	f023 0304 	bic.w	r3, r3, #4
 8003850:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d015      	beq.n	8003886 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385a:	f7fd fc01 	bl	8001060 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fd fbfd 	bl	8001060 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0bc      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	4b61      	ldr	r3, [pc, #388]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ee      	beq.n	8003862 <HAL_RCC_OscConfig+0x33a>
 8003884:	e014      	b.n	80038b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003886:	f7fd fbeb 	bl	8001060 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fd fbe7 	bl	8001060 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	; 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e0a6      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a4:	4b56      	ldr	r3, [pc, #344]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1ee      	bne.n	800388e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d105      	bne.n	80038c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b6:	4b52      	ldr	r3, [pc, #328]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	4a51      	ldr	r2, [pc, #324]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 80038bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8092 	beq.w	80039f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038cc:	4b4c      	ldr	r3, [pc, #304]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d05c      	beq.n	8003992 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d141      	bne.n	8003964 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e0:	4b48      	ldr	r3, [pc, #288]	; (8003a04 <HAL_RCC_OscConfig+0x4dc>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e6:	f7fd fbbb 	bl	8001060 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ee:	f7fd fbb7 	bl	8001060 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e078      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003900:	4b3f      	ldr	r3, [pc, #252]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	019b      	lsls	r3, r3, #6
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	3b01      	subs	r3, #1
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	061b      	lsls	r3, r3, #24
 8003930:	4933      	ldr	r1, [pc, #204]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003932:	4313      	orrs	r3, r2
 8003934:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003936:	4b33      	ldr	r3, [pc, #204]	; (8003a04 <HAL_RCC_OscConfig+0x4dc>)
 8003938:	2201      	movs	r2, #1
 800393a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7fd fb90 	bl	8001060 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003944:	f7fd fb8c 	bl	8001060 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e04d      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003956:	4b2a      	ldr	r3, [pc, #168]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x41c>
 8003962:	e045      	b.n	80039f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003964:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <HAL_RCC_OscConfig+0x4dc>)
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396a:	f7fd fb79 	bl	8001060 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003972:	f7fd fb75 	bl	8001060 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e036      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003984:	4b1e      	ldr	r3, [pc, #120]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f0      	bne.n	8003972 <HAL_RCC_OscConfig+0x44a>
 8003990:	e02e      	b.n	80039f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e029      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800399e:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <HAL_RCC_OscConfig+0x4d8>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d11c      	bne.n	80039ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d115      	bne.n	80039ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039c6:	4013      	ands	r3, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d10d      	bne.n	80039ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d106      	bne.n	80039ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40007000 	.word	0x40007000
 8003a00:	40023800 	.word	0x40023800
 8003a04:	42470060 	.word	0x42470060

08003a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0cc      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b68      	ldr	r3, [pc, #416]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d90c      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b65      	ldr	r3, [pc, #404]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0b8      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a5c:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a74:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a52      	ldr	r2, [pc, #328]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a80:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	494d      	ldr	r1, [pc, #308]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d044      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d119      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e07f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e067      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae6:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4934      	ldr	r1, [pc, #208]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af8:	f7fd fab2 	bl	8001060 <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7fd faae 	bl	8001060 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e04f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 020c 	and.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d1eb      	bne.n	8003b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b28:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d20c      	bcs.n	8003b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e032      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5c:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4916      	ldr	r1, [pc, #88]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	490e      	ldr	r1, [pc, #56]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b8e:	f000 f821 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003b92:	4601      	mov	r1, r0
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba0:	5cd3      	ldrb	r3, [r2, r3]
 8003ba2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fd f95c 	bl	8000e6c <HAL_InitTick>

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40023c00 	.word	0x40023c00
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	08007f20 	.word	0x08007f20
 8003bcc:	20000000 	.word	0x20000000
 8003bd0:	20000004 	.word	0x20000004

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	607b      	str	r3, [r7, #4]
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	2300      	movs	r3, #0
 8003be4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bea:	4b63      	ldr	r3, [pc, #396]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d007      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x32>
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d008      	beq.n	8003c0c <HAL_RCC_GetSysClockFreq+0x38>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f040 80b4 	bne.w	8003d68 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c00:	4b5e      	ldr	r3, [pc, #376]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c02:	60bb      	str	r3, [r7, #8]
       break;
 8003c04:	e0b3      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c06:	4b5e      	ldr	r3, [pc, #376]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003c08:	60bb      	str	r3, [r7, #8]
      break;
 8003c0a:	e0b0      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c0c:	4b5a      	ldr	r3, [pc, #360]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c16:	4b58      	ldr	r3, [pc, #352]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d04a      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c22:	4b55      	ldr	r3, [pc, #340]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	099b      	lsrs	r3, r3, #6
 8003c28:	f04f 0400 	mov.w	r4, #0
 8003c2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	ea03 0501 	and.w	r5, r3, r1
 8003c38:	ea04 0602 	and.w	r6, r4, r2
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	4632      	mov	r2, r6
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	f04f 0400 	mov.w	r4, #0
 8003c48:	0154      	lsls	r4, r2, #5
 8003c4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c4e:	014b      	lsls	r3, r1, #5
 8003c50:	4619      	mov	r1, r3
 8003c52:	4622      	mov	r2, r4
 8003c54:	1b49      	subs	r1, r1, r5
 8003c56:	eb62 0206 	sbc.w	r2, r2, r6
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	f04f 0400 	mov.w	r4, #0
 8003c62:	0194      	lsls	r4, r2, #6
 8003c64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c68:	018b      	lsls	r3, r1, #6
 8003c6a:	1a5b      	subs	r3, r3, r1
 8003c6c:	eb64 0402 	sbc.w	r4, r4, r2
 8003c70:	f04f 0100 	mov.w	r1, #0
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	00e2      	lsls	r2, r4, #3
 8003c7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c7e:	00d9      	lsls	r1, r3, #3
 8003c80:	460b      	mov	r3, r1
 8003c82:	4614      	mov	r4, r2
 8003c84:	195b      	adds	r3, r3, r5
 8003c86:	eb44 0406 	adc.w	r4, r4, r6
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	0262      	lsls	r2, r4, #9
 8003c94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c98:	0259      	lsls	r1, r3, #9
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f04f 0400 	mov.w	r4, #0
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4623      	mov	r3, r4
 8003cac:	f7fc fa90 	bl	80001d0 <__aeabi_uldivmod>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e049      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb8:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	099b      	lsrs	r3, r3, #6
 8003cbe:	f04f 0400 	mov.w	r4, #0
 8003cc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	ea03 0501 	and.w	r5, r3, r1
 8003cce:	ea04 0602 	and.w	r6, r4, r2
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	4632      	mov	r2, r6
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	f04f 0400 	mov.w	r4, #0
 8003cde:	0154      	lsls	r4, r2, #5
 8003ce0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ce4:	014b      	lsls	r3, r1, #5
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4622      	mov	r2, r4
 8003cea:	1b49      	subs	r1, r1, r5
 8003cec:	eb62 0206 	sbc.w	r2, r2, r6
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	f04f 0400 	mov.w	r4, #0
 8003cf8:	0194      	lsls	r4, r2, #6
 8003cfa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cfe:	018b      	lsls	r3, r1, #6
 8003d00:	1a5b      	subs	r3, r3, r1
 8003d02:	eb64 0402 	sbc.w	r4, r4, r2
 8003d06:	f04f 0100 	mov.w	r1, #0
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	00e2      	lsls	r2, r4, #3
 8003d10:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d14:	00d9      	lsls	r1, r3, #3
 8003d16:	460b      	mov	r3, r1
 8003d18:	4614      	mov	r4, r2
 8003d1a:	195b      	adds	r3, r3, r5
 8003d1c:	eb44 0406 	adc.w	r4, r4, r6
 8003d20:	f04f 0100 	mov.w	r1, #0
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	02a2      	lsls	r2, r4, #10
 8003d2a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d2e:	0299      	lsls	r1, r3, #10
 8003d30:	460b      	mov	r3, r1
 8003d32:	4614      	mov	r4, r2
 8003d34:	4618      	mov	r0, r3
 8003d36:	4621      	mov	r1, r4
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f04f 0400 	mov.w	r4, #0
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4623      	mov	r3, r4
 8003d42:	f7fc fa45 	bl	80001d0 <__aeabi_uldivmod>
 8003d46:	4603      	mov	r3, r0
 8003d48:	460c      	mov	r4, r1
 8003d4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	0c1b      	lsrs	r3, r3, #16
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	3301      	adds	r3, #1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	60bb      	str	r3, [r7, #8]
      break;
 8003d66:	e002      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d6a:	60bb      	str	r3, [r7, #8]
      break;
 8003d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	00f42400 	.word	0x00f42400
 8003d80:	007a1200 	.word	0x007a1200

08003d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d88:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000000 	.word	0x20000000

08003d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003da0:	f7ff fff0 	bl	8003d84 <HAL_RCC_GetHCLKFreq>
 8003da4:	4601      	mov	r1, r0
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	0a9b      	lsrs	r3, r3, #10
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	4a03      	ldr	r2, [pc, #12]	; (8003dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db2:	5cd3      	ldrb	r3, [r2, r3]
 8003db4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	08007f30 	.word	0x08007f30

08003dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dc8:	f7ff ffdc 	bl	8003d84 <HAL_RCC_GetHCLKFreq>
 8003dcc:	4601      	mov	r1, r0
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0b5b      	lsrs	r3, r3, #13
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4a03      	ldr	r2, [pc, #12]	; (8003de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dda:	5cd3      	ldrb	r3, [r2, r3]
 8003ddc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	08007f30 	.word	0x08007f30

08003dec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	220f      	movs	r2, #15
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dfc:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <HAL_RCC_GetClockConfig+0x5c>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0203 	and.w	r2, r3, #3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e08:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <HAL_RCC_GetClockConfig+0x5c>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <HAL_RCC_GetClockConfig+0x5c>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_RCC_GetClockConfig+0x5c>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	08db      	lsrs	r3, r3, #3
 8003e26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_RCC_GetClockConfig+0x60>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 020f 	and.w	r2, r3, #15
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	601a      	str	r2, [r3, #0]
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	40023c00 	.word	0x40023c00

08003e50 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d035      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e78:	4b62      	ldr	r3, [pc, #392]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e7e:	f7fd f8ef 	bl	8001060 <HAL_GetTick>
 8003e82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e86:	f7fd f8eb 	bl	8001060 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0b0      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e98:	4b5b      	ldr	r3, [pc, #364]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f0      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	019a      	lsls	r2, r3, #6
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	071b      	lsls	r3, r3, #28
 8003eb0:	4955      	ldr	r1, [pc, #340]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003eb8:	4b52      	ldr	r3, [pc, #328]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ebe:	f7fd f8cf 	bl	8001060 <HAL_GetTick>
 8003ec2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ec6:	f7fd f8cb 	bl	8001060 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e090      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ed8:	4b4b      	ldr	r3, [pc, #300]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0f0      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8083 	beq.w	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	4b44      	ldr	r3, [pc, #272]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a43      	ldr	r2, [pc, #268]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
 8003f02:	4b41      	ldr	r3, [pc, #260]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f0e:	4b3f      	ldr	r3, [pc, #252]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a3e      	ldr	r2, [pc, #248]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f1a:	f7fd f8a1 	bl	8001060 <HAL_GetTick>
 8003f1e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f20:	e008      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f22:	f7fd f89d 	bl	8001060 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e062      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f34:	4b35      	ldr	r3, [pc, #212]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f0      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f40:	4b31      	ldr	r3, [pc, #196]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f48:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d02f      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d028      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f5e:	4b2a      	ldr	r3, [pc, #168]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f66:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f68:	4b29      	ldr	r3, [pc, #164]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f6e:	4b28      	ldr	r3, [pc, #160]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f74:	4a24      	ldr	r2, [pc, #144]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f7a:	4b23      	ldr	r3, [pc, #140]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d114      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f86:	f7fd f86b 	bl	8001060 <HAL_GetTick>
 8003f8a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fd f867 	bl	8001060 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e02a      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa4:	4b18      	ldr	r3, [pc, #96]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ee      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fbc:	d10d      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd2:	490d      	ldr	r1, [pc, #52]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	608b      	str	r3, [r1, #8]
 8003fd8:	e005      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003fda:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4a0a      	ldr	r2, [pc, #40]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fe0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fe4:	6093      	str	r3, [r2, #8]
 8003fe6:	4b08      	ldr	r3, [pc, #32]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff2:	4905      	ldr	r1, [pc, #20]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	42470068 	.word	0x42470068
 8004008:	40023800 	.word	0x40023800
 800400c:	40007000 	.word	0x40007000
 8004010:	42470e40 	.word	0x42470e40

08004014 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d13d      	bne.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004032:	4b22      	ldr	r3, [pc, #136]	; (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800403a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d004      	beq.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004042:	2b01      	cmp	r3, #1
 8004044:	d12f      	bne.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004046:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004048:	617b      	str	r3, [r7, #20]
          break;
 800404a:	e02f      	b.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004058:	d108      	bne.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800405a:	4b18      	ldr	r3, [pc, #96]	; (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004062:	4a18      	ldr	r2, [pc, #96]	; (80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004064:	fbb2 f3f3 	udiv	r3, r2, r3
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	e007      	b.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800406c:	4b13      	ldr	r3, [pc, #76]	; (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004074:	4a14      	ldr	r2, [pc, #80]	; (80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004076:	fbb2 f3f3 	udiv	r3, r2, r3
 800407a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004096:	0f1b      	lsrs	r3, r3, #28
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a2:	617b      	str	r3, [r7, #20]
          break;
 80040a4:	e002      	b.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
          break;
 80040aa:	bf00      	nop
        }
      }
      break;
 80040ac:	bf00      	nop
    }
  }
  return frequency;
 80040ae:	697b      	ldr	r3, [r7, #20]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	40023800 	.word	0x40023800
 80040c0:	00bb8000 	.word	0x00bb8000
 80040c4:	007a1200 	.word	0x007a1200
 80040c8:	00f42400 	.word	0x00f42400

080040cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e056      	b.n	800418c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d106      	bne.n	80040fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7fc fdcf 	bl	8000c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2202      	movs	r2, #2
 8004102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004114:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	ea42 0103 	orr.w	r1, r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	f003 0104 	and.w	r1, r3, #4
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69da      	ldr	r2, [r3, #28]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800417a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e01d      	b.n	80041e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f815 	bl	80041ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	4610      	mov	r0, r2
 80041d4:	f000 f968 	bl	80044a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b06      	cmp	r3, #6
 8004226:	d007      	beq.n	8004238 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b02      	cmp	r3, #2
 800425a:	d122      	bne.n	80042a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b02      	cmp	r3, #2
 8004268:	d11b      	bne.n	80042a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f06f 0202 	mvn.w	r2, #2
 8004272:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f8ee 	bl	800446a <HAL_TIM_IC_CaptureCallback>
 800428e:	e005      	b.n	800429c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f8e0 	bl	8004456 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f8f1 	bl	800447e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d122      	bne.n	80042f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d11b      	bne.n	80042f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f06f 0204 	mvn.w	r2, #4
 80042c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f8c4 	bl	800446a <HAL_TIM_IC_CaptureCallback>
 80042e2:	e005      	b.n	80042f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f8b6 	bl	8004456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f8c7 	bl	800447e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b08      	cmp	r3, #8
 8004302:	d122      	bne.n	800434a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b08      	cmp	r3, #8
 8004310:	d11b      	bne.n	800434a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f06f 0208 	mvn.w	r2, #8
 800431a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2204      	movs	r2, #4
 8004320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f89a 	bl	800446a <HAL_TIM_IC_CaptureCallback>
 8004336:	e005      	b.n	8004344 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f88c 	bl	8004456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f89d 	bl	800447e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b10      	cmp	r3, #16
 8004356:	d122      	bne.n	800439e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b10      	cmp	r3, #16
 8004364:	d11b      	bne.n	800439e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f06f 0210 	mvn.w	r2, #16
 800436e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2208      	movs	r2, #8
 8004374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f870 	bl	800446a <HAL_TIM_IC_CaptureCallback>
 800438a:	e005      	b.n	8004398 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f862 	bl	8004456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f873 	bl	800447e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d10e      	bne.n	80043ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d107      	bne.n	80043ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f06f 0201 	mvn.w	r2, #1
 80043c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7fc fb77 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d4:	2b80      	cmp	r3, #128	; 0x80
 80043d6:	d10e      	bne.n	80043f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e2:	2b80      	cmp	r3, #128	; 0x80
 80043e4:	d107      	bne.n	80043f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f903 	bl	80045fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004400:	2b40      	cmp	r3, #64	; 0x40
 8004402:	d10e      	bne.n	8004422 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d107      	bne.n	8004422 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800441a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f838 	bl	8004492 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b20      	cmp	r3, #32
 800442e:	d10e      	bne.n	800444e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b20      	cmp	r3, #32
 800443c:	d107      	bne.n	800444e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f06f 0220 	mvn.w	r2, #32
 8004446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f8cd 	bl	80045e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a40      	ldr	r2, [pc, #256]	; (80045bc <TIM_Base_SetConfig+0x114>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d013      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c6:	d00f      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3d      	ldr	r2, [pc, #244]	; (80045c0 <TIM_Base_SetConfig+0x118>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00b      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3c      	ldr	r2, [pc, #240]	; (80045c4 <TIM_Base_SetConfig+0x11c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d007      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3b      	ldr	r2, [pc, #236]	; (80045c8 <TIM_Base_SetConfig+0x120>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3a      	ldr	r2, [pc, #232]	; (80045cc <TIM_Base_SetConfig+0x124>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d108      	bne.n	80044fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2f      	ldr	r2, [pc, #188]	; (80045bc <TIM_Base_SetConfig+0x114>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d02b      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004508:	d027      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <TIM_Base_SetConfig+0x118>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d023      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2b      	ldr	r2, [pc, #172]	; (80045c4 <TIM_Base_SetConfig+0x11c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d01f      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2a      	ldr	r2, [pc, #168]	; (80045c8 <TIM_Base_SetConfig+0x120>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01b      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a29      	ldr	r2, [pc, #164]	; (80045cc <TIM_Base_SetConfig+0x124>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d017      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a28      	ldr	r2, [pc, #160]	; (80045d0 <TIM_Base_SetConfig+0x128>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a27      	ldr	r2, [pc, #156]	; (80045d4 <TIM_Base_SetConfig+0x12c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00f      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a26      	ldr	r2, [pc, #152]	; (80045d8 <TIM_Base_SetConfig+0x130>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00b      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a25      	ldr	r2, [pc, #148]	; (80045dc <TIM_Base_SetConfig+0x134>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d007      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a24      	ldr	r2, [pc, #144]	; (80045e0 <TIM_Base_SetConfig+0x138>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d003      	beq.n	800455a <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a23      	ldr	r2, [pc, #140]	; (80045e4 <TIM_Base_SetConfig+0x13c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d108      	bne.n	800456c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a0a      	ldr	r2, [pc, #40]	; (80045bc <TIM_Base_SetConfig+0x114>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_Base_SetConfig+0xf8>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a0c      	ldr	r2, [pc, #48]	; (80045cc <TIM_Base_SetConfig+0x124>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d103      	bne.n	80045a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	615a      	str	r2, [r3, #20]
}
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40010000 	.word	0x40010000
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40000800 	.word	0x40000800
 80045c8:	40000c00 	.word	0x40000c00
 80045cc:	40010400 	.word	0x40010400
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800
 80045dc:	40001800 	.word	0x40001800
 80045e0:	40001c00 	.word	0x40001c00
 80045e4:	40002000 	.word	0x40002000

080045e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e03f      	b.n	80046a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc fb78 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2224      	movs	r2, #36	; 0x24
 8004640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f829 	bl	80046ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695a      	ldr	r2, [r3, #20]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004678:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004688:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80046ee:	f023 030c 	bic.w	r3, r3, #12
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	68f9      	ldr	r1, [r7, #12]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471a:	f040 818b 	bne.w	8004a34 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4ac1      	ldr	r2, [pc, #772]	; (8004a28 <UART_SetConfig+0x37c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d005      	beq.n	8004734 <UART_SetConfig+0x88>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4abf      	ldr	r2, [pc, #764]	; (8004a2c <UART_SetConfig+0x380>)
 800472e:	4293      	cmp	r3, r2
 8004730:	f040 80bd 	bne.w	80048ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004734:	f7ff fb46 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
 8004738:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	461d      	mov	r5, r3
 800473e:	f04f 0600 	mov.w	r6, #0
 8004742:	46a8      	mov	r8, r5
 8004744:	46b1      	mov	r9, r6
 8004746:	eb18 0308 	adds.w	r3, r8, r8
 800474a:	eb49 0409 	adc.w	r4, r9, r9
 800474e:	4698      	mov	r8, r3
 8004750:	46a1      	mov	r9, r4
 8004752:	eb18 0805 	adds.w	r8, r8, r5
 8004756:	eb49 0906 	adc.w	r9, r9, r6
 800475a:	f04f 0100 	mov.w	r1, #0
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004766:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800476a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800476e:	4688      	mov	r8, r1
 8004770:	4691      	mov	r9, r2
 8004772:	eb18 0005 	adds.w	r0, r8, r5
 8004776:	eb49 0106 	adc.w	r1, r9, r6
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	461d      	mov	r5, r3
 8004780:	f04f 0600 	mov.w	r6, #0
 8004784:	196b      	adds	r3, r5, r5
 8004786:	eb46 0406 	adc.w	r4, r6, r6
 800478a:	461a      	mov	r2, r3
 800478c:	4623      	mov	r3, r4
 800478e:	f7fb fd1f 	bl	80001d0 <__aeabi_uldivmod>
 8004792:	4603      	mov	r3, r0
 8004794:	460c      	mov	r4, r1
 8004796:	461a      	mov	r2, r3
 8004798:	4ba5      	ldr	r3, [pc, #660]	; (8004a30 <UART_SetConfig+0x384>)
 800479a:	fba3 2302 	umull	r2, r3, r3, r2
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	461d      	mov	r5, r3
 80047a8:	f04f 0600 	mov.w	r6, #0
 80047ac:	46a9      	mov	r9, r5
 80047ae:	46b2      	mov	sl, r6
 80047b0:	eb19 0309 	adds.w	r3, r9, r9
 80047b4:	eb4a 040a 	adc.w	r4, sl, sl
 80047b8:	4699      	mov	r9, r3
 80047ba:	46a2      	mov	sl, r4
 80047bc:	eb19 0905 	adds.w	r9, r9, r5
 80047c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80047c4:	f04f 0100 	mov.w	r1, #0
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047d8:	4689      	mov	r9, r1
 80047da:	4692      	mov	sl, r2
 80047dc:	eb19 0005 	adds.w	r0, r9, r5
 80047e0:	eb4a 0106 	adc.w	r1, sl, r6
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	461d      	mov	r5, r3
 80047ea:	f04f 0600 	mov.w	r6, #0
 80047ee:	196b      	adds	r3, r5, r5
 80047f0:	eb46 0406 	adc.w	r4, r6, r6
 80047f4:	461a      	mov	r2, r3
 80047f6:	4623      	mov	r3, r4
 80047f8:	f7fb fcea 	bl	80001d0 <__aeabi_uldivmod>
 80047fc:	4603      	mov	r3, r0
 80047fe:	460c      	mov	r4, r1
 8004800:	461a      	mov	r2, r3
 8004802:	4b8b      	ldr	r3, [pc, #556]	; (8004a30 <UART_SetConfig+0x384>)
 8004804:	fba3 1302 	umull	r1, r3, r3, r2
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	2164      	movs	r1, #100	; 0x64
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	3332      	adds	r3, #50	; 0x32
 8004816:	4a86      	ldr	r2, [pc, #536]	; (8004a30 <UART_SetConfig+0x384>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004824:	4498      	add	r8, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	461d      	mov	r5, r3
 800482a:	f04f 0600 	mov.w	r6, #0
 800482e:	46a9      	mov	r9, r5
 8004830:	46b2      	mov	sl, r6
 8004832:	eb19 0309 	adds.w	r3, r9, r9
 8004836:	eb4a 040a 	adc.w	r4, sl, sl
 800483a:	4699      	mov	r9, r3
 800483c:	46a2      	mov	sl, r4
 800483e:	eb19 0905 	adds.w	r9, r9, r5
 8004842:	eb4a 0a06 	adc.w	sl, sl, r6
 8004846:	f04f 0100 	mov.w	r1, #0
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004852:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004856:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800485a:	4689      	mov	r9, r1
 800485c:	4692      	mov	sl, r2
 800485e:	eb19 0005 	adds.w	r0, r9, r5
 8004862:	eb4a 0106 	adc.w	r1, sl, r6
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	461d      	mov	r5, r3
 800486c:	f04f 0600 	mov.w	r6, #0
 8004870:	196b      	adds	r3, r5, r5
 8004872:	eb46 0406 	adc.w	r4, r6, r6
 8004876:	461a      	mov	r2, r3
 8004878:	4623      	mov	r3, r4
 800487a:	f7fb fca9 	bl	80001d0 <__aeabi_uldivmod>
 800487e:	4603      	mov	r3, r0
 8004880:	460c      	mov	r4, r1
 8004882:	461a      	mov	r2, r3
 8004884:	4b6a      	ldr	r3, [pc, #424]	; (8004a30 <UART_SetConfig+0x384>)
 8004886:	fba3 1302 	umull	r1, r3, r3, r2
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2164      	movs	r1, #100	; 0x64
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	3332      	adds	r3, #50	; 0x32
 8004898:	4a65      	ldr	r2, [pc, #404]	; (8004a30 <UART_SetConfig+0x384>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	f003 0207 	and.w	r2, r3, #7
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4442      	add	r2, r8
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	e26f      	b.n	8004d8e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ae:	f7ff fa75 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 80048b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	461d      	mov	r5, r3
 80048b8:	f04f 0600 	mov.w	r6, #0
 80048bc:	46a8      	mov	r8, r5
 80048be:	46b1      	mov	r9, r6
 80048c0:	eb18 0308 	adds.w	r3, r8, r8
 80048c4:	eb49 0409 	adc.w	r4, r9, r9
 80048c8:	4698      	mov	r8, r3
 80048ca:	46a1      	mov	r9, r4
 80048cc:	eb18 0805 	adds.w	r8, r8, r5
 80048d0:	eb49 0906 	adc.w	r9, r9, r6
 80048d4:	f04f 0100 	mov.w	r1, #0
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048e8:	4688      	mov	r8, r1
 80048ea:	4691      	mov	r9, r2
 80048ec:	eb18 0005 	adds.w	r0, r8, r5
 80048f0:	eb49 0106 	adc.w	r1, r9, r6
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	461d      	mov	r5, r3
 80048fa:	f04f 0600 	mov.w	r6, #0
 80048fe:	196b      	adds	r3, r5, r5
 8004900:	eb46 0406 	adc.w	r4, r6, r6
 8004904:	461a      	mov	r2, r3
 8004906:	4623      	mov	r3, r4
 8004908:	f7fb fc62 	bl	80001d0 <__aeabi_uldivmod>
 800490c:	4603      	mov	r3, r0
 800490e:	460c      	mov	r4, r1
 8004910:	461a      	mov	r2, r3
 8004912:	4b47      	ldr	r3, [pc, #284]	; (8004a30 <UART_SetConfig+0x384>)
 8004914:	fba3 2302 	umull	r2, r3, r3, r2
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	461d      	mov	r5, r3
 8004922:	f04f 0600 	mov.w	r6, #0
 8004926:	46a9      	mov	r9, r5
 8004928:	46b2      	mov	sl, r6
 800492a:	eb19 0309 	adds.w	r3, r9, r9
 800492e:	eb4a 040a 	adc.w	r4, sl, sl
 8004932:	4699      	mov	r9, r3
 8004934:	46a2      	mov	sl, r4
 8004936:	eb19 0905 	adds.w	r9, r9, r5
 800493a:	eb4a 0a06 	adc.w	sl, sl, r6
 800493e:	f04f 0100 	mov.w	r1, #0
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800494a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800494e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004952:	4689      	mov	r9, r1
 8004954:	4692      	mov	sl, r2
 8004956:	eb19 0005 	adds.w	r0, r9, r5
 800495a:	eb4a 0106 	adc.w	r1, sl, r6
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	461d      	mov	r5, r3
 8004964:	f04f 0600 	mov.w	r6, #0
 8004968:	196b      	adds	r3, r5, r5
 800496a:	eb46 0406 	adc.w	r4, r6, r6
 800496e:	461a      	mov	r2, r3
 8004970:	4623      	mov	r3, r4
 8004972:	f7fb fc2d 	bl	80001d0 <__aeabi_uldivmod>
 8004976:	4603      	mov	r3, r0
 8004978:	460c      	mov	r4, r1
 800497a:	461a      	mov	r2, r3
 800497c:	4b2c      	ldr	r3, [pc, #176]	; (8004a30 <UART_SetConfig+0x384>)
 800497e:	fba3 1302 	umull	r1, r3, r3, r2
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2164      	movs	r1, #100	; 0x64
 8004986:	fb01 f303 	mul.w	r3, r1, r3
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a27      	ldr	r2, [pc, #156]	; (8004a30 <UART_SetConfig+0x384>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800499e:	4498      	add	r8, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	461d      	mov	r5, r3
 80049a4:	f04f 0600 	mov.w	r6, #0
 80049a8:	46a9      	mov	r9, r5
 80049aa:	46b2      	mov	sl, r6
 80049ac:	eb19 0309 	adds.w	r3, r9, r9
 80049b0:	eb4a 040a 	adc.w	r4, sl, sl
 80049b4:	4699      	mov	r9, r3
 80049b6:	46a2      	mov	sl, r4
 80049b8:	eb19 0905 	adds.w	r9, r9, r5
 80049bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80049c0:	f04f 0100 	mov.w	r1, #0
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049d4:	4689      	mov	r9, r1
 80049d6:	4692      	mov	sl, r2
 80049d8:	eb19 0005 	adds.w	r0, r9, r5
 80049dc:	eb4a 0106 	adc.w	r1, sl, r6
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	461d      	mov	r5, r3
 80049e6:	f04f 0600 	mov.w	r6, #0
 80049ea:	196b      	adds	r3, r5, r5
 80049ec:	eb46 0406 	adc.w	r4, r6, r6
 80049f0:	461a      	mov	r2, r3
 80049f2:	4623      	mov	r3, r4
 80049f4:	f7fb fbec 	bl	80001d0 <__aeabi_uldivmod>
 80049f8:	4603      	mov	r3, r0
 80049fa:	460c      	mov	r4, r1
 80049fc:	461a      	mov	r2, r3
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <UART_SetConfig+0x384>)
 8004a00:	fba3 1302 	umull	r1, r3, r3, r2
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2164      	movs	r1, #100	; 0x64
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a07      	ldr	r2, [pc, #28]	; (8004a30 <UART_SetConfig+0x384>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	f003 0207 	and.w	r2, r3, #7
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4442      	add	r2, r8
 8004a24:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a26:	e1b2      	b.n	8004d8e <UART_SetConfig+0x6e2>
 8004a28:	40011000 	.word	0x40011000
 8004a2c:	40011400 	.word	0x40011400
 8004a30:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4ad7      	ldr	r2, [pc, #860]	; (8004d98 <UART_SetConfig+0x6ec>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d005      	beq.n	8004a4a <UART_SetConfig+0x39e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4ad6      	ldr	r2, [pc, #856]	; (8004d9c <UART_SetConfig+0x6f0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	f040 80d1 	bne.w	8004bec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a4a:	f7ff f9bb 	bl	8003dc4 <HAL_RCC_GetPCLK2Freq>
 8004a4e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	469a      	mov	sl, r3
 8004a54:	f04f 0b00 	mov.w	fp, #0
 8004a58:	46d0      	mov	r8, sl
 8004a5a:	46d9      	mov	r9, fp
 8004a5c:	eb18 0308 	adds.w	r3, r8, r8
 8004a60:	eb49 0409 	adc.w	r4, r9, r9
 8004a64:	4698      	mov	r8, r3
 8004a66:	46a1      	mov	r9, r4
 8004a68:	eb18 080a 	adds.w	r8, r8, sl
 8004a6c:	eb49 090b 	adc.w	r9, r9, fp
 8004a70:	f04f 0100 	mov.w	r1, #0
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a7c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a80:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a84:	4688      	mov	r8, r1
 8004a86:	4691      	mov	r9, r2
 8004a88:	eb1a 0508 	adds.w	r5, sl, r8
 8004a8c:	eb4b 0609 	adc.w	r6, fp, r9
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4619      	mov	r1, r3
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	f04f 0400 	mov.w	r4, #0
 8004aa2:	0094      	lsls	r4, r2, #2
 8004aa4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004aa8:	008b      	lsls	r3, r1, #2
 8004aaa:	461a      	mov	r2, r3
 8004aac:	4623      	mov	r3, r4
 8004aae:	4628      	mov	r0, r5
 8004ab0:	4631      	mov	r1, r6
 8004ab2:	f7fb fb8d 	bl	80001d0 <__aeabi_uldivmod>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	460c      	mov	r4, r1
 8004aba:	461a      	mov	r2, r3
 8004abc:	4bb8      	ldr	r3, [pc, #736]	; (8004da0 <UART_SetConfig+0x6f4>)
 8004abe:	fba3 2302 	umull	r2, r3, r3, r2
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	469b      	mov	fp, r3
 8004acc:	f04f 0c00 	mov.w	ip, #0
 8004ad0:	46d9      	mov	r9, fp
 8004ad2:	46e2      	mov	sl, ip
 8004ad4:	eb19 0309 	adds.w	r3, r9, r9
 8004ad8:	eb4a 040a 	adc.w	r4, sl, sl
 8004adc:	4699      	mov	r9, r3
 8004ade:	46a2      	mov	sl, r4
 8004ae0:	eb19 090b 	adds.w	r9, r9, fp
 8004ae4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ae8:	f04f 0100 	mov.w	r1, #0
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004af4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004af8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004afc:	4689      	mov	r9, r1
 8004afe:	4692      	mov	sl, r2
 8004b00:	eb1b 0509 	adds.w	r5, fp, r9
 8004b04:	eb4c 060a 	adc.w	r6, ip, sl
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	f04f 0400 	mov.w	r4, #0
 8004b1a:	0094      	lsls	r4, r2, #2
 8004b1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b20:	008b      	lsls	r3, r1, #2
 8004b22:	461a      	mov	r2, r3
 8004b24:	4623      	mov	r3, r4
 8004b26:	4628      	mov	r0, r5
 8004b28:	4631      	mov	r1, r6
 8004b2a:	f7fb fb51 	bl	80001d0 <__aeabi_uldivmod>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	460c      	mov	r4, r1
 8004b32:	461a      	mov	r2, r3
 8004b34:	4b9a      	ldr	r3, [pc, #616]	; (8004da0 <UART_SetConfig+0x6f4>)
 8004b36:	fba3 1302 	umull	r1, r3, r3, r2
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	2164      	movs	r1, #100	; 0x64
 8004b3e:	fb01 f303 	mul.w	r3, r1, r3
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	3332      	adds	r3, #50	; 0x32
 8004b48:	4a95      	ldr	r2, [pc, #596]	; (8004da0 <UART_SetConfig+0x6f4>)
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b54:	4498      	add	r8, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	469b      	mov	fp, r3
 8004b5a:	f04f 0c00 	mov.w	ip, #0
 8004b5e:	46d9      	mov	r9, fp
 8004b60:	46e2      	mov	sl, ip
 8004b62:	eb19 0309 	adds.w	r3, r9, r9
 8004b66:	eb4a 040a 	adc.w	r4, sl, sl
 8004b6a:	4699      	mov	r9, r3
 8004b6c:	46a2      	mov	sl, r4
 8004b6e:	eb19 090b 	adds.w	r9, r9, fp
 8004b72:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b8a:	4689      	mov	r9, r1
 8004b8c:	4692      	mov	sl, r2
 8004b8e:	eb1b 0509 	adds.w	r5, fp, r9
 8004b92:	eb4c 060a 	adc.w	r6, ip, sl
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	f04f 0400 	mov.w	r4, #0
 8004ba8:	0094      	lsls	r4, r2, #2
 8004baa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bae:	008b      	lsls	r3, r1, #2
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4623      	mov	r3, r4
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	f7fb fb0a 	bl	80001d0 <__aeabi_uldivmod>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4b77      	ldr	r3, [pc, #476]	; (8004da0 <UART_SetConfig+0x6f4>)
 8004bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	2164      	movs	r1, #100	; 0x64
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	3332      	adds	r3, #50	; 0x32
 8004bd6:	4a72      	ldr	r2, [pc, #456]	; (8004da0 <UART_SetConfig+0x6f4>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	f003 020f 	and.w	r2, r3, #15
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4442      	add	r2, r8
 8004be8:	609a      	str	r2, [r3, #8]
 8004bea:	e0d0      	b.n	8004d8e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bec:	f7ff f8d6 	bl	8003d9c <HAL_RCC_GetPCLK1Freq>
 8004bf0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	469a      	mov	sl, r3
 8004bf6:	f04f 0b00 	mov.w	fp, #0
 8004bfa:	46d0      	mov	r8, sl
 8004bfc:	46d9      	mov	r9, fp
 8004bfe:	eb18 0308 	adds.w	r3, r8, r8
 8004c02:	eb49 0409 	adc.w	r4, r9, r9
 8004c06:	4698      	mov	r8, r3
 8004c08:	46a1      	mov	r9, r4
 8004c0a:	eb18 080a 	adds.w	r8, r8, sl
 8004c0e:	eb49 090b 	adc.w	r9, r9, fp
 8004c12:	f04f 0100 	mov.w	r1, #0
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c26:	4688      	mov	r8, r1
 8004c28:	4691      	mov	r9, r2
 8004c2a:	eb1a 0508 	adds.w	r5, sl, r8
 8004c2e:	eb4b 0609 	adc.w	r6, fp, r9
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4619      	mov	r1, r3
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	f04f 0400 	mov.w	r4, #0
 8004c44:	0094      	lsls	r4, r2, #2
 8004c46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c4a:	008b      	lsls	r3, r1, #2
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4623      	mov	r3, r4
 8004c50:	4628      	mov	r0, r5
 8004c52:	4631      	mov	r1, r6
 8004c54:	f7fb fabc 	bl	80001d0 <__aeabi_uldivmod>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4b50      	ldr	r3, [pc, #320]	; (8004da0 <UART_SetConfig+0x6f4>)
 8004c60:	fba3 2302 	umull	r2, r3, r3, r2
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	469b      	mov	fp, r3
 8004c6e:	f04f 0c00 	mov.w	ip, #0
 8004c72:	46d9      	mov	r9, fp
 8004c74:	46e2      	mov	sl, ip
 8004c76:	eb19 0309 	adds.w	r3, r9, r9
 8004c7a:	eb4a 040a 	adc.w	r4, sl, sl
 8004c7e:	4699      	mov	r9, r3
 8004c80:	46a2      	mov	sl, r4
 8004c82:	eb19 090b 	adds.w	r9, r9, fp
 8004c86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c8a:	f04f 0100 	mov.w	r1, #0
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c9e:	4689      	mov	r9, r1
 8004ca0:	4692      	mov	sl, r2
 8004ca2:	eb1b 0509 	adds.w	r5, fp, r9
 8004ca6:	eb4c 060a 	adc.w	r6, ip, sl
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	f04f 0400 	mov.w	r4, #0
 8004cbc:	0094      	lsls	r4, r2, #2
 8004cbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cc2:	008b      	lsls	r3, r1, #2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4623      	mov	r3, r4
 8004cc8:	4628      	mov	r0, r5
 8004cca:	4631      	mov	r1, r6
 8004ccc:	f7fb fa80 	bl	80001d0 <__aeabi_uldivmod>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4b32      	ldr	r3, [pc, #200]	; (8004da0 <UART_SetConfig+0x6f4>)
 8004cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	2164      	movs	r1, #100	; 0x64
 8004ce0:	fb01 f303 	mul.w	r3, r1, r3
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	3332      	adds	r3, #50	; 0x32
 8004cea:	4a2d      	ldr	r2, [pc, #180]	; (8004da0 <UART_SetConfig+0x6f4>)
 8004cec:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf6:	4498      	add	r8, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	469b      	mov	fp, r3
 8004cfc:	f04f 0c00 	mov.w	ip, #0
 8004d00:	46d9      	mov	r9, fp
 8004d02:	46e2      	mov	sl, ip
 8004d04:	eb19 0309 	adds.w	r3, r9, r9
 8004d08:	eb4a 040a 	adc.w	r4, sl, sl
 8004d0c:	4699      	mov	r9, r3
 8004d0e:	46a2      	mov	sl, r4
 8004d10:	eb19 090b 	adds.w	r9, r9, fp
 8004d14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d18:	f04f 0100 	mov.w	r1, #0
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d2c:	4689      	mov	r9, r1
 8004d2e:	4692      	mov	sl, r2
 8004d30:	eb1b 0509 	adds.w	r5, fp, r9
 8004d34:	eb4c 060a 	adc.w	r6, ip, sl
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	f04f 0400 	mov.w	r4, #0
 8004d4a:	0094      	lsls	r4, r2, #2
 8004d4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d50:	008b      	lsls	r3, r1, #2
 8004d52:	461a      	mov	r2, r3
 8004d54:	4623      	mov	r3, r4
 8004d56:	4628      	mov	r0, r5
 8004d58:	4631      	mov	r1, r6
 8004d5a:	f7fb fa39 	bl	80001d0 <__aeabi_uldivmod>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	460c      	mov	r4, r1
 8004d62:	461a      	mov	r2, r3
 8004d64:	4b0e      	ldr	r3, [pc, #56]	; (8004da0 <UART_SetConfig+0x6f4>)
 8004d66:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2164      	movs	r1, #100	; 0x64
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	3332      	adds	r3, #50	; 0x32
 8004d78:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <UART_SetConfig+0x6f4>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	f003 020f 	and.w	r2, r3, #15
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4442      	add	r2, r8
 8004d8a:	609a      	str	r2, [r3, #8]
}
 8004d8c:	e7ff      	b.n	8004d8e <UART_SetConfig+0x6e2>
 8004d8e:	bf00      	nop
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d98:	40011000 	.word	0x40011000
 8004d9c:	40011400 	.word	0x40011400
 8004da0:	51eb851f 	.word	0x51eb851f

08004da4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f043 0201 	orr.w	r2, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f023 0201 	bic.w	r2, r3, #1
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	019b      	lsls	r3, r3, #6
 8004dfa:	f043 0220 	orr.w	r2, r3, #32
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3301      	adds	r3, #1
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4a09      	ldr	r2, [pc, #36]	; (8004e30 <USB_FlushTxFifo+0x48>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e006      	b.n	8004e22 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d0f0      	beq.n	8004e02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	00030d40 	.word	0x00030d40

08004e34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2210      	movs	r2, #16
 8004e44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4a09      	ldr	r2, [pc, #36]	; (8004e74 <USB_FlushRxFifo+0x40>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d901      	bls.n	8004e58 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e006      	b.n	8004e66 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	d0f0      	beq.n	8004e46 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	00030d40 	.word	0x00030d40

08004e78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	; 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	4613      	mov	r3, r2
 8004e84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	3303      	adds	r3, #3
 8004e92:	089b      	lsrs	r3, r3, #2
 8004e94:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004e96:	2300      	movs	r3, #0
 8004e98:	61bb      	str	r3, [r7, #24]
 8004e9a:	e00b      	b.n	8004eb4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	61bb      	str	r3, [r7, #24]
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d3ef      	bcc.n	8004e9c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004ebc:	69fb      	ldr	r3, [r7, #28]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3724      	adds	r7, #36	; 0x24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b085      	sub	sp, #20
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f003 0301 	and.w	r3, r3, #1
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f44:	4313      	orrs	r3, r2
 8004f46:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d107      	bne.n	8004f5e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f54:	461a      	mov	r2, r3
 8004f56:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004f5a:	6053      	str	r3, [r2, #4]
 8004f5c:	e009      	b.n	8004f72 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d106      	bne.n	8004f72 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004f70:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	b29b      	uxth	r3, r3
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b087      	sub	sp, #28
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	460b      	mov	r3, r1
 8004fac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	0c9b      	lsrs	r3, r3, #18
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <USB_HC_Halt+0x3a>
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d16c      	bne.n	80050b6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ff6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ffa:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d143      	bne.n	8005090 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4413      	add	r3, r2
 8005010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	0151      	lsls	r1, r2, #5
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	440a      	add	r2, r1
 800501e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005022:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005026:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4413      	add	r3, r2
 8005030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	0151      	lsls	r1, r2, #5
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	440a      	add	r2, r1
 800503e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005042:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005046:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4413      	add	r3, r2
 8005050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	440a      	add	r2, r1
 800505e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005062:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005066:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	3301      	adds	r3, #1
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005074:	d81d      	bhi.n	80050b2 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4413      	add	r3, r2
 800507e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800508c:	d0ec      	beq.n	8005068 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800508e:	e080      	b.n	8005192 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4413      	add	r3, r2
 8005098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050ae:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050b0:	e06f      	b.n	8005192 <USB_HC_Halt+0x1f0>
          break;
 80050b2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050b4:	e06d      	b.n	8005192 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	0151      	lsls	r1, r2, #5
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	440a      	add	r2, r1
 80050cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050d4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d143      	bne.n	800516e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	0151      	lsls	r1, r2, #5
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	440a      	add	r2, r1
 80050fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005104:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4413      	add	r3, r2
 800510e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	440a      	add	r2, r1
 800511c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005124:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4413      	add	r3, r2
 800512e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	440a      	add	r2, r1
 800513c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005140:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005144:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	3301      	adds	r3, #1
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005152:	d81d      	bhi.n	8005190 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005166:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800516a:	d0ec      	beq.n	8005146 <USB_HC_Halt+0x1a4>
 800516c:	e011      	b.n	8005192 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	440a      	add	r2, r1
 8005184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	e000      	b.n	8005192 <USB_HC_Halt+0x1f0>
          break;
 8005190:	bf00      	nop
    }
  }

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff fe08 	bl	8004dc6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80051b6:	2110      	movs	r1, #16
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff fe15 	bl	8004de8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff fe38 	bl	8004e34 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80051c4:	2300      	movs	r3, #0
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	e01f      	b.n	800520a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051f0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fe:	461a      	mov	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	3301      	adds	r3, #1
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b0f      	cmp	r3, #15
 800520e:	d9dc      	bls.n	80051ca <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005210:	2300      	movs	r3, #0
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	e034      	b.n	8005280 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800522c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005234:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800523c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524a:	461a      	mov	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	3301      	adds	r3, #1
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800525c:	d80c      	bhi.n	8005278 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005274:	d0ec      	beq.n	8005250 <USB_StopHost+0xb0>
 8005276:	e000      	b.n	800527a <USB_StopHost+0xda>
        break;
 8005278:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3301      	adds	r3, #1
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2b0f      	cmp	r3, #15
 8005284:	d9c7      	bls.n	8005216 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800528c:	461a      	mov	r2, r3
 800528e:	f04f 33ff 	mov.w	r3, #4294967295
 8005292:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f04f 32ff 	mov.w	r2, #4294967295
 800529a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff fd81 	bl	8004da4 <USB_EnableGlobalInt>

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f804 	bl	80052d0 <USBH_HandleSof>
}
 80052c8:	bf00      	nop
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b0b      	cmp	r3, #11
 80052e0:	d10a      	bne.n	80052f8 <USBH_HandleSof+0x28>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	4798      	blx	r3
  }
}
 80052f8:	bf00      	nop
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8005324:	2300      	movs	r3, #0
 8005326:	2200      	movs	r2, #0
 8005328:	f000 f89c 	bl	8005464 <osMessageQueuePut>
#endif
#endif

  return;
 800532c:	bf00      	nop
}
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005344:	bf00      	nop
}
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8005384:	2300      	movs	r3, #0
 8005386:	2200      	movs	r2, #0
 8005388:	f000 f86c 	bl	8005464 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f002 fce8 	bl	8007d8c <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	791b      	ldrb	r3, [r3, #4]
 80053c0:	4619      	mov	r1, r3
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f830 	bl	8005428 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	795b      	ldrb	r3, [r3, #5]
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f82a 	bl	8005428 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80053e8:	2300      	movs	r3, #0
 80053ea:	2200      	movs	r2, #0
 80053ec:	f000 f83a 	bl	8005464 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8005416:	2300      	movs	r3, #0
 8005418:	2200      	movs	r2, #0
 800541a:	f000 f823 	bl	8005464 <osMessageQueuePut>
#endif

  return USBH_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	2b0a      	cmp	r3, #10
 8005438:	d80d      	bhi.n	8005456 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	33e0      	adds	r3, #224	; 0xe0
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	78fb      	ldrb	r3, [r7, #3]
 8005448:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	33e0      	adds	r3, #224	; 0xe0
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	440b      	add	r3, r1
 8005454:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b08a      	sub	sp, #40	; 0x28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	4613      	mov	r3, r2
 8005472:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005478:	2300      	movs	r3, #0
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800547c:	f3ef 8305 	mrs	r3, IPSR
 8005480:	61fb      	str	r3, [r7, #28]
  return(result);
 8005482:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10f      	bne.n	80054a8 <osMessageQueuePut+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005488:	f3ef 8310 	mrs	r3, PRIMASK
 800548c:	61bb      	str	r3, [r7, #24]
  return(result);
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d105      	bne.n	80054a0 <osMessageQueuePut+0x3c>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005494:	f3ef 8311 	mrs	r3, BASEPRI
 8005498:	617b      	str	r3, [r7, #20]
  return(result);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d02c      	beq.n	80054fa <osMessageQueuePut+0x96>
 80054a0:	4b28      	ldr	r3, [pc, #160]	; (8005544 <osMessageQueuePut+0xe0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d128      	bne.n	80054fa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d005      	beq.n	80054ba <osMessageQueuePut+0x56>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <osMessageQueuePut+0x56>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80054ba:	f06f 0303 	mvn.w	r3, #3
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054c0:	e039      	b.n	8005536 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80054c6:	f107 0210 	add.w	r2, r7, #16
 80054ca:	2300      	movs	r3, #0
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	6a38      	ldr	r0, [r7, #32]
 80054d0:	f000 fb1c 	bl	8005b0c <xQueueGenericSendFromISR>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d003      	beq.n	80054e2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80054da:	f06f 0302 	mvn.w	r3, #2
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054e0:	e029      	b.n	8005536 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d026      	beq.n	8005536 <osMessageQueuePut+0xd2>
 80054e8:	4b17      	ldr	r3, [pc, #92]	; (8005548 <osMessageQueuePut+0xe4>)
 80054ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054f8:	e01d      	b.n	8005536 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <osMessageQueuePut+0xa2>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005506:	f06f 0303 	mvn.w	r3, #3
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
 800550c:	e014      	b.n	8005538 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800550e:	2300      	movs	r3, #0
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	6a38      	ldr	r0, [r7, #32]
 8005516:	f000 f9ff 	bl	8005918 <xQueueGenericSend>
 800551a:	4603      	mov	r3, r0
 800551c:	2b01      	cmp	r3, #1
 800551e:	d00b      	beq.n	8005538 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005526:	f06f 0301 	mvn.w	r3, #1
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
 800552c:	e004      	b.n	8005538 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800552e:	f06f 0302 	mvn.w	r3, #2
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
 8005534:	e000      	b.n	8005538 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005536:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800553a:	4618      	mov	r0, r3
 800553c:	3728      	adds	r7, #40	; 0x28
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	2000002c 	.word	0x2000002c
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4a07      	ldr	r2, [pc, #28]	; (8005578 <vApplicationGetIdleTaskMemory+0x2c>)
 800555c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4a06      	ldr	r2, [pc, #24]	; (800557c <vApplicationGetIdleTaskMemory+0x30>)
 8005562:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2280      	movs	r2, #128	; 0x80
 8005568:	601a      	str	r2, [r3, #0]
}
 800556a:	bf00      	nop
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000030 	.word	0x20000030
 800557c:	2000008c 	.word	0x2000008c

08005580 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4a07      	ldr	r2, [pc, #28]	; (80055ac <vApplicationGetTimerTaskMemory+0x2c>)
 8005590:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	4a06      	ldr	r2, [pc, #24]	; (80055b0 <vApplicationGetTimerTaskMemory+0x30>)
 8005596:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800559e:	601a      	str	r2, [r3, #0]
}
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	2000028c 	.word	0x2000028c
 80055b0:	200002e8 	.word	0x200002e8

080055b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f103 0208 	add.w	r2, r3, #8
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f04f 32ff 	mov.w	r2, #4294967295
 80055cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f103 0208 	add.w	r2, r3, #8
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f103 0208 	add.w	r2, r3, #8
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800560e:	b480      	push	{r7}
 8005610:	b085      	sub	sp, #20
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	601a      	str	r2, [r3, #0]
}
 800564a:	bf00      	nop
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005656:	b480      	push	{r7}
 8005658:	b085      	sub	sp, #20
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566c:	d103      	bne.n	8005676 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	e00c      	b.n	8005690 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3308      	adds	r3, #8
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	e002      	b.n	8005684 <vListInsert+0x2e>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	429a      	cmp	r2, r3
 800568e:	d2f6      	bcs.n	800567e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	601a      	str	r2, [r3, #0]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6892      	ldr	r2, [r2, #8]
 80056de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6852      	ldr	r2, [r2, #4]
 80056e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d103      	bne.n	80056fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	1e5a      	subs	r2, r3, #1
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d109      	bne.n	8005744 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	60bb      	str	r3, [r7, #8]
 8005742:	e7fe      	b.n	8005742 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005744:	f001 ffda 	bl	80076fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005750:	68f9      	ldr	r1, [r7, #12]
 8005752:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	441a      	add	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005774:	3b01      	subs	r3, #1
 8005776:	68f9      	ldr	r1, [r7, #12]
 8005778:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800577a:	fb01 f303 	mul.w	r3, r1, r3
 800577e:	441a      	add	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	22ff      	movs	r2, #255	; 0xff
 8005788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	22ff      	movs	r2, #255	; 0xff
 8005790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d114      	bne.n	80057c4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01a      	beq.n	80057d8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3310      	adds	r3, #16
 80057a6:	4618      	mov	r0, r3
 80057a8:	f001 f8aa 	bl	8006900 <xTaskRemoveFromEventList>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d012      	beq.n	80057d8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057b2:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <xQueueGenericReset+0xcc>)
 80057b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	e009      	b.n	80057d8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3310      	adds	r3, #16
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff fef3 	bl	80055b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3324      	adds	r3, #36	; 0x24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff feee 	bl	80055b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057d8:	f001 ffbe 	bl	8007758 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057dc:	2301      	movs	r3, #1
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08e      	sub	sp, #56	; 0x38
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d109      	bne.n	8005814 <xQueueGenericCreateStatic+0x28>
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	62bb      	str	r3, [r7, #40]	; 0x28
 8005812:	e7fe      	b.n	8005812 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <xQueueGenericCreateStatic+0x42>
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
 800582c:	e7fe      	b.n	800582c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <xQueueGenericCreateStatic+0x4e>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <xQueueGenericCreateStatic+0x52>
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <xQueueGenericCreateStatic+0x54>
 800583e:	2300      	movs	r3, #0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d109      	bne.n	8005858 <xQueueGenericCreateStatic+0x6c>
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	623b      	str	r3, [r7, #32]
 8005856:	e7fe      	b.n	8005856 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d102      	bne.n	8005864 <xQueueGenericCreateStatic+0x78>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <xQueueGenericCreateStatic+0x7c>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <xQueueGenericCreateStatic+0x7e>
 8005868:	2300      	movs	r3, #0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d109      	bne.n	8005882 <xQueueGenericCreateStatic+0x96>
 800586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	61fb      	str	r3, [r7, #28]
 8005880:	e7fe      	b.n	8005880 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005882:	2350      	movs	r3, #80	; 0x50
 8005884:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b50      	cmp	r3, #80	; 0x50
 800588a:	d009      	beq.n	80058a0 <xQueueGenericCreateStatic+0xb4>
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	e7fe      	b.n	800589e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80058a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00d      	beq.n	80058c8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058b4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	4613      	mov	r3, r2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 f805 	bl	80058d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3730      	adds	r7, #48	; 0x30
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	607a      	str	r2, [r7, #4]
 80058de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d103      	bne.n	80058ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	e002      	b.n	80058f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005900:	2101      	movs	r1, #1
 8005902:	69b8      	ldr	r0, [r7, #24]
 8005904:	f7ff ff0a 	bl	800571c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	78fa      	ldrb	r2, [r7, #3]
 800590c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005910:	bf00      	nop
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08e      	sub	sp, #56	; 0x38
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005926:	2300      	movs	r3, #0
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	2b00      	cmp	r3, #0
 8005932:	d109      	bne.n	8005948 <xQueueGenericSend+0x30>
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	62bb      	str	r3, [r7, #40]	; 0x28
 8005946:	e7fe      	b.n	8005946 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d103      	bne.n	8005956 <xQueueGenericSend+0x3e>
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <xQueueGenericSend+0x42>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <xQueueGenericSend+0x44>
 800595a:	2300      	movs	r3, #0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d109      	bne.n	8005974 <xQueueGenericSend+0x5c>
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
 8005972:	e7fe      	b.n	8005972 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d103      	bne.n	8005982 <xQueueGenericSend+0x6a>
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <xQueueGenericSend+0x6e>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <xQueueGenericSend+0x70>
 8005986:	2300      	movs	r3, #0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d109      	bne.n	80059a0 <xQueueGenericSend+0x88>
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	623b      	str	r3, [r7, #32]
 800599e:	e7fe      	b.n	800599e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059a0:	f001 f964 	bl	8006c6c <xTaskGetSchedulerState>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d102      	bne.n	80059b0 <xQueueGenericSend+0x98>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <xQueueGenericSend+0x9c>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <xQueueGenericSend+0x9e>
 80059b4:	2300      	movs	r3, #0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d109      	bne.n	80059ce <xQueueGenericSend+0xb6>
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	e7fe      	b.n	80059cc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059ce:	f001 fe95 	bl	80076fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059da:	429a      	cmp	r2, r3
 80059dc:	d302      	bcc.n	80059e4 <xQueueGenericSend+0xcc>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d129      	bne.n	8005a38 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ea:	f000 f9ff 	bl	8005dec <prvCopyDataToQueue>
 80059ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d010      	beq.n	8005a1a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	3324      	adds	r3, #36	; 0x24
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 ff7f 	bl	8006900 <xTaskRemoveFromEventList>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d013      	beq.n	8005a30 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a08:	4b3f      	ldr	r3, [pc, #252]	; (8005b08 <xQueueGenericSend+0x1f0>)
 8005a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	e00a      	b.n	8005a30 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d007      	beq.n	8005a30 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a20:	4b39      	ldr	r3, [pc, #228]	; (8005b08 <xQueueGenericSend+0x1f0>)
 8005a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a30:	f001 fe92 	bl	8007758 <vPortExitCritical>
				return pdPASS;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e063      	b.n	8005b00 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a3e:	f001 fe8b 	bl	8007758 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e05c      	b.n	8005b00 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d106      	bne.n	8005a5a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a4c:	f107 0314 	add.w	r3, r7, #20
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 ffb7 	bl	80069c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a56:	2301      	movs	r3, #1
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a5a:	f001 fe7d 	bl	8007758 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a5e:	f000 fd33 	bl	80064c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a62:	f001 fe4b 	bl	80076fc <vPortEnterCritical>
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a6c:	b25b      	sxtb	r3, r3
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d103      	bne.n	8005a7c <xQueueGenericSend+0x164>
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a82:	b25b      	sxtb	r3, r3
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d103      	bne.n	8005a92 <xQueueGenericSend+0x17a>
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a92:	f001 fe61 	bl	8007758 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a96:	1d3a      	adds	r2, r7, #4
 8005a98:	f107 0314 	add.w	r3, r7, #20
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 ffa6 	bl	80069f0 <xTaskCheckForTimeOut>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d124      	bne.n	8005af4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aac:	f000 fa96 	bl	8005fdc <prvIsQueueFull>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d018      	beq.n	8005ae8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	3310      	adds	r3, #16
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	4611      	mov	r1, r2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fed0 	bl	8006864 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ac6:	f000 fa21 	bl	8005f0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005aca:	f000 fd0b 	bl	80064e4 <xTaskResumeAll>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f47f af7c 	bne.w	80059ce <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005ad6:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <xQueueGenericSend+0x1f0>)
 8005ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	e772      	b.n	80059ce <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aea:	f000 fa0f 	bl	8005f0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005aee:	f000 fcf9 	bl	80064e4 <xTaskResumeAll>
 8005af2:	e76c      	b.n	80059ce <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005af6:	f000 fa09 	bl	8005f0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005afa:	f000 fcf3 	bl	80064e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005afe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3738      	adds	r7, #56	; 0x38
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08e      	sub	sp, #56	; 0x38
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d109      	bne.n	8005b38 <xQueueGenericSendFromISR+0x2c>
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
 8005b36:	e7fe      	b.n	8005b36 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <xQueueGenericSendFromISR+0x3a>
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <xQueueGenericSendFromISR+0x3e>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <xQueueGenericSendFromISR+0x40>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d109      	bne.n	8005b64 <xQueueGenericSendFromISR+0x58>
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	623b      	str	r3, [r7, #32]
 8005b62:	e7fe      	b.n	8005b62 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d103      	bne.n	8005b72 <xQueueGenericSendFromISR+0x66>
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <xQueueGenericSendFromISR+0x6a>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <xQueueGenericSendFromISR+0x6c>
 8005b76:	2300      	movs	r3, #0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <xQueueGenericSendFromISR+0x84>
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	61fb      	str	r3, [r7, #28]
 8005b8e:	e7fe      	b.n	8005b8e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b90:	f001 fe90 	bl	80078b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b94:	f3ef 8211 	mrs	r2, BASEPRI
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	61ba      	str	r2, [r7, #24]
 8005baa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005bac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d302      	bcc.n	8005bc2 <xQueueGenericSendFromISR+0xb6>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d12c      	bne.n	8005c1c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bd2:	f000 f90b 	bl	8005dec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bd6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bde:	d112      	bne.n	8005c06 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d016      	beq.n	8005c16 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	3324      	adds	r3, #36	; 0x24
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fe87 	bl	8006900 <xTaskRemoveFromEventList>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00e      	beq.n	8005c16 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00b      	beq.n	8005c16 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	e007      	b.n	8005c16 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	b25a      	sxtb	r2, r3
 8005c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c16:	2301      	movs	r3, #1
 8005c18:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005c1a:	e001      	b.n	8005c20 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3738      	adds	r7, #56	; 0x38
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08c      	sub	sp, #48	; 0x30
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c40:	2300      	movs	r3, #0
 8005c42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <xQueueReceive+0x2e>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	623b      	str	r3, [r7, #32]
 8005c60:	e7fe      	b.n	8005c60 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d103      	bne.n	8005c70 <xQueueReceive+0x3c>
 8005c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <xQueueReceive+0x40>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <xQueueReceive+0x42>
 8005c74:	2300      	movs	r3, #0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d109      	bne.n	8005c8e <xQueueReceive+0x5a>
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	61fb      	str	r3, [r7, #28]
 8005c8c:	e7fe      	b.n	8005c8c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c8e:	f000 ffed 	bl	8006c6c <xTaskGetSchedulerState>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <xQueueReceive+0x6a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <xQueueReceive+0x6e>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <xQueueReceive+0x70>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <xQueueReceive+0x88>
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	e7fe      	b.n	8005cba <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cbc:	f001 fd1e 	bl	80076fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01f      	beq.n	8005d0c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd0:	f000 f8f6 	bl	8005ec0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	1e5a      	subs	r2, r3, #1
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00f      	beq.n	8005d04 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	3310      	adds	r3, #16
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 fe09 	bl	8006900 <xTaskRemoveFromEventList>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d007      	beq.n	8005d04 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cf4:	4b3c      	ldr	r3, [pc, #240]	; (8005de8 <xQueueReceive+0x1b4>)
 8005cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d04:	f001 fd28 	bl	8007758 <vPortExitCritical>
				return pdPASS;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e069      	b.n	8005de0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d103      	bne.n	8005d1a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d12:	f001 fd21 	bl	8007758 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d16:	2300      	movs	r3, #0
 8005d18:	e062      	b.n	8005de0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d106      	bne.n	8005d2e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d20:	f107 0310 	add.w	r3, r7, #16
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fe4d 	bl	80069c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d2e:	f001 fd13 	bl	8007758 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d32:	f000 fbc9 	bl	80064c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d36:	f001 fce1 	bl	80076fc <vPortEnterCritical>
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d40:	b25b      	sxtb	r3, r3
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d46:	d103      	bne.n	8005d50 <xQueueReceive+0x11c>
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d56:	b25b      	sxtb	r3, r3
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d103      	bne.n	8005d66 <xQueueReceive+0x132>
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d66:	f001 fcf7 	bl	8007758 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d6a:	1d3a      	adds	r2, r7, #4
 8005d6c:	f107 0310 	add.w	r3, r7, #16
 8005d70:	4611      	mov	r1, r2
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fe3c 	bl	80069f0 <xTaskCheckForTimeOut>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d123      	bne.n	8005dc6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d80:	f000 f916 	bl	8005fb0 <prvIsQueueEmpty>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d017      	beq.n	8005dba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	3324      	adds	r3, #36	; 0x24
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	4611      	mov	r1, r2
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fd66 	bl	8006864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d9a:	f000 f8b7 	bl	8005f0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d9e:	f000 fba1 	bl	80064e4 <xTaskResumeAll>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d189      	bne.n	8005cbc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005da8:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <xQueueReceive+0x1b4>)
 8005daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	e780      	b.n	8005cbc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dbc:	f000 f8a6 	bl	8005f0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dc0:	f000 fb90 	bl	80064e4 <xTaskResumeAll>
 8005dc4:	e77a      	b.n	8005cbc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc8:	f000 f8a0 	bl	8005f0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dcc:	f000 fb8a 	bl	80064e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dd2:	f000 f8ed 	bl	8005fb0 <prvIsQueueEmpty>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f43f af6f 	beq.w	8005cbc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3730      	adds	r7, #48	; 0x30
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10d      	bne.n	8005e26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d14d      	bne.n	8005eae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 ff46 	bl	8006ca8 <xTaskPriorityDisinherit>
 8005e1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	609a      	str	r2, [r3, #8]
 8005e24:	e043      	b.n	8005eae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d119      	bne.n	8005e60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6858      	ldr	r0, [r3, #4]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	461a      	mov	r2, r3
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	f002 f814 	bl	8007e64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e44:	441a      	add	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d32b      	bcc.n	8005eae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	605a      	str	r2, [r3, #4]
 8005e5e:	e026      	b.n	8005eae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68d8      	ldr	r0, [r3, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	461a      	mov	r2, r3
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	f001 fffa 	bl	8007e64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	425b      	negs	r3, r3
 8005e7a:	441a      	add	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d207      	bcs.n	8005e9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	425b      	negs	r3, r3
 8005e96:	441a      	add	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d105      	bne.n	8005eae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005eb6:	697b      	ldr	r3, [r7, #20]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d018      	beq.n	8005f04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	441a      	add	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d303      	bcc.n	8005ef4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68d9      	ldr	r1, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	461a      	mov	r2, r3
 8005efe:	6838      	ldr	r0, [r7, #0]
 8005f00:	f001 ffb0 	bl	8007e64 <memcpy>
	}
}
 8005f04:	bf00      	nop
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f14:	f001 fbf2 	bl	80076fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f20:	e011      	b.n	8005f46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d012      	beq.n	8005f50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3324      	adds	r3, #36	; 0x24
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fce6 	bl	8006900 <xTaskRemoveFromEventList>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f3a:	f000 fdb9 	bl	8006ab0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	dce9      	bgt.n	8005f22 <prvUnlockQueue+0x16>
 8005f4e:	e000      	b.n	8005f52 <prvUnlockQueue+0x46>
					break;
 8005f50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	22ff      	movs	r2, #255	; 0xff
 8005f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f5a:	f001 fbfd 	bl	8007758 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f5e:	f001 fbcd 	bl	80076fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f6a:	e011      	b.n	8005f90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d012      	beq.n	8005f9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3310      	adds	r3, #16
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fcc1 	bl	8006900 <xTaskRemoveFromEventList>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f84:	f000 fd94 	bl	8006ab0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f88:	7bbb      	ldrb	r3, [r7, #14]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	dce9      	bgt.n	8005f6c <prvUnlockQueue+0x60>
 8005f98:	e000      	b.n	8005f9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	22ff      	movs	r2, #255	; 0xff
 8005fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005fa4:	f001 fbd8 	bl	8007758 <vPortExitCritical>
}
 8005fa8:	bf00      	nop
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fb8:	f001 fba0 	bl	80076fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e001      	b.n	8005fce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fce:	f001 fbc3 	bl	8007758 <vPortExitCritical>

	return xReturn;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fe4:	f001 fb8a 	bl	80076fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d102      	bne.n	8005ffa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	e001      	b.n	8005ffe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ffe:	f001 fbab 	bl	8007758 <vPortExitCritical>

	return xReturn;
 8006002:	68fb      	ldr	r3, [r7, #12]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	e014      	b.n	8006046 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800601c:	4a0e      	ldr	r2, [pc, #56]	; (8006058 <vQueueAddToRegistry+0x4c>)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006028:	490b      	ldr	r1, [pc, #44]	; (8006058 <vQueueAddToRegistry+0x4c>)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006032:	4a09      	ldr	r2, [pc, #36]	; (8006058 <vQueueAddToRegistry+0x4c>)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	4413      	add	r3, r2
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800603e:	e005      	b.n	800604c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	3301      	adds	r3, #1
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b07      	cmp	r3, #7
 800604a:	d9e7      	bls.n	800601c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	20004af0 	.word	0x20004af0

0800605c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800606c:	f001 fb46 	bl	80076fc <vPortEnterCritical>
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006076:	b25b      	sxtb	r3, r3
 8006078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607c:	d103      	bne.n	8006086 <vQueueWaitForMessageRestricted+0x2a>
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800608c:	b25b      	sxtb	r3, r3
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	d103      	bne.n	800609c <vQueueWaitForMessageRestricted+0x40>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800609c:	f001 fb5c 	bl	8007758 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	3324      	adds	r3, #36	; 0x24
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fbfb 	bl	80068ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060b6:	6978      	ldr	r0, [r7, #20]
 80060b8:	f7ff ff28 	bl	8005f0c <prvUnlockQueue>
	}
 80060bc:	bf00      	nop
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08e      	sub	sp, #56	; 0x38
 80060c8:	af04      	add	r7, sp, #16
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d109      	bne.n	80060ec <xTaskCreateStatic+0x28>
 80060d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	623b      	str	r3, [r7, #32]
 80060ea:	e7fe      	b.n	80060ea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80060ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d109      	bne.n	8006106 <xTaskCreateStatic+0x42>
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	e7fe      	b.n	8006104 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006106:	235c      	movs	r3, #92	; 0x5c
 8006108:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b5c      	cmp	r3, #92	; 0x5c
 800610e:	d009      	beq.n	8006124 <xTaskCreateStatic+0x60>
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	e7fe      	b.n	8006122 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006124:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01e      	beq.n	800616a <xTaskCreateStatic+0xa6>
 800612c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612e:	2b00      	cmp	r3, #0
 8006130:	d01b      	beq.n	800616a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800613a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	2202      	movs	r2, #2
 8006140:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006144:	2300      	movs	r3, #0
 8006146:	9303      	str	r3, [sp, #12]
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	9302      	str	r3, [sp, #8]
 800614c:	f107 0314 	add.w	r3, r7, #20
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	68b9      	ldr	r1, [r7, #8]
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f850 	bl	8006202 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006162:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006164:	f000 f8dc 	bl	8006320 <prvAddNewTaskToReadyList>
 8006168:	e001      	b.n	800616e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800616e:	697b      	ldr	r3, [r7, #20]
	}
 8006170:	4618      	mov	r0, r3
 8006172:	3728      	adds	r7, #40	; 0x28
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08c      	sub	sp, #48	; 0x30
 800617c:	af04      	add	r7, sp, #16
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006188:	88fb      	ldrh	r3, [r7, #6]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4618      	mov	r0, r3
 800618e:	f001 fbcf 	bl	8007930 <pvPortMalloc>
 8006192:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00e      	beq.n	80061b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800619a:	205c      	movs	r0, #92	; 0x5c
 800619c:	f001 fbc8 	bl	8007930 <pvPortMalloc>
 80061a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	631a      	str	r2, [r3, #48]	; 0x30
 80061ae:	e005      	b.n	80061bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061b0:	6978      	ldr	r0, [r7, #20]
 80061b2:	f001 fc7f 	bl	8007ab4 <vPortFree>
 80061b6:	e001      	b.n	80061bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061b8:	2300      	movs	r3, #0
 80061ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d017      	beq.n	80061f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	2300      	movs	r3, #0
 80061ce:	9303      	str	r3, [sp, #12]
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	9302      	str	r3, [sp, #8]
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f80e 	bl	8006202 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061e6:	69f8      	ldr	r0, [r7, #28]
 80061e8:	f000 f89a 	bl	8006320 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061ec:	2301      	movs	r3, #1
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	e002      	b.n	80061f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061f2:	f04f 33ff 	mov.w	r3, #4294967295
 80061f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061f8:	69bb      	ldr	r3, [r7, #24]
	}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3720      	adds	r7, #32
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b088      	sub	sp, #32
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
 800620e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	461a      	mov	r2, r3
 800621a:	21a5      	movs	r1, #165	; 0xa5
 800621c:	f001 fe2d 	bl	8007e7a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800622a:	3b01      	subs	r3, #1
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	f023 0307 	bic.w	r3, r3, #7
 8006238:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	2b00      	cmp	r3, #0
 8006242:	d009      	beq.n	8006258 <prvInitialiseNewTask+0x56>
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	e7fe      	b.n	8006256 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01f      	beq.n	800629e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800625e:	2300      	movs	r3, #0
 8006260:	61fb      	str	r3, [r7, #28]
 8006262:	e012      	b.n	800628a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	4413      	add	r3, r2
 800626a:	7819      	ldrb	r1, [r3, #0]
 800626c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	3334      	adds	r3, #52	; 0x34
 8006274:	460a      	mov	r2, r1
 8006276:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d006      	beq.n	8006292 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	3301      	adds	r3, #1
 8006288:	61fb      	str	r3, [r7, #28]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	2b0f      	cmp	r3, #15
 800628e:	d9e9      	bls.n	8006264 <prvInitialiseNewTask+0x62>
 8006290:	e000      	b.n	8006294 <prvInitialiseNewTask+0x92>
			{
				break;
 8006292:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800629c:	e003      	b.n	80062a6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	2b37      	cmp	r3, #55	; 0x37
 80062aa:	d901      	bls.n	80062b0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062ac:	2337      	movs	r3, #55	; 0x37
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	2200      	movs	r2, #0
 80062c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	3304      	adds	r3, #4
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff f994 	bl	80055f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	3318      	adds	r3, #24
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff f98f 	bl	80055f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	2200      	movs	r2, #0
 80062f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	68f9      	ldr	r1, [r7, #12]
 80062fe:	69b8      	ldr	r0, [r7, #24]
 8006300:	f001 f8d8 	bl	80074b4 <pxPortInitialiseStack>
 8006304:	4602      	mov	r2, r0
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006316:	bf00      	nop
 8006318:	3720      	adds	r7, #32
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006328:	f001 f9e8 	bl	80076fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800632c:	4b2d      	ldr	r3, [pc, #180]	; (80063e4 <prvAddNewTaskToReadyList+0xc4>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3301      	adds	r3, #1
 8006332:	4a2c      	ldr	r2, [pc, #176]	; (80063e4 <prvAddNewTaskToReadyList+0xc4>)
 8006334:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006336:	4b2c      	ldr	r3, [pc, #176]	; (80063e8 <prvAddNewTaskToReadyList+0xc8>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d109      	bne.n	8006352 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800633e:	4a2a      	ldr	r2, [pc, #168]	; (80063e8 <prvAddNewTaskToReadyList+0xc8>)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006344:	4b27      	ldr	r3, [pc, #156]	; (80063e4 <prvAddNewTaskToReadyList+0xc4>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d110      	bne.n	800636e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800634c:	f000 fbd4 	bl	8006af8 <prvInitialiseTaskLists>
 8006350:	e00d      	b.n	800636e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006352:	4b26      	ldr	r3, [pc, #152]	; (80063ec <prvAddNewTaskToReadyList+0xcc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d109      	bne.n	800636e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800635a:	4b23      	ldr	r3, [pc, #140]	; (80063e8 <prvAddNewTaskToReadyList+0xc8>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	429a      	cmp	r2, r3
 8006366:	d802      	bhi.n	800636e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006368:	4a1f      	ldr	r2, [pc, #124]	; (80063e8 <prvAddNewTaskToReadyList+0xc8>)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800636e:	4b20      	ldr	r3, [pc, #128]	; (80063f0 <prvAddNewTaskToReadyList+0xd0>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3301      	adds	r3, #1
 8006374:	4a1e      	ldr	r2, [pc, #120]	; (80063f0 <prvAddNewTaskToReadyList+0xd0>)
 8006376:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006378:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <prvAddNewTaskToReadyList+0xd0>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006384:	4b1b      	ldr	r3, [pc, #108]	; (80063f4 <prvAddNewTaskToReadyList+0xd4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d903      	bls.n	8006394 <prvAddNewTaskToReadyList+0x74>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	4a18      	ldr	r2, [pc, #96]	; (80063f4 <prvAddNewTaskToReadyList+0xd4>)
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4a15      	ldr	r2, [pc, #84]	; (80063f8 <prvAddNewTaskToReadyList+0xd8>)
 80063a2:	441a      	add	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4619      	mov	r1, r3
 80063aa:	4610      	mov	r0, r2
 80063ac:	f7ff f92f 	bl	800560e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063b0:	f001 f9d2 	bl	8007758 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063b4:	4b0d      	ldr	r3, [pc, #52]	; (80063ec <prvAddNewTaskToReadyList+0xcc>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00e      	beq.n	80063da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063bc:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <prvAddNewTaskToReadyList+0xc8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d207      	bcs.n	80063da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063ca:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <prvAddNewTaskToReadyList+0xdc>)
 80063cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20000bbc 	.word	0x20000bbc
 80063e8:	200006e8 	.word	0x200006e8
 80063ec:	20000bc8 	.word	0x20000bc8
 80063f0:	20000bd8 	.word	0x20000bd8
 80063f4:	20000bc4 	.word	0x20000bc4
 80063f8:	200006ec 	.word	0x200006ec
 80063fc:	e000ed04 	.word	0xe000ed04

08006400 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08a      	sub	sp, #40	; 0x28
 8006404:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006406:	2300      	movs	r3, #0
 8006408:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800640a:	2300      	movs	r3, #0
 800640c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800640e:	463a      	mov	r2, r7
 8006410:	1d39      	adds	r1, r7, #4
 8006412:	f107 0308 	add.w	r3, r7, #8
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff f898 	bl	800554c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	9202      	str	r2, [sp, #8]
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	2300      	movs	r3, #0
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	2300      	movs	r3, #0
 800642c:	460a      	mov	r2, r1
 800642e:	4920      	ldr	r1, [pc, #128]	; (80064b0 <vTaskStartScheduler+0xb0>)
 8006430:	4820      	ldr	r0, [pc, #128]	; (80064b4 <vTaskStartScheduler+0xb4>)
 8006432:	f7ff fe47 	bl	80060c4 <xTaskCreateStatic>
 8006436:	4602      	mov	r2, r0
 8006438:	4b1f      	ldr	r3, [pc, #124]	; (80064b8 <vTaskStartScheduler+0xb8>)
 800643a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800643c:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <vTaskStartScheduler+0xb8>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006444:	2301      	movs	r3, #1
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	e001      	b.n	800644e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d102      	bne.n	800645a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006454:	f000 fce8 	bl	8006e28 <xTimerCreateTimerTask>
 8006458:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d115      	bne.n	800648c <vTaskStartScheduler+0x8c>
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006472:	4b12      	ldr	r3, [pc, #72]	; (80064bc <vTaskStartScheduler+0xbc>)
 8006474:	f04f 32ff 	mov.w	r2, #4294967295
 8006478:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800647a:	4b11      	ldr	r3, [pc, #68]	; (80064c0 <vTaskStartScheduler+0xc0>)
 800647c:	2201      	movs	r2, #1
 800647e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006480:	4b10      	ldr	r3, [pc, #64]	; (80064c4 <vTaskStartScheduler+0xc4>)
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006486:	f001 f89b 	bl	80075c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800648a:	e00d      	b.n	80064a8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d109      	bne.n	80064a8 <vTaskStartScheduler+0xa8>
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	e7fe      	b.n	80064a6 <vTaskStartScheduler+0xa6>
}
 80064a8:	bf00      	nop
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	08007f08 	.word	0x08007f08
 80064b4:	08006ac9 	.word	0x08006ac9
 80064b8:	20000be0 	.word	0x20000be0
 80064bc:	20000bdc 	.word	0x20000bdc
 80064c0:	20000bc8 	.word	0x20000bc8
 80064c4:	20000bc0 	.word	0x20000bc0

080064c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80064cc:	4b04      	ldr	r3, [pc, #16]	; (80064e0 <vTaskSuspendAll+0x18>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3301      	adds	r3, #1
 80064d2:	4a03      	ldr	r2, [pc, #12]	; (80064e0 <vTaskSuspendAll+0x18>)
 80064d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80064d6:	bf00      	nop
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	20000be4 	.word	0x20000be4

080064e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064f2:	4b41      	ldr	r3, [pc, #260]	; (80065f8 <xTaskResumeAll+0x114>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d109      	bne.n	800650e <xTaskResumeAll+0x2a>
 80064fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	e7fe      	b.n	800650c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800650e:	f001 f8f5 	bl	80076fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006512:	4b39      	ldr	r3, [pc, #228]	; (80065f8 <xTaskResumeAll+0x114>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3b01      	subs	r3, #1
 8006518:	4a37      	ldr	r2, [pc, #220]	; (80065f8 <xTaskResumeAll+0x114>)
 800651a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800651c:	4b36      	ldr	r3, [pc, #216]	; (80065f8 <xTaskResumeAll+0x114>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d162      	bne.n	80065ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006524:	4b35      	ldr	r3, [pc, #212]	; (80065fc <xTaskResumeAll+0x118>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d05e      	beq.n	80065ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800652c:	e02f      	b.n	800658e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800652e:	4b34      	ldr	r3, [pc, #208]	; (8006600 <xTaskResumeAll+0x11c>)
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3318      	adds	r3, #24
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff f8c4 	bl	80056c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3304      	adds	r3, #4
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff f8bf 	bl	80056c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654e:	4b2d      	ldr	r3, [pc, #180]	; (8006604 <xTaskResumeAll+0x120>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d903      	bls.n	800655e <xTaskResumeAll+0x7a>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	4a2a      	ldr	r2, [pc, #168]	; (8006604 <xTaskResumeAll+0x120>)
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4a27      	ldr	r2, [pc, #156]	; (8006608 <xTaskResumeAll+0x124>)
 800656c:	441a      	add	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3304      	adds	r3, #4
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f7ff f84a 	bl	800560e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657e:	4b23      	ldr	r3, [pc, #140]	; (800660c <xTaskResumeAll+0x128>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	429a      	cmp	r2, r3
 8006586:	d302      	bcc.n	800658e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006588:	4b21      	ldr	r3, [pc, #132]	; (8006610 <xTaskResumeAll+0x12c>)
 800658a:	2201      	movs	r2, #1
 800658c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800658e:	4b1c      	ldr	r3, [pc, #112]	; (8006600 <xTaskResumeAll+0x11c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1cb      	bne.n	800652e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800659c:	f000 fb46 	bl	8006c2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80065a0:	4b1c      	ldr	r3, [pc, #112]	; (8006614 <xTaskResumeAll+0x130>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d010      	beq.n	80065ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065ac:	f000 f846 	bl	800663c <xTaskIncrementTick>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d002      	beq.n	80065bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80065b6:	4b16      	ldr	r3, [pc, #88]	; (8006610 <xTaskResumeAll+0x12c>)
 80065b8:	2201      	movs	r2, #1
 80065ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3b01      	subs	r3, #1
 80065c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1f1      	bne.n	80065ac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80065c8:	4b12      	ldr	r3, [pc, #72]	; (8006614 <xTaskResumeAll+0x130>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065ce:	4b10      	ldr	r3, [pc, #64]	; (8006610 <xTaskResumeAll+0x12c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d009      	beq.n	80065ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065d6:	2301      	movs	r3, #1
 80065d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065da:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <xTaskResumeAll+0x134>)
 80065dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065ea:	f001 f8b5 	bl	8007758 <vPortExitCritical>

	return xAlreadyYielded;
 80065ee:	68bb      	ldr	r3, [r7, #8]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20000be4 	.word	0x20000be4
 80065fc:	20000bbc 	.word	0x20000bbc
 8006600:	20000b7c 	.word	0x20000b7c
 8006604:	20000bc4 	.word	0x20000bc4
 8006608:	200006ec 	.word	0x200006ec
 800660c:	200006e8 	.word	0x200006e8
 8006610:	20000bd0 	.word	0x20000bd0
 8006614:	20000bcc 	.word	0x20000bcc
 8006618:	e000ed04 	.word	0xe000ed04

0800661c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006622:	4b05      	ldr	r3, [pc, #20]	; (8006638 <xTaskGetTickCount+0x1c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006628:	687b      	ldr	r3, [r7, #4]
}
 800662a:	4618      	mov	r0, r3
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	20000bc0 	.word	0x20000bc0

0800663c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006642:	2300      	movs	r3, #0
 8006644:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006646:	4b4e      	ldr	r3, [pc, #312]	; (8006780 <xTaskIncrementTick+0x144>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f040 8088 	bne.w	8006760 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006650:	4b4c      	ldr	r3, [pc, #304]	; (8006784 <xTaskIncrementTick+0x148>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3301      	adds	r3, #1
 8006656:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006658:	4a4a      	ldr	r2, [pc, #296]	; (8006784 <xTaskIncrementTick+0x148>)
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d11f      	bne.n	80066a4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006664:	4b48      	ldr	r3, [pc, #288]	; (8006788 <xTaskIncrementTick+0x14c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d009      	beq.n	8006682 <xTaskIncrementTick+0x46>
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	e7fe      	b.n	8006680 <xTaskIncrementTick+0x44>
 8006682:	4b41      	ldr	r3, [pc, #260]	; (8006788 <xTaskIncrementTick+0x14c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	4b40      	ldr	r3, [pc, #256]	; (800678c <xTaskIncrementTick+0x150>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a3e      	ldr	r2, [pc, #248]	; (8006788 <xTaskIncrementTick+0x14c>)
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	4a3e      	ldr	r2, [pc, #248]	; (800678c <xTaskIncrementTick+0x150>)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	4b3e      	ldr	r3, [pc, #248]	; (8006790 <xTaskIncrementTick+0x154>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3301      	adds	r3, #1
 800669c:	4a3c      	ldr	r2, [pc, #240]	; (8006790 <xTaskIncrementTick+0x154>)
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	f000 fac4 	bl	8006c2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066a4:	4b3b      	ldr	r3, [pc, #236]	; (8006794 <xTaskIncrementTick+0x158>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d349      	bcc.n	8006742 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066ae:	4b36      	ldr	r3, [pc, #216]	; (8006788 <xTaskIncrementTick+0x14c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d104      	bne.n	80066c2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066b8:	4b36      	ldr	r3, [pc, #216]	; (8006794 <xTaskIncrementTick+0x158>)
 80066ba:	f04f 32ff 	mov.w	r2, #4294967295
 80066be:	601a      	str	r2, [r3, #0]
					break;
 80066c0:	e03f      	b.n	8006742 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c2:	4b31      	ldr	r3, [pc, #196]	; (8006788 <xTaskIncrementTick+0x14c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d203      	bcs.n	80066e2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066da:	4a2e      	ldr	r2, [pc, #184]	; (8006794 <xTaskIncrementTick+0x158>)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066e0:	e02f      	b.n	8006742 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fe ffee 	bl	80056c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d004      	beq.n	80066fe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	3318      	adds	r3, #24
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fe ffe5 	bl	80056c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006702:	4b25      	ldr	r3, [pc, #148]	; (8006798 <xTaskIncrementTick+0x15c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d903      	bls.n	8006712 <xTaskIncrementTick+0xd6>
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670e:	4a22      	ldr	r2, [pc, #136]	; (8006798 <xTaskIncrementTick+0x15c>)
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4a1f      	ldr	r2, [pc, #124]	; (800679c <xTaskIncrementTick+0x160>)
 8006720:	441a      	add	r2, r3
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	3304      	adds	r3, #4
 8006726:	4619      	mov	r1, r3
 8006728:	4610      	mov	r0, r2
 800672a:	f7fe ff70 	bl	800560e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006732:	4b1b      	ldr	r3, [pc, #108]	; (80067a0 <xTaskIncrementTick+0x164>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	429a      	cmp	r2, r3
 800673a:	d3b8      	bcc.n	80066ae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800673c:	2301      	movs	r3, #1
 800673e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006740:	e7b5      	b.n	80066ae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006742:	4b17      	ldr	r3, [pc, #92]	; (80067a0 <xTaskIncrementTick+0x164>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006748:	4914      	ldr	r1, [pc, #80]	; (800679c <xTaskIncrementTick+0x160>)
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	440b      	add	r3, r1
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d907      	bls.n	800676a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800675a:	2301      	movs	r3, #1
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	e004      	b.n	800676a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006760:	4b10      	ldr	r3, [pc, #64]	; (80067a4 <xTaskIncrementTick+0x168>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3301      	adds	r3, #1
 8006766:	4a0f      	ldr	r2, [pc, #60]	; (80067a4 <xTaskIncrementTick+0x168>)
 8006768:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800676a:	4b0f      	ldr	r3, [pc, #60]	; (80067a8 <xTaskIncrementTick+0x16c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006772:	2301      	movs	r3, #1
 8006774:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006776:	697b      	ldr	r3, [r7, #20]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20000be4 	.word	0x20000be4
 8006784:	20000bc0 	.word	0x20000bc0
 8006788:	20000b74 	.word	0x20000b74
 800678c:	20000b78 	.word	0x20000b78
 8006790:	20000bd4 	.word	0x20000bd4
 8006794:	20000bdc 	.word	0x20000bdc
 8006798:	20000bc4 	.word	0x20000bc4
 800679c:	200006ec 	.word	0x200006ec
 80067a0:	200006e8 	.word	0x200006e8
 80067a4:	20000bcc 	.word	0x20000bcc
 80067a8:	20000bd0 	.word	0x20000bd0

080067ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067b2:	4b27      	ldr	r3, [pc, #156]	; (8006850 <vTaskSwitchContext+0xa4>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067ba:	4b26      	ldr	r3, [pc, #152]	; (8006854 <vTaskSwitchContext+0xa8>)
 80067bc:	2201      	movs	r2, #1
 80067be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067c0:	e040      	b.n	8006844 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80067c2:	4b24      	ldr	r3, [pc, #144]	; (8006854 <vTaskSwitchContext+0xa8>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c8:	4b23      	ldr	r3, [pc, #140]	; (8006858 <vTaskSwitchContext+0xac>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	e00f      	b.n	80067f0 <vTaskSwitchContext+0x44>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d109      	bne.n	80067ea <vTaskSwitchContext+0x3e>
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	607b      	str	r3, [r7, #4]
 80067e8:	e7fe      	b.n	80067e8 <vTaskSwitchContext+0x3c>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	491a      	ldr	r1, [pc, #104]	; (800685c <vTaskSwitchContext+0xb0>)
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	440b      	add	r3, r1
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0e5      	beq.n	80067d0 <vTaskSwitchContext+0x24>
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4a13      	ldr	r2, [pc, #76]	; (800685c <vTaskSwitchContext+0xb0>)
 8006810:	4413      	add	r3, r2
 8006812:	60bb      	str	r3, [r7, #8]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	605a      	str	r2, [r3, #4]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	3308      	adds	r3, #8
 8006826:	429a      	cmp	r2, r3
 8006828:	d104      	bne.n	8006834 <vTaskSwitchContext+0x88>
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	605a      	str	r2, [r3, #4]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	4a09      	ldr	r2, [pc, #36]	; (8006860 <vTaskSwitchContext+0xb4>)
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	4a06      	ldr	r2, [pc, #24]	; (8006858 <vTaskSwitchContext+0xac>)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6013      	str	r3, [r2, #0]
}
 8006844:	bf00      	nop
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	20000be4 	.word	0x20000be4
 8006854:	20000bd0 	.word	0x20000bd0
 8006858:	20000bc4 	.word	0x20000bc4
 800685c:	200006ec 	.word	0x200006ec
 8006860:	200006e8 	.word	0x200006e8

08006864 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d109      	bne.n	8006888 <vTaskPlaceOnEventList+0x24>
 8006874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	e7fe      	b.n	8006886 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006888:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <vTaskPlaceOnEventList+0x44>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3318      	adds	r3, #24
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7fe fee0 	bl	8005656 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006896:	2101      	movs	r1, #1
 8006898:	6838      	ldr	r0, [r7, #0]
 800689a:	f000 fa71 	bl	8006d80 <prvAddCurrentTaskToDelayedList>
}
 800689e:	bf00      	nop
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	200006e8 	.word	0x200006e8

080068ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d109      	bne.n	80068d2 <vTaskPlaceOnEventListRestricted+0x26>
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	e7fe      	b.n	80068d0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068d2:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <vTaskPlaceOnEventListRestricted+0x50>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3318      	adds	r3, #24
 80068d8:	4619      	mov	r1, r3
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f7fe fe97 	bl	800560e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80068e6:	f04f 33ff 	mov.w	r3, #4294967295
 80068ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	68b8      	ldr	r0, [r7, #8]
 80068f0:	f000 fa46 	bl	8006d80 <prvAddCurrentTaskToDelayedList>
	}
 80068f4:	bf00      	nop
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	200006e8 	.word	0x200006e8

08006900 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d109      	bne.n	800692a <xTaskRemoveFromEventList+0x2a>
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	e7fe      	b.n	8006928 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	3318      	adds	r3, #24
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe feca 	bl	80056c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006934:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <xTaskRemoveFromEventList+0xac>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d11d      	bne.n	8006978 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	3304      	adds	r3, #4
 8006940:	4618      	mov	r0, r3
 8006942:	f7fe fec1 	bl	80056c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694a:	4b19      	ldr	r3, [pc, #100]	; (80069b0 <xTaskRemoveFromEventList+0xb0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d903      	bls.n	800695a <xTaskRemoveFromEventList+0x5a>
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006956:	4a16      	ldr	r2, [pc, #88]	; (80069b0 <xTaskRemoveFromEventList+0xb0>)
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695e:	4613      	mov	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4a13      	ldr	r2, [pc, #76]	; (80069b4 <xTaskRemoveFromEventList+0xb4>)
 8006968:	441a      	add	r2, r3
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	3304      	adds	r3, #4
 800696e:	4619      	mov	r1, r3
 8006970:	4610      	mov	r0, r2
 8006972:	f7fe fe4c 	bl	800560e <vListInsertEnd>
 8006976:	e005      	b.n	8006984 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	3318      	adds	r3, #24
 800697c:	4619      	mov	r1, r3
 800697e:	480e      	ldr	r0, [pc, #56]	; (80069b8 <xTaskRemoveFromEventList+0xb8>)
 8006980:	f7fe fe45 	bl	800560e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006988:	4b0c      	ldr	r3, [pc, #48]	; (80069bc <xTaskRemoveFromEventList+0xbc>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698e:	429a      	cmp	r2, r3
 8006990:	d905      	bls.n	800699e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006992:	2301      	movs	r3, #1
 8006994:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006996:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <xTaskRemoveFromEventList+0xc0>)
 8006998:	2201      	movs	r2, #1
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	e001      	b.n	80069a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800699e:	2300      	movs	r3, #0
 80069a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80069a2:	697b      	ldr	r3, [r7, #20]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20000be4 	.word	0x20000be4
 80069b0:	20000bc4 	.word	0x20000bc4
 80069b4:	200006ec 	.word	0x200006ec
 80069b8:	20000b7c 	.word	0x20000b7c
 80069bc:	200006e8 	.word	0x200006e8
 80069c0:	20000bd0 	.word	0x20000bd0

080069c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069cc:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <vTaskInternalSetTimeOutState+0x24>)
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80069d4:	4b05      	ldr	r3, [pc, #20]	; (80069ec <vTaskInternalSetTimeOutState+0x28>)
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	605a      	str	r2, [r3, #4]
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	20000bd4 	.word	0x20000bd4
 80069ec:	20000bc0 	.word	0x20000bc0

080069f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d109      	bne.n	8006a14 <xTaskCheckForTimeOut+0x24>
 8006a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	e7fe      	b.n	8006a12 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d109      	bne.n	8006a2e <xTaskCheckForTimeOut+0x3e>
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	e7fe      	b.n	8006a2c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006a2e:	f000 fe65 	bl	80076fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a32:	4b1d      	ldr	r3, [pc, #116]	; (8006aa8 <xTaskCheckForTimeOut+0xb8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4a:	d102      	bne.n	8006a52 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	61fb      	str	r3, [r7, #28]
 8006a50:	e023      	b.n	8006a9a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	4b15      	ldr	r3, [pc, #84]	; (8006aac <xTaskCheckForTimeOut+0xbc>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d007      	beq.n	8006a6e <xTaskCheckForTimeOut+0x7e>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d302      	bcc.n	8006a6e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	61fb      	str	r3, [r7, #28]
 8006a6c:	e015      	b.n	8006a9a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d20b      	bcs.n	8006a90 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	1ad2      	subs	r2, r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff ff9d 	bl	80069c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61fb      	str	r3, [r7, #28]
 8006a8e:	e004      	b.n	8006a9a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a9a:	f000 fe5d 	bl	8007758 <vPortExitCritical>

	return xReturn;
 8006a9e:	69fb      	ldr	r3, [r7, #28]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3720      	adds	r7, #32
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20000bc0 	.word	0x20000bc0
 8006aac:	20000bd4 	.word	0x20000bd4

08006ab0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ab4:	4b03      	ldr	r3, [pc, #12]	; (8006ac4 <vTaskMissedYield+0x14>)
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
}
 8006aba:	bf00      	nop
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	20000bd0 	.word	0x20000bd0

08006ac8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ad0:	f000 f852 	bl	8006b78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ad4:	4b06      	ldr	r3, [pc, #24]	; (8006af0 <prvIdleTask+0x28>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d9f9      	bls.n	8006ad0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006adc:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <prvIdleTask+0x2c>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006aec:	e7f0      	b.n	8006ad0 <prvIdleTask+0x8>
 8006aee:	bf00      	nop
 8006af0:	200006ec 	.word	0x200006ec
 8006af4:	e000ed04 	.word	0xe000ed04

08006af8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006afe:	2300      	movs	r3, #0
 8006b00:	607b      	str	r3, [r7, #4]
 8006b02:	e00c      	b.n	8006b1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4a12      	ldr	r2, [pc, #72]	; (8006b58 <prvInitialiseTaskLists+0x60>)
 8006b10:	4413      	add	r3, r2
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe fd4e 	bl	80055b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	607b      	str	r3, [r7, #4]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b37      	cmp	r3, #55	; 0x37
 8006b22:	d9ef      	bls.n	8006b04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b24:	480d      	ldr	r0, [pc, #52]	; (8006b5c <prvInitialiseTaskLists+0x64>)
 8006b26:	f7fe fd45 	bl	80055b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b2a:	480d      	ldr	r0, [pc, #52]	; (8006b60 <prvInitialiseTaskLists+0x68>)
 8006b2c:	f7fe fd42 	bl	80055b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b30:	480c      	ldr	r0, [pc, #48]	; (8006b64 <prvInitialiseTaskLists+0x6c>)
 8006b32:	f7fe fd3f 	bl	80055b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b36:	480c      	ldr	r0, [pc, #48]	; (8006b68 <prvInitialiseTaskLists+0x70>)
 8006b38:	f7fe fd3c 	bl	80055b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b3c:	480b      	ldr	r0, [pc, #44]	; (8006b6c <prvInitialiseTaskLists+0x74>)
 8006b3e:	f7fe fd39 	bl	80055b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b42:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <prvInitialiseTaskLists+0x78>)
 8006b44:	4a05      	ldr	r2, [pc, #20]	; (8006b5c <prvInitialiseTaskLists+0x64>)
 8006b46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b48:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <prvInitialiseTaskLists+0x7c>)
 8006b4a:	4a05      	ldr	r2, [pc, #20]	; (8006b60 <prvInitialiseTaskLists+0x68>)
 8006b4c:	601a      	str	r2, [r3, #0]
}
 8006b4e:	bf00      	nop
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	200006ec 	.word	0x200006ec
 8006b5c:	20000b4c 	.word	0x20000b4c
 8006b60:	20000b60 	.word	0x20000b60
 8006b64:	20000b7c 	.word	0x20000b7c
 8006b68:	20000b90 	.word	0x20000b90
 8006b6c:	20000ba8 	.word	0x20000ba8
 8006b70:	20000b74 	.word	0x20000b74
 8006b74:	20000b78 	.word	0x20000b78

08006b78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b7e:	e019      	b.n	8006bb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b80:	f000 fdbc 	bl	80076fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b84:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <prvCheckTasksWaitingTermination+0x4c>)
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fe fd99 	bl	80056c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b96:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <prvCheckTasksWaitingTermination+0x50>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	4a0a      	ldr	r2, [pc, #40]	; (8006bc8 <prvCheckTasksWaitingTermination+0x50>)
 8006b9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ba0:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <prvCheckTasksWaitingTermination+0x54>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	4a09      	ldr	r2, [pc, #36]	; (8006bcc <prvCheckTasksWaitingTermination+0x54>)
 8006ba8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006baa:	f000 fdd5 	bl	8007758 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f80e 	bl	8006bd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <prvCheckTasksWaitingTermination+0x54>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1e1      	bne.n	8006b80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006bbc:	bf00      	nop
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20000b90 	.word	0x20000b90
 8006bc8:	20000bbc 	.word	0x20000bbc
 8006bcc:	20000ba4 	.word	0x20000ba4

08006bd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d108      	bne.n	8006bf4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 ff64 	bl	8007ab4 <vPortFree>
				vPortFree( pxTCB );
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 ff61 	bl	8007ab4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006bf2:	e017      	b.n	8006c24 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d103      	bne.n	8006c06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 ff58 	bl	8007ab4 <vPortFree>
	}
 8006c04:	e00e      	b.n	8006c24 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d009      	beq.n	8006c24 <prvDeleteTCB+0x54>
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	e7fe      	b.n	8006c22 <prvDeleteTCB+0x52>
	}
 8006c24:	bf00      	nop
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c32:	4b0c      	ldr	r3, [pc, #48]	; (8006c64 <prvResetNextTaskUnblockTime+0x38>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d104      	bne.n	8006c46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <prvResetNextTaskUnblockTime+0x3c>)
 8006c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c44:	e008      	b.n	8006c58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c46:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <prvResetNextTaskUnblockTime+0x38>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	4a04      	ldr	r2, [pc, #16]	; (8006c68 <prvResetNextTaskUnblockTime+0x3c>)
 8006c56:	6013      	str	r3, [r2, #0]
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	20000b74 	.word	0x20000b74
 8006c68:	20000bdc 	.word	0x20000bdc

08006c6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c72:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <xTaskGetSchedulerState+0x34>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d102      	bne.n	8006c80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	607b      	str	r3, [r7, #4]
 8006c7e:	e008      	b.n	8006c92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c80:	4b08      	ldr	r3, [pc, #32]	; (8006ca4 <xTaskGetSchedulerState+0x38>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c88:	2302      	movs	r3, #2
 8006c8a:	607b      	str	r3, [r7, #4]
 8006c8c:	e001      	b.n	8006c92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c92:	687b      	ldr	r3, [r7, #4]
	}
 8006c94:	4618      	mov	r0, r3
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	20000bc8 	.word	0x20000bc8
 8006ca4:	20000be4 	.word	0x20000be4

08006ca8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d054      	beq.n	8006d68 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006cbe:	4b2d      	ldr	r3, [pc, #180]	; (8006d74 <xTaskPriorityDisinherit+0xcc>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d009      	beq.n	8006cdc <xTaskPriorityDisinherit+0x34>
 8006cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ccc:	f383 8811 	msr	BASEPRI, r3
 8006cd0:	f3bf 8f6f 	isb	sy
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	e7fe      	b.n	8006cda <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d109      	bne.n	8006cf8 <xTaskPriorityDisinherit+0x50>
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	60bb      	str	r3, [r7, #8]
 8006cf6:	e7fe      	b.n	8006cf6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfc:	1e5a      	subs	r2, r3, #1
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d02c      	beq.n	8006d68 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d128      	bne.n	8006d68 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fcd4 	bl	80056c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d38:	4b0f      	ldr	r3, [pc, #60]	; (8006d78 <xTaskPriorityDisinherit+0xd0>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d903      	bls.n	8006d48 <xTaskPriorityDisinherit+0xa0>
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d44:	4a0c      	ldr	r2, [pc, #48]	; (8006d78 <xTaskPriorityDisinherit+0xd0>)
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4a09      	ldr	r2, [pc, #36]	; (8006d7c <xTaskPriorityDisinherit+0xd4>)
 8006d56:	441a      	add	r2, r3
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	f7fe fc55 	bl	800560e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d64:	2301      	movs	r3, #1
 8006d66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d68:	697b      	ldr	r3, [r7, #20]
	}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	200006e8 	.word	0x200006e8
 8006d78:	20000bc4 	.word	0x20000bc4
 8006d7c:	200006ec 	.word	0x200006ec

08006d80 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d8a:	4b21      	ldr	r3, [pc, #132]	; (8006e10 <prvAddCurrentTaskToDelayedList+0x90>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d90:	4b20      	ldr	r3, [pc, #128]	; (8006e14 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3304      	adds	r3, #4
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fe fc96 	bl	80056c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da2:	d10a      	bne.n	8006dba <prvAddCurrentTaskToDelayedList+0x3a>
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d007      	beq.n	8006dba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006daa:	4b1a      	ldr	r3, [pc, #104]	; (8006e14 <prvAddCurrentTaskToDelayedList+0x94>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4619      	mov	r1, r3
 8006db2:	4819      	ldr	r0, [pc, #100]	; (8006e18 <prvAddCurrentTaskToDelayedList+0x98>)
 8006db4:	f7fe fc2b 	bl	800560e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006db8:	e026      	b.n	8006e08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006dc2:	4b14      	ldr	r3, [pc, #80]	; (8006e14 <prvAddCurrentTaskToDelayedList+0x94>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d209      	bcs.n	8006de6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dd2:	4b12      	ldr	r3, [pc, #72]	; (8006e1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	4b0f      	ldr	r3, [pc, #60]	; (8006e14 <prvAddCurrentTaskToDelayedList+0x94>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4610      	mov	r0, r2
 8006de0:	f7fe fc39 	bl	8005656 <vListInsert>
}
 8006de4:	e010      	b.n	8006e08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006de6:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <prvAddCurrentTaskToDelayedList+0x94>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3304      	adds	r3, #4
 8006df0:	4619      	mov	r1, r3
 8006df2:	4610      	mov	r0, r2
 8006df4:	f7fe fc2f 	bl	8005656 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006df8:	4b0a      	ldr	r3, [pc, #40]	; (8006e24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d202      	bcs.n	8006e08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006e02:	4a08      	ldr	r2, [pc, #32]	; (8006e24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	6013      	str	r3, [r2, #0]
}
 8006e08:	bf00      	nop
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	20000bc0 	.word	0x20000bc0
 8006e14:	200006e8 	.word	0x200006e8
 8006e18:	20000ba8 	.word	0x20000ba8
 8006e1c:	20000b78 	.word	0x20000b78
 8006e20:	20000b74 	.word	0x20000b74
 8006e24:	20000bdc 	.word	0x20000bdc

08006e28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08a      	sub	sp, #40	; 0x28
 8006e2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006e32:	f000 faff 	bl	8007434 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006e36:	4b1c      	ldr	r3, [pc, #112]	; (8006ea8 <xTimerCreateTimerTask+0x80>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d021      	beq.n	8006e82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006e46:	1d3a      	adds	r2, r7, #4
 8006e48:	f107 0108 	add.w	r1, r7, #8
 8006e4c:	f107 030c 	add.w	r3, r7, #12
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fe fb95 	bl	8005580 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006e56:	6879      	ldr	r1, [r7, #4]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	9202      	str	r2, [sp, #8]
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	2302      	movs	r3, #2
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	2300      	movs	r3, #0
 8006e66:	460a      	mov	r2, r1
 8006e68:	4910      	ldr	r1, [pc, #64]	; (8006eac <xTimerCreateTimerTask+0x84>)
 8006e6a:	4811      	ldr	r0, [pc, #68]	; (8006eb0 <xTimerCreateTimerTask+0x88>)
 8006e6c:	f7ff f92a 	bl	80060c4 <xTaskCreateStatic>
 8006e70:	4602      	mov	r2, r0
 8006e72:	4b10      	ldr	r3, [pc, #64]	; (8006eb4 <xTimerCreateTimerTask+0x8c>)
 8006e74:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006e76:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <xTimerCreateTimerTask+0x8c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d109      	bne.n	8006e9c <xTimerCreateTimerTask+0x74>
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	e7fe      	b.n	8006e9a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006e9c:	697b      	ldr	r3, [r7, #20]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000c18 	.word	0x20000c18
 8006eac:	08007f10 	.word	0x08007f10
 8006eb0:	08006fe9 	.word	0x08006fe9
 8006eb4:	20000c1c 	.word	0x20000c1c

08006eb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08a      	sub	sp, #40	; 0x28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d109      	bne.n	8006ee4 <xTimerGenericCommand+0x2c>
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	623b      	str	r3, [r7, #32]
 8006ee2:	e7fe      	b.n	8006ee2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ee4:	4b19      	ldr	r3, [pc, #100]	; (8006f4c <xTimerGenericCommand+0x94>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d02a      	beq.n	8006f42 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b05      	cmp	r3, #5
 8006efc:	dc18      	bgt.n	8006f30 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006efe:	f7ff feb5 	bl	8006c6c <xTaskGetSchedulerState>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d109      	bne.n	8006f1c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f08:	4b10      	ldr	r3, [pc, #64]	; (8006f4c <xTimerGenericCommand+0x94>)
 8006f0a:	6818      	ldr	r0, [r3, #0]
 8006f0c:	f107 0110 	add.w	r1, r7, #16
 8006f10:	2300      	movs	r3, #0
 8006f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f14:	f7fe fd00 	bl	8005918 <xQueueGenericSend>
 8006f18:	6278      	str	r0, [r7, #36]	; 0x24
 8006f1a:	e012      	b.n	8006f42 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <xTimerGenericCommand+0x94>)
 8006f1e:	6818      	ldr	r0, [r3, #0]
 8006f20:	f107 0110 	add.w	r1, r7, #16
 8006f24:	2300      	movs	r3, #0
 8006f26:	2200      	movs	r2, #0
 8006f28:	f7fe fcf6 	bl	8005918 <xQueueGenericSend>
 8006f2c:	6278      	str	r0, [r7, #36]	; 0x24
 8006f2e:	e008      	b.n	8006f42 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f30:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <xTimerGenericCommand+0x94>)
 8006f32:	6818      	ldr	r0, [r3, #0]
 8006f34:	f107 0110 	add.w	r1, r7, #16
 8006f38:	2300      	movs	r3, #0
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	f7fe fde6 	bl	8005b0c <xQueueGenericSendFromISR>
 8006f40:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3728      	adds	r7, #40	; 0x28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20000c18 	.word	0x20000c18

08006f50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f5a:	4b22      	ldr	r3, [pc, #136]	; (8006fe4 <prvProcessExpiredTimer+0x94>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	3304      	adds	r3, #4
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fe fbad 	bl	80056c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d021      	beq.n	8006fc0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	699a      	ldr	r2, [r3, #24]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	18d1      	adds	r1, r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	6978      	ldr	r0, [r7, #20]
 8006f8a:	f000 f8d1 	bl	8007130 <prvInsertTimerInActiveList>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d01e      	beq.n	8006fd2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f94:	2300      	movs	r3, #0
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	6978      	ldr	r0, [r7, #20]
 8006fa0:	f7ff ff8a 	bl	8006eb8 <xTimerGenericCommand>
 8006fa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d112      	bne.n	8006fd2 <prvProcessExpiredTimer+0x82>
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	e7fe      	b.n	8006fbe <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fc6:	f023 0301 	bic.w	r3, r3, #1
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	6978      	ldr	r0, [r7, #20]
 8006fd8:	4798      	blx	r3
}
 8006fda:	bf00      	nop
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20000c10 	.word	0x20000c10

08006fe8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ff0:	f107 0308 	add.w	r3, r7, #8
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 f857 	bl	80070a8 <prvGetNextExpireTime>
 8006ffa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4619      	mov	r1, r3
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 f803 	bl	800700c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007006:	f000 f8d5 	bl	80071b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800700a:	e7f1      	b.n	8006ff0 <prvTimerTask+0x8>

0800700c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007016:	f7ff fa57 	bl	80064c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800701a:	f107 0308 	add.w	r3, r7, #8
 800701e:	4618      	mov	r0, r3
 8007020:	f000 f866 	bl	80070f0 <prvSampleTimeNow>
 8007024:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d130      	bne.n	800708e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10a      	bne.n	8007048 <prvProcessTimerOrBlockTask+0x3c>
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	429a      	cmp	r2, r3
 8007038:	d806      	bhi.n	8007048 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800703a:	f7ff fa53 	bl	80064e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800703e:	68f9      	ldr	r1, [r7, #12]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7ff ff85 	bl	8006f50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007046:	e024      	b.n	8007092 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d008      	beq.n	8007060 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800704e:	4b13      	ldr	r3, [pc, #76]	; (800709c <prvProcessTimerOrBlockTask+0x90>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <prvProcessTimerOrBlockTask+0x50>
 8007058:	2301      	movs	r3, #1
 800705a:	e000      	b.n	800705e <prvProcessTimerOrBlockTask+0x52>
 800705c:	2300      	movs	r3, #0
 800705e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007060:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <prvProcessTimerOrBlockTask+0x94>)
 8007062:	6818      	ldr	r0, [r3, #0]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	4619      	mov	r1, r3
 800706e:	f7fe fff5 	bl	800605c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007072:	f7ff fa37 	bl	80064e4 <xTaskResumeAll>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800707c:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <prvProcessTimerOrBlockTask+0x98>)
 800707e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	f3bf 8f6f 	isb	sy
}
 800708c:	e001      	b.n	8007092 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800708e:	f7ff fa29 	bl	80064e4 <xTaskResumeAll>
}
 8007092:	bf00      	nop
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20000c14 	.word	0x20000c14
 80070a0:	20000c18 	.word	0x20000c18
 80070a4:	e000ed04 	.word	0xe000ed04

080070a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80070b0:	4b0e      	ldr	r3, [pc, #56]	; (80070ec <prvGetNextExpireTime+0x44>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <prvGetNextExpireTime+0x16>
 80070ba:	2201      	movs	r2, #1
 80070bc:	e000      	b.n	80070c0 <prvGetNextExpireTime+0x18>
 80070be:	2200      	movs	r2, #0
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d105      	bne.n	80070d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070cc:	4b07      	ldr	r3, [pc, #28]	; (80070ec <prvGetNextExpireTime+0x44>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	e001      	b.n	80070dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80070dc:	68fb      	ldr	r3, [r7, #12]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	20000c10 	.word	0x20000c10

080070f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80070f8:	f7ff fa90 	bl	800661c <xTaskGetTickCount>
 80070fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80070fe:	4b0b      	ldr	r3, [pc, #44]	; (800712c <prvSampleTimeNow+0x3c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	429a      	cmp	r2, r3
 8007106:	d205      	bcs.n	8007114 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007108:	f000 f930 	bl	800736c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	e002      	b.n	800711a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800711a:	4a04      	ldr	r2, [pc, #16]	; (800712c <prvSampleTimeNow+0x3c>)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007120:	68fb      	ldr	r3, [r7, #12]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20000c20 	.word	0x20000c20

08007130 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800713e:	2300      	movs	r3, #0
 8007140:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	429a      	cmp	r2, r3
 8007154:	d812      	bhi.n	800717c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	1ad2      	subs	r2, r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	429a      	cmp	r2, r3
 8007162:	d302      	bcc.n	800716a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007164:	2301      	movs	r3, #1
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	e01b      	b.n	80071a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800716a:	4b10      	ldr	r3, [pc, #64]	; (80071ac <prvInsertTimerInActiveList+0x7c>)
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3304      	adds	r3, #4
 8007172:	4619      	mov	r1, r3
 8007174:	4610      	mov	r0, r2
 8007176:	f7fe fa6e 	bl	8005656 <vListInsert>
 800717a:	e012      	b.n	80071a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	429a      	cmp	r2, r3
 8007182:	d206      	bcs.n	8007192 <prvInsertTimerInActiveList+0x62>
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d302      	bcc.n	8007192 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800718c:	2301      	movs	r3, #1
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	e007      	b.n	80071a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007192:	4b07      	ldr	r3, [pc, #28]	; (80071b0 <prvInsertTimerInActiveList+0x80>)
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3304      	adds	r3, #4
 800719a:	4619      	mov	r1, r3
 800719c:	4610      	mov	r0, r2
 800719e:	f7fe fa5a 	bl	8005656 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80071a2:	697b      	ldr	r3, [r7, #20]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	20000c14 	.word	0x20000c14
 80071b0:	20000c10 	.word	0x20000c10

080071b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08e      	sub	sp, #56	; 0x38
 80071b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071ba:	e0c6      	b.n	800734a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	da17      	bge.n	80071f2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80071c2:	1d3b      	adds	r3, r7, #4
 80071c4:	3304      	adds	r3, #4
 80071c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80071c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d109      	bne.n	80071e2 <prvProcessReceivedCommands+0x2e>
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	61fb      	str	r3, [r7, #28]
 80071e0:	e7fe      	b.n	80071e0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071e8:	6850      	ldr	r0, [r2, #4]
 80071ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ec:	6892      	ldr	r2, [r2, #8]
 80071ee:	4611      	mov	r1, r2
 80071f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f2c0 80a7 	blt.w	8007348 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d004      	beq.n	8007210 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007208:	3304      	adds	r3, #4
 800720a:	4618      	mov	r0, r3
 800720c:	f7fe fa5c 	bl	80056c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007210:	463b      	mov	r3, r7
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff ff6c 	bl	80070f0 <prvSampleTimeNow>
 8007218:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b09      	cmp	r3, #9
 800721e:	f200 8094 	bhi.w	800734a <prvProcessReceivedCommands+0x196>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <prvProcessReceivedCommands+0x74>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	08007251 	.word	0x08007251
 800722c:	08007251 	.word	0x08007251
 8007230:	08007251 	.word	0x08007251
 8007234:	080072c3 	.word	0x080072c3
 8007238:	080072d7 	.word	0x080072d7
 800723c:	0800731f 	.word	0x0800731f
 8007240:	08007251 	.word	0x08007251
 8007244:	08007251 	.word	0x08007251
 8007248:	080072c3 	.word	0x080072c3
 800724c:	080072d7 	.word	0x080072d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007256:	f043 0301 	orr.w	r3, r3, #1
 800725a:	b2da      	uxtb	r2, r3
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	18d1      	adds	r1, r2, r3
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800726e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007270:	f7ff ff5e 	bl	8007130 <prvInsertTimerInActiveList>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d067      	beq.n	800734a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007280:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007288:	f003 0304 	and.w	r3, r3, #4
 800728c:	2b00      	cmp	r3, #0
 800728e:	d05c      	beq.n	800734a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	441a      	add	r2, r3
 8007298:	2300      	movs	r3, #0
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	2300      	movs	r3, #0
 800729e:	2100      	movs	r1, #0
 80072a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072a2:	f7ff fe09 	bl	8006eb8 <xTimerGenericCommand>
 80072a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d14d      	bne.n	800734a <prvProcessReceivedCommands+0x196>
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	61bb      	str	r3, [r7, #24]
 80072c0:	e7fe      	b.n	80072c0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072c8:	f023 0301 	bic.w	r3, r3, #1
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80072d4:	e039      	b.n	800734a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072dc:	f043 0301 	orr.w	r3, r3, #1
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d109      	bne.n	800730a <prvProcessReceivedCommands+0x156>
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	e7fe      	b.n	8007308 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	699a      	ldr	r2, [r3, #24]
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	18d1      	adds	r1, r2, r3
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007318:	f7ff ff0a 	bl	8007130 <prvInsertTimerInActiveList>
					break;
 800731c:	e015      	b.n	800734a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d103      	bne.n	8007334 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800732c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800732e:	f000 fbc1 	bl	8007ab4 <vPortFree>
 8007332:	e00a      	b.n	800734a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800733a:	f023 0301 	bic.w	r3, r3, #1
 800733e:	b2da      	uxtb	r2, r3
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007346:	e000      	b.n	800734a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007348:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800734a:	4b07      	ldr	r3, [pc, #28]	; (8007368 <prvProcessReceivedCommands+0x1b4>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	1d39      	adds	r1, r7, #4
 8007350:	2200      	movs	r2, #0
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe fc6e 	bl	8005c34 <xQueueReceive>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	f47f af2e 	bne.w	80071bc <prvProcessReceivedCommands+0x8>
	}
}
 8007360:	bf00      	nop
 8007362:	3730      	adds	r7, #48	; 0x30
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20000c18 	.word	0x20000c18

0800736c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b088      	sub	sp, #32
 8007370:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007372:	e047      	b.n	8007404 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007374:	4b2d      	ldr	r3, [pc, #180]	; (800742c <prvSwitchTimerLists+0xc0>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800737e:	4b2b      	ldr	r3, [pc, #172]	; (800742c <prvSwitchTimerLists+0xc0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3304      	adds	r3, #4
 800738c:	4618      	mov	r0, r3
 800738e:	f7fe f99b 	bl	80056c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d02d      	beq.n	8007404 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4413      	add	r3, r2
 80073b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d90e      	bls.n	80073d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073c6:	4b19      	ldr	r3, [pc, #100]	; (800742c <prvSwitchTimerLists+0xc0>)
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3304      	adds	r3, #4
 80073ce:	4619      	mov	r1, r3
 80073d0:	4610      	mov	r0, r2
 80073d2:	f7fe f940 	bl	8005656 <vListInsert>
 80073d6:	e015      	b.n	8007404 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073d8:	2300      	movs	r3, #0
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	2300      	movs	r3, #0
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	2100      	movs	r1, #0
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f7ff fd68 	bl	8006eb8 <xTimerGenericCommand>
 80073e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <prvSwitchTimerLists+0x98>
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	603b      	str	r3, [r7, #0]
 8007402:	e7fe      	b.n	8007402 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007404:	4b09      	ldr	r3, [pc, #36]	; (800742c <prvSwitchTimerLists+0xc0>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1b2      	bne.n	8007374 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800740e:	4b07      	ldr	r3, [pc, #28]	; (800742c <prvSwitchTimerLists+0xc0>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007414:	4b06      	ldr	r3, [pc, #24]	; (8007430 <prvSwitchTimerLists+0xc4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a04      	ldr	r2, [pc, #16]	; (800742c <prvSwitchTimerLists+0xc0>)
 800741a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800741c:	4a04      	ldr	r2, [pc, #16]	; (8007430 <prvSwitchTimerLists+0xc4>)
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	6013      	str	r3, [r2, #0]
}
 8007422:	bf00      	nop
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20000c10 	.word	0x20000c10
 8007430:	20000c14 	.word	0x20000c14

08007434 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800743a:	f000 f95f 	bl	80076fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800743e:	4b15      	ldr	r3, [pc, #84]	; (8007494 <prvCheckForValidListAndQueue+0x60>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d120      	bne.n	8007488 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007446:	4814      	ldr	r0, [pc, #80]	; (8007498 <prvCheckForValidListAndQueue+0x64>)
 8007448:	f7fe f8b4 	bl	80055b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800744c:	4813      	ldr	r0, [pc, #76]	; (800749c <prvCheckForValidListAndQueue+0x68>)
 800744e:	f7fe f8b1 	bl	80055b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007452:	4b13      	ldr	r3, [pc, #76]	; (80074a0 <prvCheckForValidListAndQueue+0x6c>)
 8007454:	4a10      	ldr	r2, [pc, #64]	; (8007498 <prvCheckForValidListAndQueue+0x64>)
 8007456:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007458:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <prvCheckForValidListAndQueue+0x70>)
 800745a:	4a10      	ldr	r2, [pc, #64]	; (800749c <prvCheckForValidListAndQueue+0x68>)
 800745c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800745e:	2300      	movs	r3, #0
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	4b11      	ldr	r3, [pc, #68]	; (80074a8 <prvCheckForValidListAndQueue+0x74>)
 8007464:	4a11      	ldr	r2, [pc, #68]	; (80074ac <prvCheckForValidListAndQueue+0x78>)
 8007466:	2110      	movs	r1, #16
 8007468:	200a      	movs	r0, #10
 800746a:	f7fe f9bf 	bl	80057ec <xQueueGenericCreateStatic>
 800746e:	4602      	mov	r2, r0
 8007470:	4b08      	ldr	r3, [pc, #32]	; (8007494 <prvCheckForValidListAndQueue+0x60>)
 8007472:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007474:	4b07      	ldr	r3, [pc, #28]	; (8007494 <prvCheckForValidListAndQueue+0x60>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800747c:	4b05      	ldr	r3, [pc, #20]	; (8007494 <prvCheckForValidListAndQueue+0x60>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	490b      	ldr	r1, [pc, #44]	; (80074b0 <prvCheckForValidListAndQueue+0x7c>)
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe fdc2 	bl	800600c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007488:	f000 f966 	bl	8007758 <vPortExitCritical>
}
 800748c:	bf00      	nop
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20000c18 	.word	0x20000c18
 8007498:	20000be8 	.word	0x20000be8
 800749c:	20000bfc 	.word	0x20000bfc
 80074a0:	20000c10 	.word	0x20000c10
 80074a4:	20000c14 	.word	0x20000c14
 80074a8:	20000cc4 	.word	0x20000cc4
 80074ac:	20000c24 	.word	0x20000c24
 80074b0:	08007f18 	.word	0x08007f18

080074b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3b04      	subs	r3, #4
 80074c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3b04      	subs	r3, #4
 80074d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f023 0201 	bic.w	r2, r3, #1
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3b04      	subs	r3, #4
 80074e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074e4:	4a0c      	ldr	r2, [pc, #48]	; (8007518 <pxPortInitialiseStack+0x64>)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3b14      	subs	r3, #20
 80074ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3b04      	subs	r3, #4
 80074fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f06f 0202 	mvn.w	r2, #2
 8007502:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	3b20      	subs	r3, #32
 8007508:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800750a:	68fb      	ldr	r3, [r7, #12]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	0800751d 	.word	0x0800751d

0800751c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007526:	4b11      	ldr	r3, [pc, #68]	; (800756c <prvTaskExitError+0x50>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752e:	d009      	beq.n	8007544 <prvTaskExitError+0x28>
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	e7fe      	b.n	8007542 <prvTaskExitError+0x26>
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007556:	bf00      	nop
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d0fc      	beq.n	8007558 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800755e:	bf00      	nop
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	2000000c 	.word	0x2000000c

08007570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007570:	4b07      	ldr	r3, [pc, #28]	; (8007590 <pxCurrentTCBConst2>)
 8007572:	6819      	ldr	r1, [r3, #0]
 8007574:	6808      	ldr	r0, [r1, #0]
 8007576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757a:	f380 8809 	msr	PSP, r0
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f04f 0000 	mov.w	r0, #0
 8007586:	f380 8811 	msr	BASEPRI, r0
 800758a:	4770      	bx	lr
 800758c:	f3af 8000 	nop.w

08007590 <pxCurrentTCBConst2>:
 8007590:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop

08007598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007598:	4808      	ldr	r0, [pc, #32]	; (80075bc <prvPortStartFirstTask+0x24>)
 800759a:	6800      	ldr	r0, [r0, #0]
 800759c:	6800      	ldr	r0, [r0, #0]
 800759e:	f380 8808 	msr	MSP, r0
 80075a2:	f04f 0000 	mov.w	r0, #0
 80075a6:	f380 8814 	msr	CONTROL, r0
 80075aa:	b662      	cpsie	i
 80075ac:	b661      	cpsie	f
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	df00      	svc	0
 80075b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075ba:	bf00      	nop
 80075bc:	e000ed08 	.word	0xe000ed08

080075c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075c6:	4b44      	ldr	r3, [pc, #272]	; (80076d8 <xPortStartScheduler+0x118>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a44      	ldr	r2, [pc, #272]	; (80076dc <xPortStartScheduler+0x11c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d109      	bne.n	80075e4 <xPortStartScheduler+0x24>
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	613b      	str	r3, [r7, #16]
 80075e2:	e7fe      	b.n	80075e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075e4:	4b3c      	ldr	r3, [pc, #240]	; (80076d8 <xPortStartScheduler+0x118>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a3d      	ldr	r2, [pc, #244]	; (80076e0 <xPortStartScheduler+0x120>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d109      	bne.n	8007602 <xPortStartScheduler+0x42>
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	e7fe      	b.n	8007600 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007602:	4b38      	ldr	r3, [pc, #224]	; (80076e4 <xPortStartScheduler+0x124>)
 8007604:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	b2db      	uxtb	r3, r3
 800760c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	22ff      	movs	r2, #255	; 0xff
 8007612:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800761c:	78fb      	ldrb	r3, [r7, #3]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007624:	b2da      	uxtb	r2, r3
 8007626:	4b30      	ldr	r3, [pc, #192]	; (80076e8 <xPortStartScheduler+0x128>)
 8007628:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800762a:	4b30      	ldr	r3, [pc, #192]	; (80076ec <xPortStartScheduler+0x12c>)
 800762c:	2207      	movs	r2, #7
 800762e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007630:	e009      	b.n	8007646 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007632:	4b2e      	ldr	r3, [pc, #184]	; (80076ec <xPortStartScheduler+0x12c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3b01      	subs	r3, #1
 8007638:	4a2c      	ldr	r2, [pc, #176]	; (80076ec <xPortStartScheduler+0x12c>)
 800763a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	b2db      	uxtb	r3, r3
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	b2db      	uxtb	r3, r3
 8007644:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007646:	78fb      	ldrb	r3, [r7, #3]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764e:	2b80      	cmp	r3, #128	; 0x80
 8007650:	d0ef      	beq.n	8007632 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007652:	4b26      	ldr	r3, [pc, #152]	; (80076ec <xPortStartScheduler+0x12c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f1c3 0307 	rsb	r3, r3, #7
 800765a:	2b04      	cmp	r3, #4
 800765c:	d009      	beq.n	8007672 <xPortStartScheduler+0xb2>
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	60bb      	str	r3, [r7, #8]
 8007670:	e7fe      	b.n	8007670 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007672:	4b1e      	ldr	r3, [pc, #120]	; (80076ec <xPortStartScheduler+0x12c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	021b      	lsls	r3, r3, #8
 8007678:	4a1c      	ldr	r2, [pc, #112]	; (80076ec <xPortStartScheduler+0x12c>)
 800767a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800767c:	4b1b      	ldr	r3, [pc, #108]	; (80076ec <xPortStartScheduler+0x12c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007684:	4a19      	ldr	r2, [pc, #100]	; (80076ec <xPortStartScheduler+0x12c>)
 8007686:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	b2da      	uxtb	r2, r3
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007690:	4b17      	ldr	r3, [pc, #92]	; (80076f0 <xPortStartScheduler+0x130>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a16      	ldr	r2, [pc, #88]	; (80076f0 <xPortStartScheduler+0x130>)
 8007696:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800769a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800769c:	4b14      	ldr	r3, [pc, #80]	; (80076f0 <xPortStartScheduler+0x130>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a13      	ldr	r2, [pc, #76]	; (80076f0 <xPortStartScheduler+0x130>)
 80076a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076a8:	f000 f8d6 	bl	8007858 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076ac:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <xPortStartScheduler+0x134>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076b2:	f000 f8f5 	bl	80078a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076b6:	4b10      	ldr	r3, [pc, #64]	; (80076f8 <xPortStartScheduler+0x138>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a0f      	ldr	r2, [pc, #60]	; (80076f8 <xPortStartScheduler+0x138>)
 80076bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80076c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076c2:	f7ff ff69 	bl	8007598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076c6:	f7ff f871 	bl	80067ac <vTaskSwitchContext>
	prvTaskExitError();
 80076ca:	f7ff ff27 	bl	800751c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	e000ed00 	.word	0xe000ed00
 80076dc:	410fc271 	.word	0x410fc271
 80076e0:	410fc270 	.word	0x410fc270
 80076e4:	e000e400 	.word	0xe000e400
 80076e8:	20000d14 	.word	0x20000d14
 80076ec:	20000d18 	.word	0x20000d18
 80076f0:	e000ed20 	.word	0xe000ed20
 80076f4:	2000000c 	.word	0x2000000c
 80076f8:	e000ef34 	.word	0xe000ef34

080076fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007714:	4b0e      	ldr	r3, [pc, #56]	; (8007750 <vPortEnterCritical+0x54>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3301      	adds	r3, #1
 800771a:	4a0d      	ldr	r2, [pc, #52]	; (8007750 <vPortEnterCritical+0x54>)
 800771c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800771e:	4b0c      	ldr	r3, [pc, #48]	; (8007750 <vPortEnterCritical+0x54>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d10e      	bne.n	8007744 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007726:	4b0b      	ldr	r3, [pc, #44]	; (8007754 <vPortEnterCritical+0x58>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d009      	beq.n	8007744 <vPortEnterCritical+0x48>
 8007730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	603b      	str	r3, [r7, #0]
 8007742:	e7fe      	b.n	8007742 <vPortEnterCritical+0x46>
	}
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	2000000c 	.word	0x2000000c
 8007754:	e000ed04 	.word	0xe000ed04

08007758 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800775e:	4b11      	ldr	r3, [pc, #68]	; (80077a4 <vPortExitCritical+0x4c>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d109      	bne.n	800777a <vPortExitCritical+0x22>
 8007766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	607b      	str	r3, [r7, #4]
 8007778:	e7fe      	b.n	8007778 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800777a:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <vPortExitCritical+0x4c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3b01      	subs	r3, #1
 8007780:	4a08      	ldr	r2, [pc, #32]	; (80077a4 <vPortExitCritical+0x4c>)
 8007782:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007784:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <vPortExitCritical+0x4c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d104      	bne.n	8007796 <vPortExitCritical+0x3e>
 800778c:	2300      	movs	r3, #0
 800778e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	2000000c 	.word	0x2000000c
	...

080077b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077b0:	f3ef 8009 	mrs	r0, PSP
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	4b15      	ldr	r3, [pc, #84]	; (8007810 <pxCurrentTCBConst>)
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	f01e 0f10 	tst.w	lr, #16
 80077c0:	bf08      	it	eq
 80077c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ca:	6010      	str	r0, [r2, #0]
 80077cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077d4:	f380 8811 	msr	BASEPRI, r0
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f7fe ffe4 	bl	80067ac <vTaskSwitchContext>
 80077e4:	f04f 0000 	mov.w	r0, #0
 80077e8:	f380 8811 	msr	BASEPRI, r0
 80077ec:	bc09      	pop	{r0, r3}
 80077ee:	6819      	ldr	r1, [r3, #0]
 80077f0:	6808      	ldr	r0, [r1, #0]
 80077f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f6:	f01e 0f10 	tst.w	lr, #16
 80077fa:	bf08      	it	eq
 80077fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007800:	f380 8809 	msr	PSP, r0
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	f3af 8000 	nop.w

08007810 <pxCurrentTCBConst>:
 8007810:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop

08007818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007830:	f7fe ff04 	bl	800663c <xTaskIncrementTick>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800783a:	4b06      	ldr	r3, [pc, #24]	; (8007854 <SysTick_Handler+0x3c>)
 800783c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	2300      	movs	r3, #0
 8007844:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	e000ed04 	.word	0xe000ed04

08007858 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007858:	b480      	push	{r7}
 800785a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800785c:	4b0b      	ldr	r3, [pc, #44]	; (800788c <vPortSetupTimerInterrupt+0x34>)
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007862:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <vPortSetupTimerInterrupt+0x38>)
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007868:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <vPortSetupTimerInterrupt+0x3c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a0a      	ldr	r2, [pc, #40]	; (8007898 <vPortSetupTimerInterrupt+0x40>)
 800786e:	fba2 2303 	umull	r2, r3, r2, r3
 8007872:	099b      	lsrs	r3, r3, #6
 8007874:	4a09      	ldr	r2, [pc, #36]	; (800789c <vPortSetupTimerInterrupt+0x44>)
 8007876:	3b01      	subs	r3, #1
 8007878:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800787a:	4b04      	ldr	r3, [pc, #16]	; (800788c <vPortSetupTimerInterrupt+0x34>)
 800787c:	2207      	movs	r2, #7
 800787e:	601a      	str	r2, [r3, #0]
}
 8007880:	bf00      	nop
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	e000e010 	.word	0xe000e010
 8007890:	e000e018 	.word	0xe000e018
 8007894:	20000000 	.word	0x20000000
 8007898:	10624dd3 	.word	0x10624dd3
 800789c:	e000e014 	.word	0xe000e014

080078a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80078b0 <vPortEnableVFP+0x10>
 80078a4:	6801      	ldr	r1, [r0, #0]
 80078a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80078aa:	6001      	str	r1, [r0, #0]
 80078ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078ae:	bf00      	nop
 80078b0:	e000ed88 	.word	0xe000ed88

080078b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80078ba:	f3ef 8305 	mrs	r3, IPSR
 80078be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b0f      	cmp	r3, #15
 80078c4:	d913      	bls.n	80078ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078c6:	4a16      	ldr	r2, [pc, #88]	; (8007920 <vPortValidateInterruptPriority+0x6c>)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4413      	add	r3, r2
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078d0:	4b14      	ldr	r3, [pc, #80]	; (8007924 <vPortValidateInterruptPriority+0x70>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	7afa      	ldrb	r2, [r7, #11]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d209      	bcs.n	80078ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	607b      	str	r3, [r7, #4]
 80078ec:	e7fe      	b.n	80078ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078ee:	4b0e      	ldr	r3, [pc, #56]	; (8007928 <vPortValidateInterruptPriority+0x74>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078f6:	4b0d      	ldr	r3, [pc, #52]	; (800792c <vPortValidateInterruptPriority+0x78>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d909      	bls.n	8007912 <vPortValidateInterruptPriority+0x5e>
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	e7fe      	b.n	8007910 <vPortValidateInterruptPriority+0x5c>
	}
 8007912:	bf00      	nop
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	e000e3f0 	.word	0xe000e3f0
 8007924:	20000d14 	.word	0x20000d14
 8007928:	e000ed0c 	.word	0xe000ed0c
 800792c:	20000d18 	.word	0x20000d18

08007930 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08a      	sub	sp, #40	; 0x28
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007938:	2300      	movs	r3, #0
 800793a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800793c:	f7fe fdc4 	bl	80064c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007940:	4b57      	ldr	r3, [pc, #348]	; (8007aa0 <pvPortMalloc+0x170>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007948:	f000 f90c 	bl	8007b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800794c:	4b55      	ldr	r3, [pc, #340]	; (8007aa4 <pvPortMalloc+0x174>)
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4013      	ands	r3, r2
 8007954:	2b00      	cmp	r3, #0
 8007956:	f040 808c 	bne.w	8007a72 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d01c      	beq.n	800799a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007960:	2208      	movs	r2, #8
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4413      	add	r3, r2
 8007966:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	2b00      	cmp	r3, #0
 8007970:	d013      	beq.n	800799a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f023 0307 	bic.w	r3, r3, #7
 8007978:	3308      	adds	r3, #8
 800797a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f003 0307 	and.w	r3, r3, #7
 8007982:	2b00      	cmp	r3, #0
 8007984:	d009      	beq.n	800799a <pvPortMalloc+0x6a>
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	e7fe      	b.n	8007998 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d068      	beq.n	8007a72 <pvPortMalloc+0x142>
 80079a0:	4b41      	ldr	r3, [pc, #260]	; (8007aa8 <pvPortMalloc+0x178>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d863      	bhi.n	8007a72 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079aa:	4b40      	ldr	r3, [pc, #256]	; (8007aac <pvPortMalloc+0x17c>)
 80079ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80079ae:	4b3f      	ldr	r3, [pc, #252]	; (8007aac <pvPortMalloc+0x17c>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079b4:	e004      	b.n	80079c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d903      	bls.n	80079d2 <pvPortMalloc+0xa2>
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1f1      	bne.n	80079b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079d2:	4b33      	ldr	r3, [pc, #204]	; (8007aa0 <pvPortMalloc+0x170>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d8:	429a      	cmp	r2, r3
 80079da:	d04a      	beq.n	8007a72 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2208      	movs	r2, #8
 80079e2:	4413      	add	r3, r2
 80079e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	1ad2      	subs	r2, r2, r3
 80079f6:	2308      	movs	r3, #8
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d91e      	bls.n	8007a3c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4413      	add	r3, r2
 8007a04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d009      	beq.n	8007a24 <pvPortMalloc+0xf4>
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	e7fe      	b.n	8007a22 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	1ad2      	subs	r2, r2, r3
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a36:	69b8      	ldr	r0, [r7, #24]
 8007a38:	f000 f8f6 	bl	8007c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a3c:	4b1a      	ldr	r3, [pc, #104]	; (8007aa8 <pvPortMalloc+0x178>)
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	4a18      	ldr	r2, [pc, #96]	; (8007aa8 <pvPortMalloc+0x178>)
 8007a48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a4a:	4b17      	ldr	r3, [pc, #92]	; (8007aa8 <pvPortMalloc+0x178>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4b18      	ldr	r3, [pc, #96]	; (8007ab0 <pvPortMalloc+0x180>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d203      	bcs.n	8007a5e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a56:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <pvPortMalloc+0x178>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a15      	ldr	r2, [pc, #84]	; (8007ab0 <pvPortMalloc+0x180>)
 8007a5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	4b10      	ldr	r3, [pc, #64]	; (8007aa4 <pvPortMalloc+0x174>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	431a      	orrs	r2, r3
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a72:	f7fe fd37 	bl	80064e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d009      	beq.n	8007a94 <pvPortMalloc+0x164>
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	e7fe      	b.n	8007a92 <pvPortMalloc+0x162>
	return pvReturn;
 8007a94:	69fb      	ldr	r3, [r7, #28]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3728      	adds	r7, #40	; 0x28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20004924 	.word	0x20004924
 8007aa4:	20004930 	.word	0x20004930
 8007aa8:	20004928 	.word	0x20004928
 8007aac:	2000491c 	.word	0x2000491c
 8007ab0:	2000492c 	.word	0x2000492c

08007ab4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d046      	beq.n	8007b54 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ac6:	2308      	movs	r3, #8
 8007ac8:	425b      	negs	r3, r3
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	4413      	add	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	4b20      	ldr	r3, [pc, #128]	; (8007b5c <vPortFree+0xa8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4013      	ands	r3, r2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d109      	bne.n	8007af6 <vPortFree+0x42>
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e7fe      	b.n	8007af4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d009      	beq.n	8007b12 <vPortFree+0x5e>
 8007afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	60bb      	str	r3, [r7, #8]
 8007b10:	e7fe      	b.n	8007b10 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	4b11      	ldr	r3, [pc, #68]	; (8007b5c <vPortFree+0xa8>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d019      	beq.n	8007b54 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d115      	bne.n	8007b54 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	4b0b      	ldr	r3, [pc, #44]	; (8007b5c <vPortFree+0xa8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	43db      	mvns	r3, r3
 8007b32:	401a      	ands	r2, r3
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b38:	f7fe fcc6 	bl	80064c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <vPortFree+0xac>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4413      	add	r3, r2
 8007b46:	4a06      	ldr	r2, [pc, #24]	; (8007b60 <vPortFree+0xac>)
 8007b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b4a:	6938      	ldr	r0, [r7, #16]
 8007b4c:	f000 f86c 	bl	8007c28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007b50:	f7fe fcc8 	bl	80064e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b54:	bf00      	nop
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	20004930 	.word	0x20004930
 8007b60:	20004928 	.word	0x20004928

08007b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b70:	4b27      	ldr	r3, [pc, #156]	; (8007c10 <prvHeapInit+0xac>)
 8007b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f003 0307 	and.w	r3, r3, #7
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00c      	beq.n	8007b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3307      	adds	r3, #7
 8007b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0307 	bic.w	r3, r3, #7
 8007b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	4a1f      	ldr	r2, [pc, #124]	; (8007c10 <prvHeapInit+0xac>)
 8007b94:	4413      	add	r3, r2
 8007b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b9c:	4a1d      	ldr	r2, [pc, #116]	; (8007c14 <prvHeapInit+0xb0>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ba2:	4b1c      	ldr	r3, [pc, #112]	; (8007c14 <prvHeapInit+0xb0>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	4413      	add	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007bb0:	2208      	movs	r2, #8
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	1a9b      	subs	r3, r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f023 0307 	bic.w	r3, r3, #7
 8007bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4a15      	ldr	r2, [pc, #84]	; (8007c18 <prvHeapInit+0xb4>)
 8007bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bc6:	4b14      	ldr	r3, [pc, #80]	; (8007c18 <prvHeapInit+0xb4>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bce:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <prvHeapInit+0xb4>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	1ad2      	subs	r2, r2, r3
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007be4:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <prvHeapInit+0xb4>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	4a0a      	ldr	r2, [pc, #40]	; (8007c1c <prvHeapInit+0xb8>)
 8007bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	4a09      	ldr	r2, [pc, #36]	; (8007c20 <prvHeapInit+0xbc>)
 8007bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bfc:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <prvHeapInit+0xc0>)
 8007bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c02:	601a      	str	r2, [r3, #0]
}
 8007c04:	bf00      	nop
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	20000d1c 	.word	0x20000d1c
 8007c14:	2000491c 	.word	0x2000491c
 8007c18:	20004924 	.word	0x20004924
 8007c1c:	2000492c 	.word	0x2000492c
 8007c20:	20004928 	.word	0x20004928
 8007c24:	20004930 	.word	0x20004930

08007c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c30:	4b28      	ldr	r3, [pc, #160]	; (8007cd4 <prvInsertBlockIntoFreeList+0xac>)
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	e002      	b.n	8007c3c <prvInsertBlockIntoFreeList+0x14>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d8f7      	bhi.n	8007c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	4413      	add	r3, r2
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d108      	bne.n	8007c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	441a      	add	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	441a      	add	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d118      	bne.n	8007cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4b15      	ldr	r3, [pc, #84]	; (8007cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d00d      	beq.n	8007ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	441a      	add	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	e008      	b.n	8007cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ca6:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	e003      	b.n	8007cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d002      	beq.n	8007cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cc6:	bf00      	nop
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	2000491c 	.word	0x2000491c
 8007cd8:	20004924 	.word	0x20004924

08007cdc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fd fade 	bl	80052ac <USBH_LL_IncTimer>
}
 8007cf0:	bf00      	nop
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fd fb22 	bl	8005350 <USBH_LL_Connect>
}
 8007d0c:	bf00      	nop
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fd fb37 	bl	8005396 <USBH_LL_Disconnect>
}
 8007d28:	bf00      	nop
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	70fb      	strb	r3, [r7, #3]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fd fb57 	bl	80053fa <USBH_LL_NotifyURBChange>
#endif
}
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fd facc 	bl	8005300 <USBH_LL_PortEnabled>
}
 8007d68:	bf00      	nop
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fd fad8 	bl	8005334 <USBH_LL_PortDisabled>
}
 8007d84:	bf00      	nop
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7f9 fd01 	bl	80017aa <HAL_HCD_Stop>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 f808 	bl	8007dc4 <USBH_Get_USB_Status>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
	...

08007dc4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	4603      	mov	r3, r0
 8007dcc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007dd2:	79fb      	ldrb	r3, [r7, #7]
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d817      	bhi.n	8007e08 <USBH_Get_USB_Status+0x44>
 8007dd8:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <USBH_Get_USB_Status+0x1c>)
 8007dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dde:	bf00      	nop
 8007de0:	08007df1 	.word	0x08007df1
 8007de4:	08007df7 	.word	0x08007df7
 8007de8:	08007dfd 	.word	0x08007dfd
 8007dec:	08007e03 	.word	0x08007e03
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	73fb      	strb	r3, [r7, #15]
    break;
 8007df4:	e00b      	b.n	8007e0e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007df6:	2302      	movs	r3, #2
 8007df8:	73fb      	strb	r3, [r7, #15]
    break;
 8007dfa:	e008      	b.n	8007e0e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8007e00:	e005      	b.n	8007e0e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007e02:	2302      	movs	r3, #2
 8007e04:	73fb      	strb	r3, [r7, #15]
    break;
 8007e06:	e002      	b.n	8007e0e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007e08:	2302      	movs	r3, #2
 8007e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e0c:	bf00      	nop
  }
  return usb_status;
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <__libc_init_array>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	4e0d      	ldr	r6, [pc, #52]	; (8007e54 <__libc_init_array+0x38>)
 8007e20:	4c0d      	ldr	r4, [pc, #52]	; (8007e58 <__libc_init_array+0x3c>)
 8007e22:	1ba4      	subs	r4, r4, r6
 8007e24:	10a4      	asrs	r4, r4, #2
 8007e26:	2500      	movs	r5, #0
 8007e28:	42a5      	cmp	r5, r4
 8007e2a:	d109      	bne.n	8007e40 <__libc_init_array+0x24>
 8007e2c:	4e0b      	ldr	r6, [pc, #44]	; (8007e5c <__libc_init_array+0x40>)
 8007e2e:	4c0c      	ldr	r4, [pc, #48]	; (8007e60 <__libc_init_array+0x44>)
 8007e30:	f000 f82c 	bl	8007e8c <_init>
 8007e34:	1ba4      	subs	r4, r4, r6
 8007e36:	10a4      	asrs	r4, r4, #2
 8007e38:	2500      	movs	r5, #0
 8007e3a:	42a5      	cmp	r5, r4
 8007e3c:	d105      	bne.n	8007e4a <__libc_init_array+0x2e>
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}
 8007e40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e44:	4798      	blx	r3
 8007e46:	3501      	adds	r5, #1
 8007e48:	e7ee      	b.n	8007e28 <__libc_init_array+0xc>
 8007e4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e4e:	4798      	blx	r3
 8007e50:	3501      	adds	r5, #1
 8007e52:	e7f2      	b.n	8007e3a <__libc_init_array+0x1e>
 8007e54:	08007f40 	.word	0x08007f40
 8007e58:	08007f40 	.word	0x08007f40
 8007e5c:	08007f40 	.word	0x08007f40
 8007e60:	08007f44 	.word	0x08007f44

08007e64 <memcpy>:
 8007e64:	b510      	push	{r4, lr}
 8007e66:	1e43      	subs	r3, r0, #1
 8007e68:	440a      	add	r2, r1
 8007e6a:	4291      	cmp	r1, r2
 8007e6c:	d100      	bne.n	8007e70 <memcpy+0xc>
 8007e6e:	bd10      	pop	{r4, pc}
 8007e70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e78:	e7f7      	b.n	8007e6a <memcpy+0x6>

08007e7a <memset>:
 8007e7a:	4402      	add	r2, r0
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d100      	bne.n	8007e84 <memset+0xa>
 8007e82:	4770      	bx	lr
 8007e84:	f803 1b01 	strb.w	r1, [r3], #1
 8007e88:	e7f9      	b.n	8007e7e <memset+0x4>
	...

08007e8c <_init>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	bf00      	nop
 8007e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e92:	bc08      	pop	{r3}
 8007e94:	469e      	mov	lr, r3
 8007e96:	4770      	bx	lr

08007e98 <_fini>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	bf00      	nop
 8007e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9e:	bc08      	pop	{r3}
 8007ea0:	469e      	mov	lr, r3
 8007ea2:	4770      	bx	lr
