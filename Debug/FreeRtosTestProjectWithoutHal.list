
FreeRtosTestProjectWithoutHal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800cc08  0800cc08  0001cc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd00  0800cd00  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd00  0800cd00  0001cd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd08  0800cd08  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd08  0800cd08  0001cd08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd0c  0800cd0c  0001cd0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800cd10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000524c  20000094  0800cda4  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200052e0  0800cda4  000252e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cefd  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005555  00000000  00000000  0004cfc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020f8  00000000  00000000  00052518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ec8  00000000  00000000  00054610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000273d9  00000000  00000000  000564d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001dcdf  00000000  00000000  0007d8b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3dc0  00000000  00000000  0009b590  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017f350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ce4  00000000  00000000  0017f3cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cbf0 	.word	0x0800cbf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800cbf0 	.word	0x0800cbf0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <ADCgetvalue>:

#include "stm32f4xx_hal.h"

void ADCgetvalue(ADC_HandleTypeDef *hadc, uint8_t *channelNumber, uint32_t *value)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
	sConfig.Rank = 1;
 80004ea:	2301      	movs	r3, #1
 80004ec:	617b      	str	r3, [r7, #20]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]

	switch(*channelNumber)
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b0e      	cmp	r3, #14
 80004f8:	d002      	beq.n	8000500 <ADCgetvalue+0x30>
 80004fa:	2b0f      	cmp	r3, #15
 80004fc:	d003      	beq.n	8000506 <ADCgetvalue+0x36>
 80004fe:	e005      	b.n	800050c <ADCgetvalue+0x3c>
	{
	case (14):
		sConfig.Channel = ADC_CHANNEL_14;
 8000500:	230e      	movs	r3, #14
 8000502:	613b      	str	r3, [r7, #16]
		break;
 8000504:	e002      	b.n	800050c <ADCgetvalue+0x3c>
	case (15):
		sConfig.Channel = ADC_CHANNEL_15;
 8000506:	230f      	movs	r3, #15
 8000508:	613b      	str	r3, [r7, #16]
		break;
 800050a:	bf00      	nop
	}

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) == HAL_OK)
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	68f8      	ldr	r0, [r7, #12]
 8000514:	f001 f94c 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d110      	bne.n	8000540 <ADCgetvalue+0x70>
	{
		HAL_ADC_Start(hadc); // запускаем преобразование сигнала АЦП
 800051e:	68f8      	ldr	r0, [r7, #12]
 8000520:	f000 ffbc 	bl	800149c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, 100); // ожидаем окончания преобразования
 8000524:	2164      	movs	r1, #100	; 0x64
 8000526:	68f8      	ldr	r0, [r7, #12]
 8000528:	f001 f8b1 	bl	800168e <HAL_ADC_PollForConversion>
		*value = HAL_ADC_GetValue(hadc); // читаем полученное значение в переменную adc
 800052c:	68f8      	ldr	r0, [r7, #12]
 800052e:	f001 f932 	bl	8001796 <HAL_ADC_GetValue>
 8000532:	4602      	mov	r2, r0
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(hadc); // останавливаем АЦП (не обязательно)
 8000538:	68f8      	ldr	r0, [r7, #12]
 800053a:	f001 f875 	bl	8001628 <HAL_ADC_Stop>
	 }
	else
	{
		*value = -1;
	}
}
 800053e:	e003      	b.n	8000548 <ADCgetvalue+0x78>
		*value = -1;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f04f 32ff 	mov.w	r2, #4294967295
 8000546:	601a      	str	r2, [r3, #0]
}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <vTaskForModbus>:
/* USER CODE BEGIN 0 */

/*-----------------------------------------------------------*/
/* Обмен по ModBus */
void vTaskForModbus( void *pvParameters )
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]

  for( ;; )
 8000558:	e7fe      	b.n	8000558 <vTaskForModbus+0x8>
	...

0800055c <vTaskForSPI>:
  vTaskDelete( NULL );
}
/*-----------------------------------------------------------*/
/* Обмен по SPI */
void vTaskForSPI( void *pvParameters )
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b0b8      	sub	sp, #224	; 0xe0
 8000560:	af02      	add	r7, sp, #8
 8000562:	6078      	str	r0, [r7, #4]
  uint16_t dataSize;

  for( ;; )
 {
	  //Передать адрес канала, с которого произойдёт конвертация
	  	HAL_SPI_TransmitReceive(&hspi1, &sendData, &receiveData, dataSize, 1000);
 8000564:	f8b7 00d6 	ldrh.w	r0, [r7, #214]	; 0xd6
 8000568:	f107 020c 	add.w	r2, r7, #12
 800056c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	4603      	mov	r3, r0
 8000578:	4808      	ldr	r0, [pc, #32]	; (800059c <vTaskForSPI+0x40>)
 800057a:	f004 fecb 	bl	8005314 <HAL_SPI_TransmitReceive>

	  	//Получить значение канала при следующей отправке.
	  	HAL_SPI_TransmitReceive(&hspi1, &sendData, &receiveData, dataSize, 1000);
 800057e:	f8b7 00d6 	ldrh.w	r0, [r7, #214]	; 0xd6
 8000582:	f107 020c 	add.w	r2, r7, #12
 8000586:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	4603      	mov	r3, r0
 8000592:	4802      	ldr	r0, [pc, #8]	; (800059c <vTaskForSPI+0x40>)
 8000594:	f004 febe 	bl	8005314 <HAL_SPI_TransmitReceive>
	  	HAL_SPI_TransmitReceive(&hspi1, &sendData, &receiveData, dataSize, 1000);
 8000598:	e7e4      	b.n	8000564 <vTaskForSPI+0x8>
 800059a:	bf00      	nop
 800059c:	20004aac 	.word	0x20004aac

080005a0 <vTaskForUART>:
  vTaskDelete( NULL );
}

/* Обмен по UART */
void vTaskForUART( void *pvParameters )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  for( ;; )
 80005a8:	e7fe      	b.n	80005a8 <vTaskForUART+0x8>

080005aa <vTaskForDisplay>:
  vTaskDelete( NULL );
}

/* Работа с драйвером дисплея */
void vTaskForDisplay( void *pvParameters )
{
 80005aa:	b480      	push	{r7}
 80005ac:	b087      	sub	sp, #28
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]

  int displayNumbers[4];

  for( ;; )
 80005b2:	e7fe      	b.n	80005b2 <vTaskForDisplay+0x8>

080005b4 <vTaskForPorts>:
  vTaskDelete( NULL );
}

/* Работа с портами */
void vTaskForPorts( void *pvParameters )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b087      	sub	sp, #28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	int portNumbers[4];

  for( ;; )
 80005bc:	e7fe      	b.n	80005bc <vTaskForPorts+0x8>
	...

080005c0 <vTaskForADCSensorIn14>:
  vTaskDelete( NULL );
}

/* Работа с драйвером дисплея */
void vTaskForADCSensorIn14( void *pvParameters )
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

  uint32_t ADCcurrent14 = 0x00;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  uint8_t Number = 14;
 80005cc:	230e      	movs	r3, #14
 80005ce:	72fb      	strb	r3, [r7, #11]

  for( ;; )
 {
	  ADCgetvalue(&hadc1, &Number, &ADCcurrent14);
 80005d0:	f107 020c 	add.w	r2, r7, #12
 80005d4:	f107 030b 	add.w	r3, r7, #11
 80005d8:	4619      	mov	r1, r3
 80005da:	4802      	ldr	r0, [pc, #8]	; (80005e4 <vTaskForADCSensorIn14+0x24>)
 80005dc:	f7ff ff78 	bl	80004d0 <ADCgetvalue>
 80005e0:	e7f6      	b.n	80005d0 <vTaskForADCSensorIn14+0x10>
 80005e2:	bf00      	nop
 80005e4:	20004a64 	.word	0x20004a64

080005e8 <vTaskForADCSensorIn15>:
 }
  vTaskDelete( NULL );
}

void vTaskForADCSensorIn15( void *pvParameters )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]

	uint32_t ADCcurrent15 = 0x00;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
	uint8_t Number = 15;
 80005f4:	230f      	movs	r3, #15
 80005f6:	72fb      	strb	r3, [r7, #11]

  for( ;; )
 {
	  ADCgetvalue(&hadc1, &Number, &ADCcurrent15);
 80005f8:	f107 020c 	add.w	r2, r7, #12
 80005fc:	f107 030b 	add.w	r3, r7, #11
 8000600:	4619      	mov	r1, r3
 8000602:	4802      	ldr	r0, [pc, #8]	; (800060c <vTaskForADCSensorIn15+0x24>)
 8000604:	f7ff ff64 	bl	80004d0 <ADCgetvalue>
 8000608:	e7f6      	b.n	80005f8 <vTaskForADCSensorIn15+0x10>
 800060a:	bf00      	nop
 800060c:	20004a64 	.word	0x20004a64

08000610 <vTaskForI2C>:
  vTaskDelete( NULL );
}

/* Обмен по I2C */
void vTaskForI2C( void *pvParameters )
{
 8000610:	b480      	push	{r7}
 8000612:	b087      	sub	sp, #28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  int I2CNumbers[4];

  for( ;; )
 8000618:	e7fe      	b.n	8000618 <vTaskForI2C+0x8>
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fe93 	bl	800134c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f897 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 fa51 	bl	8000ad0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800062e:	f000 f967 	bl	8000900 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000632:	f000 f993 	bl	800095c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000636:	f000 f9c1 	bl	80009bc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800063a:	f000 f9f5 	bl	8000a28 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800063e:	f000 fa1d 	bl	8000a7c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000642:	f000 f90b 	bl	800085c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000646:	f008 ff63 	bl	8009510 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800064a:	4a30      	ldr	r2, [pc, #192]	; (800070c <main+0xf0>)
 800064c:	2100      	movs	r1, #0
 800064e:	4830      	ldr	r0, [pc, #192]	; (8000710 <main+0xf4>)
 8000650:	f008 ffc8 	bl	80095e4 <osThreadNew>
 8000654:	4602      	mov	r2, r0
 8000656:	4b2f      	ldr	r3, [pc, #188]	; (8000714 <main+0xf8>)
 8000658:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800065a:	f008 ff8d 	bl	8009578 <osKernelStart>
   //DDRF |= (1 << DDF0) | (1 << DDF1);

   /* Создать задачу 1, заметьте,  что реальная программа должна
   /* проверять возвращаемое  значение, чтобы убедиться,
   /* что задача создана успешно */
   xTaskCreate( vTaskForModbus,  /* Указатель на функцию, реализующую задачу */
 800065e:	2300      	movs	r3, #0
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2301      	movs	r3, #1
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	492b      	ldr	r1, [pc, #172]	; (8000718 <main+0xfc>)
 800066c:	482b      	ldr	r0, [pc, #172]	; (800071c <main+0x100>)
 800066e:	f00a f8cd 	bl	800a80c <xTaskCreate>
       NULL,  /* Параметр, передаваемый задаче, – не используется */
       1,  /* Приоритет = 1 */
       NULL );  /* Получение дескриптора задачи – не используется */

   /* Создать задачу 2 */
   xTaskCreate(vTaskForSPI,  (signed char *) "vTaskForSPI", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8000672:	2300      	movs	r3, #0
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	4928      	ldr	r1, [pc, #160]	; (8000720 <main+0x104>)
 8000680:	4828      	ldr	r0, [pc, #160]	; (8000724 <main+0x108>)
 8000682:	f00a f8c3 	bl	800a80c <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForADCSensorIn14,  (signed char *) "vTaskForADCSensorIn14", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8000686:	2300      	movs	r3, #0
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2300      	movs	r3, #0
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	4925      	ldr	r1, [pc, #148]	; (8000728 <main+0x10c>)
 8000694:	4825      	ldr	r0, [pc, #148]	; (800072c <main+0x110>)
 8000696:	f00a f8b9 	bl	800a80c <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForADCSensorIn15,  (signed char *) "vTaskForADCSensorIn15", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 800069a:	2300      	movs	r3, #0
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2301      	movs	r3, #1
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	4922      	ldr	r1, [pc, #136]	; (8000730 <main+0x114>)
 80006a8:	4822      	ldr	r0, [pc, #136]	; (8000734 <main+0x118>)
 80006aa:	f00a f8af 	bl	800a80c <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForUART,  (signed char *) "vTaskForUART", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 80006ae:	2300      	movs	r3, #0
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	2301      	movs	r3, #1
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	491f      	ldr	r1, [pc, #124]	; (8000738 <main+0x11c>)
 80006bc:	481f      	ldr	r0, [pc, #124]	; (800073c <main+0x120>)
 80006be:	f00a f8a5 	bl	800a80c <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForDisplay,  (signed  char *) "vTaskForDisplay", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 80006c2:	2300      	movs	r3, #0
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	2301      	movs	r3, #1
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2300      	movs	r3, #0
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	491c      	ldr	r1, [pc, #112]	; (8000740 <main+0x124>)
 80006d0:	481c      	ldr	r0, [pc, #112]	; (8000744 <main+0x128>)
 80006d2:	f00a f89b 	bl	800a80c <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForPorts,  (signed  char *) "vTaskForPorts", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 80006d6:	2300      	movs	r3, #0
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	2301      	movs	r3, #1
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2300      	movs	r3, #0
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	4919      	ldr	r1, [pc, #100]	; (8000748 <main+0x12c>)
 80006e4:	4819      	ldr	r0, [pc, #100]	; (800074c <main+0x130>)
 80006e6:	f00a f891 	bl	800a80c <xTaskCreate>

   /* Создать задачу 2 */
   xTaskCreate(vTaskForI2C,  (signed  char *) "vTaskForI2C", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 80006ea:	2300      	movs	r3, #0
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2301      	movs	r3, #1
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2300      	movs	r3, #0
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	4916      	ldr	r1, [pc, #88]	; (8000750 <main+0x134>)
 80006f8:	4816      	ldr	r0, [pc, #88]	; (8000754 <main+0x138>)
 80006fa:	f00a f887 	bl	800a80c <xTaskCreate>

   /* Запустить планировщик. Задачи начнут выполняться. */
   vTaskStartScheduler();
 80006fe:	f00a f9fd 	bl	800aafc <vTaskStartScheduler>

   return 0;
 8000702:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000704:	4618      	mov	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	0800ccc4 	.word	0x0800ccc4
 8000710:	08000ccd 	.word	0x08000ccd
 8000714:	200049cc 	.word	0x200049cc
 8000718:	0800cc14 	.word	0x0800cc14
 800071c:	08000551 	.word	0x08000551
 8000720:	0800cc24 	.word	0x0800cc24
 8000724:	0800055d 	.word	0x0800055d
 8000728:	0800cc30 	.word	0x0800cc30
 800072c:	080005c1 	.word	0x080005c1
 8000730:	0800cc48 	.word	0x0800cc48
 8000734:	080005e9 	.word	0x080005e9
 8000738:	0800cc60 	.word	0x0800cc60
 800073c:	080005a1 	.word	0x080005a1
 8000740:	0800cc70 	.word	0x0800cc70
 8000744:	080005ab 	.word	0x080005ab
 8000748:	0800cc80 	.word	0x0800cc80
 800074c:	080005b5 	.word	0x080005b5
 8000750:	0800cc90 	.word	0x0800cc90
 8000754:	08000611 	.word	0x08000611

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b098      	sub	sp, #96	; 0x60
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000762:	2230      	movs	r2, #48	; 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f00c f97f 	bl	800ca6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b31      	ldr	r3, [pc, #196]	; (8000854 <SystemClock_Config+0xfc>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a30      	ldr	r2, [pc, #192]	; (8000854 <SystemClock_Config+0xfc>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <SystemClock_Config+0xfc>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <SystemClock_Config+0x100>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a2a      	ldr	r2, [pc, #168]	; (8000858 <SystemClock_Config+0x100>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b4:	6013      	str	r3, [r2, #0]
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <SystemClock_Config+0x100>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c2:	2301      	movs	r3, #1
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d6:	2308      	movs	r3, #8
 80007d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007da:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e4:	2307      	movs	r3, #7
 80007e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ec:	4618      	mov	r0, r3
 80007ee:	f003 ff5b 	bl	80046a8 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80007f8:	f000 fa84 	bl	8000d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000808:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800080e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	2105      	movs	r1, #5
 800081a:	4618      	mov	r0, r3
 800081c:	f004 f9b4 	bl	8004b88 <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000826:	f000 fa6d 	bl	8000d04 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800082a:	2301      	movs	r3, #1
 800082c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800082e:	23c0      	movs	r3, #192	; 0xc0
 8000830:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000832:	2302      	movs	r3, #2
 8000834:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4618      	mov	r0, r3
 800083c:	f004 fbc8 	bl	8004fd0 <HAL_RCCEx_PeriphCLKConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000846:	f000 fa5d 	bl	8000d04 <Error_Handler>
  }
}
 800084a:	bf00      	nop
 800084c:	3760      	adds	r7, #96	; 0x60
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <MX_ADC1_Init+0x9c>)
 8000872:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000876:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800087a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_ADC1_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_ADC1_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_ADC1_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_ADC1_Init+0x98>)
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <MX_ADC1_Init+0xa0>)
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008be:	f000 fda9 	bl	8001414 <HAL_ADC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c8:	f000 fa1c 	bl	8000d04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80008cc:	230e      	movs	r3, #14
 80008ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_ADC1_Init+0x98>)
 80008de:	f000 ff67 	bl	80017b0 <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e8:	f000 fa0c 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20004a64 	.word	0x20004a64
 80008f8:	40012000 	.word	0x40012000
 80008fc:	0f000001 	.word	0x0f000001

08000900 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_I2C1_Init+0x50>)
 8000906:	4a13      	ldr	r2, [pc, #76]	; (8000954 <MX_I2C1_Init+0x54>)
 8000908:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_I2C1_Init+0x50>)
 800090c:	4a12      	ldr	r2, [pc, #72]	; (8000958 <MX_I2C1_Init+0x58>)
 800090e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_I2C1_Init+0x50>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_I2C1_Init+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_I2C1_Init+0x50>)
 800091e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000922:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_I2C1_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_I2C1_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_I2C1_Init+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_I2C1_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_I2C1_Init+0x50>)
 800093e:	f003 f8db 	bl	8003af8 <HAL_I2C_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000948:	f000 f9dc 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20004a10 	.word	0x20004a10
 8000954:	40005400 	.word	0x40005400
 8000958:	000186a0 	.word	0x000186a0

0800095c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_I2S3_Init+0x54>)
 8000962:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <MX_I2S3_Init+0x58>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_I2S3_Init+0x54>)
 8000968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800096c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_I2S3_Init+0x54>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_I2S3_Init+0x54>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_I2S3_Init+0x54>)
 800097c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000980:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_I2S3_Init+0x54>)
 8000984:	4a0c      	ldr	r2, [pc, #48]	; (80009b8 <MX_I2S3_Init+0x5c>)
 8000986:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_I2S3_Init+0x54>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_I2S3_Init+0x54>)
 8000990:	2200      	movs	r2, #0
 8000992:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_I2S3_Init+0x54>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_I2S3_Init+0x54>)
 800099c:	f003 f9e4 	bl	8003d68 <HAL_I2S_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80009a6:	f000 f9ad 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20004b44 	.word	0x20004b44
 80009b4:	40003c00 	.word	0x40003c00
 80009b8:	00017700 	.word	0x00017700

080009bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_SPI1_Init+0x64>)
 80009c2:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <MX_SPI1_Init+0x68>)
 80009c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_SPI1_Init+0x64>)
 80009c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_SPI1_Init+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_SPI1_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_SPI1_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_SPI1_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_SPI1_Init+0x64>)
 80009e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_SPI1_Init+0x64>)
 80009f0:	2238      	movs	r2, #56	; 0x38
 80009f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <MX_SPI1_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_SPI1_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <MX_SPI1_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_SPI1_Init+0x64>)
 8000a08:	220a      	movs	r2, #10
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_SPI1_Init+0x64>)
 8000a0e:	f004 fc1d 	bl	800524c <HAL_SPI_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a18:	f000 f974 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20004aac 	.word	0x20004aac
 8000a24:	40013000 	.word	0x40013000

08000a28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <MX_USART2_UART_Init+0x50>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a60:	f005 f8e4 	bl	8005c2c <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a6a:	f000 f94b 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20004b04 	.word	0x20004b04
 8000a78:	40004400 	.word	0x40004400

08000a7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <MX_USART3_UART_Init+0x50>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000a88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_USART3_UART_Init+0x4c>)
 8000ab4:	f005 f8ba 	bl	8005c2c <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000abe:	f000 f921 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200049d0 	.word	0x200049d0
 8000acc:	40004800 	.word	0x40004800

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	; 0x30
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	4b71      	ldr	r3, [pc, #452]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a70      	ldr	r2, [pc, #448]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000af0:	f043 0310 	orr.w	r3, r3, #16
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b6e      	ldr	r3, [pc, #440]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0310 	and.w	r3, r3, #16
 8000afe:	61bb      	str	r3, [r7, #24]
 8000b00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	4b6a      	ldr	r3, [pc, #424]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a69      	ldr	r2, [pc, #420]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b67      	ldr	r3, [pc, #412]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b63      	ldr	r3, [pc, #396]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a62      	ldr	r2, [pc, #392]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b60      	ldr	r3, [pc, #384]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b5c      	ldr	r3, [pc, #368]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a5b      	ldr	r2, [pc, #364]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b59      	ldr	r3, [pc, #356]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	4b55      	ldr	r3, [pc, #340]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a54      	ldr	r2, [pc, #336]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b52      	ldr	r3, [pc, #328]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b4e      	ldr	r3, [pc, #312]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a4d      	ldr	r2, [pc, #308]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b4b      	ldr	r3, [pc, #300]	; (8000cb0 <MX_GPIO_Init+0x1e0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2108      	movs	r1, #8
 8000b92:	4848      	ldr	r0, [pc, #288]	; (8000cb4 <MX_GPIO_Init+0x1e4>)
 8000b94:	f001 faa6 	bl	80020e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	4846      	ldr	r0, [pc, #280]	; (8000cb8 <MX_GPIO_Init+0x1e8>)
 8000b9e:	f001 faa1 	bl	80020e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ba8:	4844      	ldr	r0, [pc, #272]	; (8000cbc <MX_GPIO_Init+0x1ec>)
 8000baa:	f001 fa9b 	bl	80020e4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bae:	2308      	movs	r3, #8
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	483b      	ldr	r0, [pc, #236]	; (8000cb4 <MX_GPIO_Init+0x1e4>)
 8000bc6:	f001 f8f3 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4835      	ldr	r0, [pc, #212]	; (8000cb8 <MX_GPIO_Init+0x1e8>)
 8000be2:	f001 f8e5 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000be6:	2308      	movs	r3, #8
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	482d      	ldr	r0, [pc, #180]	; (8000cb8 <MX_GPIO_Init+0x1e8>)
 8000c02:	f001 f8d5 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <MX_GPIO_Init+0x1f0>)
 8000c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	482a      	ldr	r0, [pc, #168]	; (8000cc4 <MX_GPIO_Init+0x1f4>)
 8000c1a:	f001 f8c9 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4825      	ldr	r0, [pc, #148]	; (8000cc8 <MX_GPIO_Init+0x1f8>)
 8000c32:	f001 f8bd 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c48:	2305      	movs	r3, #5
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	481d      	ldr	r0, [pc, #116]	; (8000cc8 <MX_GPIO_Init+0x1f8>)
 8000c54:	f001 f8ac 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c58:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c5c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4812      	ldr	r0, [pc, #72]	; (8000cbc <MX_GPIO_Init+0x1ec>)
 8000c72:	f001 f89d 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c76:	2320      	movs	r3, #32
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_GPIO_Init+0x1ec>)
 8000c8a:	f001 f891 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_GPIO_Init+0x1f0>)
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_GPIO_Init+0x1e4>)
 8000ca2:	f001 f885 	bl	8001db0 <HAL_GPIO_Init>

}
 8000ca6:	bf00      	nop
 8000ca8:	3730      	adds	r7, #48	; 0x30
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	40020c00 	.word	0x40020c00
 8000cc0:	10120000 	.word	0x10120000
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	40020400 	.word	0x40020400

08000ccc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000cd4:	f00b fb82 	bl	800c3dc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f008 fd29 	bl	8009730 <osDelay>
 8000cde:	e7fb      	b.n	8000cd8 <StartDefaultTask+0xc>

08000ce0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d101      	bne.n	8000cf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cf2:	f000 fb4d 	bl	8001390 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40010000 	.word	0x40010000

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <Error_Handler+0x6>

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_MspInit+0x54>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <HAL_MspInit+0x54>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_MspInit+0x54>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_MspInit+0x54>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <HAL_MspInit+0x54>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_MspInit+0x54>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	210f      	movs	r1, #15
 8000d4e:	f06f 0001 	mvn.w	r0, #1
 8000d52:	f001 f803 	bl	8001d5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800

08000d64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_ADC_MspInit+0x7c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d127      	bne.n	8000dd6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_ADC_MspInit+0x80>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <HAL_ADC_MspInit+0x80>)
 8000d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <HAL_ADC_MspInit+0x80>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_ADC_MspInit+0x80>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_ADC_MspInit+0x80>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_ADC_MspInit+0x80>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dbe:	2330      	movs	r3, #48	; 0x30
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_ADC_MspInit+0x84>)
 8000dd2:	f000 ffed 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40012000 	.word	0x40012000
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020800 	.word	0x40020800

08000dec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <HAL_I2C_MspInit+0x84>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d12c      	bne.n	8000e68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <HAL_I2C_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <HAL_I2C_MspInit+0x88>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HAL_I2C_MspInit+0x88>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e2a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e30:	2312      	movs	r3, #18
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	480c      	ldr	r0, [pc, #48]	; (8000e78 <HAL_I2C_MspInit+0x8c>)
 8000e48:	f000 ffb2 	bl	8001db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_I2C_MspInit+0x88>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_I2C_MspInit+0x88>)
 8000e56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_I2C_MspInit+0x88>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e68:	bf00      	nop
 8000e6a:	3728      	adds	r7, #40	; 0x28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40005400 	.word	0x40005400
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020400 	.word	0x40020400

08000e7c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a28      	ldr	r2, [pc, #160]	; (8000f3c <HAL_I2S_MspInit+0xc0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d14a      	bne.n	8000f34 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <HAL_I2S_MspInit+0xc4>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a26      	ldr	r2, [pc, #152]	; (8000f40 <HAL_I2S_MspInit+0xc4>)
 8000ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <HAL_I2S_MspInit+0xc4>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <HAL_I2S_MspInit+0xc4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a1f      	ldr	r2, [pc, #124]	; (8000f40 <HAL_I2S_MspInit+0xc4>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_I2S_MspInit+0xc4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_I2S_MspInit+0xc4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <HAL_I2S_MspInit+0xc4>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_I2S_MspInit+0xc4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ef2:	2310      	movs	r3, #16
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f02:	2306      	movs	r3, #6
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <HAL_I2S_MspInit+0xc8>)
 8000f0e:	f000 ff4f 	bl	8001db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f12:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f24:	2306      	movs	r3, #6
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <HAL_I2S_MspInit+0xcc>)
 8000f30:	f000 ff3e 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40003c00 	.word	0x40003c00
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40020800 	.word	0x40020800

08000f4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <HAL_SPI_MspInit+0x84>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d12b      	bne.n	8000fc6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000fa6:	23e0      	movs	r3, #224	; 0xe0
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_SPI_MspInit+0x8c>)
 8000fc2:	f000 fef5 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	; 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40013000 	.word	0x40013000
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020000 	.word	0x40020000

08000fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08e      	sub	sp, #56	; 0x38
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a51      	ldr	r2, [pc, #324]	; (8001140 <HAL_UART_MspInit+0x164>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d14a      	bne.n	8001094 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
 8001002:	4b50      	ldr	r3, [pc, #320]	; (8001144 <HAL_UART_MspInit+0x168>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a4f      	ldr	r2, [pc, #316]	; (8001144 <HAL_UART_MspInit+0x168>)
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b4d      	ldr	r3, [pc, #308]	; (8001144 <HAL_UART_MspInit+0x168>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	623b      	str	r3, [r7, #32]
 8001018:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	4b49      	ldr	r3, [pc, #292]	; (8001144 <HAL_UART_MspInit+0x168>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a48      	ldr	r2, [pc, #288]	; (8001144 <HAL_UART_MspInit+0x168>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b46      	ldr	r3, [pc, #280]	; (8001144 <HAL_UART_MspInit+0x168>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	61fb      	str	r3, [r7, #28]
 8001034:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
 800103a:	4b42      	ldr	r3, [pc, #264]	; (8001144 <HAL_UART_MspInit+0x168>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a41      	ldr	r2, [pc, #260]	; (8001144 <HAL_UART_MspInit+0x168>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b3f      	ldr	r3, [pc, #252]	; (8001144 <HAL_UART_MspInit+0x168>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001052:	2304      	movs	r3, #4
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001062:	2307      	movs	r3, #7
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	4619      	mov	r1, r3
 800106c:	4836      	ldr	r0, [pc, #216]	; (8001148 <HAL_UART_MspInit+0x16c>)
 800106e:	f000 fe9f 	bl	8001db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001072:	2340      	movs	r3, #64	; 0x40
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001082:	2307      	movs	r3, #7
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	4619      	mov	r1, r3
 800108c:	482f      	ldr	r0, [pc, #188]	; (800114c <HAL_UART_MspInit+0x170>)
 800108e:	f000 fe8f 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001092:	e050      	b.n	8001136 <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART3)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a2d      	ldr	r2, [pc, #180]	; (8001150 <HAL_UART_MspInit+0x174>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d14b      	bne.n	8001136 <HAL_UART_MspInit+0x15a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	4b28      	ldr	r3, [pc, #160]	; (8001144 <HAL_UART_MspInit+0x168>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a27      	ldr	r2, [pc, #156]	; (8001144 <HAL_UART_MspInit+0x168>)
 80010a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <HAL_UART_MspInit+0x168>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <HAL_UART_MspInit+0x168>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a20      	ldr	r2, [pc, #128]	; (8001144 <HAL_UART_MspInit+0x168>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <HAL_UART_MspInit+0x168>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <HAL_UART_MspInit+0x168>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a19      	ldr	r2, [pc, #100]	; (8001144 <HAL_UART_MspInit+0x168>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_UART_MspInit+0x168>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001104:	2307      	movs	r3, #7
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <HAL_UART_MspInit+0x178>)
 8001110:	f000 fe4e 	bl	8001db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001126:	2307      	movs	r3, #7
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	4806      	ldr	r0, [pc, #24]	; (800114c <HAL_UART_MspInit+0x170>)
 8001132:	f000 fe3d 	bl	8001db0 <HAL_GPIO_Init>
}
 8001136:	bf00      	nop
 8001138:	3738      	adds	r7, #56	; 0x38
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40004400 	.word	0x40004400
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40004800 	.word	0x40004800
 8001154:	40020400 	.word	0x40020400

08001158 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	; 0x30
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001168:	2200      	movs	r2, #0
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	2019      	movs	r0, #25
 800116e:	f000 fdf5 	bl	8001d5c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001172:	2019      	movs	r0, #25
 8001174:	f000 fe0e 	bl	8001d94 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <HAL_InitTick+0xa4>)
 800117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001180:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <HAL_InitTick+0xa4>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6453      	str	r3, [r2, #68]	; 0x44
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <HAL_InitTick+0xa4>)
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001194:	f107 0210 	add.w	r2, r7, #16
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4611      	mov	r1, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fee4 	bl	8004f6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011a4:	f003 fece 	bl	8004f44 <HAL_RCC_GetPCLK2Freq>
 80011a8:	4603      	mov	r3, r0
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b0:	4a13      	ldr	r2, [pc, #76]	; (8001200 <HAL_InitTick+0xa8>)
 80011b2:	fba2 2303 	umull	r2, r3, r2, r3
 80011b6:	0c9b      	lsrs	r3, r3, #18
 80011b8:	3b01      	subs	r3, #1
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_InitTick+0xac>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <HAL_InitTick+0xb0>)
 80011c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <HAL_InitTick+0xac>)
 80011c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011ca:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_InitTick+0xac>)
 80011cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_InitTick+0xac>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_InitTick+0xac>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011dc:	4809      	ldr	r0, [pc, #36]	; (8001204 <HAL_InitTick+0xac>)
 80011de:	f004 fae7 	bl	80057b0 <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d104      	bne.n	80011f2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80011e8:	4806      	ldr	r0, [pc, #24]	; (8001204 <HAL_InitTick+0xac>)
 80011ea:	f004 fb16 	bl	800581a <HAL_TIM_Base_Start_IT>
 80011ee:	4603      	mov	r3, r0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3730      	adds	r7, #48	; 0x30
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40023800 	.word	0x40023800
 8001200:	431bde83 	.word	0x431bde83
 8001204:	20004b8c 	.word	0x20004b8c
 8001208:	40010000 	.word	0x40010000

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800123e:	f004 fb10 	bl	8005862 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20004b8c 	.word	0x20004b8c

0800124c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <OTG_FS_IRQHandler+0x10>)
 8001252:	f001 f9ef 	bl	8002634 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20005018 	.word	0x20005018

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f00b fba6 	bl	800c9e0 <__errno>
 8001294:	4602      	mov	r2, r0
 8001296:	230c      	movs	r3, #12
 8001298:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20020000 	.word	0x20020000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	200000b0 	.word	0x200000b0
 80012c8:	200052e0 	.word	0x200052e0

080012cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <SystemInit+0x28>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d6:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <SystemInit+0x28>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <SystemInit+0x28>)
 80012e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012e6:	609a      	str	r2, [r3, #8]
#endif
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001330 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012fe:	e003      	b.n	8001308 <LoopCopyDataInit>

08001300 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001302:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001304:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001306:	3104      	adds	r1, #4

08001308 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001308:	480b      	ldr	r0, [pc, #44]	; (8001338 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800130c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800130e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001310:	d3f6      	bcc.n	8001300 <CopyDataInit>
  ldr  r2, =_sbss
 8001312:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001314:	e002      	b.n	800131c <LoopFillZerobss>

08001316 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001316:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001318:	f842 3b04 	str.w	r3, [r2], #4

0800131c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800131e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001320:	d3f9      	bcc.n	8001316 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001322:	f7ff ffd3 	bl	80012cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001326:	f00b fb61 	bl	800c9ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132a:	f7ff f977 	bl	800061c <main>
  bx  lr    
 800132e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001330:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001334:	0800cd10 	.word	0x0800cd10
  ldr  r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800133c:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001340:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001344:	200052e0 	.word	0x200052e0

08001348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC_IRQHandler>
	...

0800134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <HAL_Init+0x40>)
 8001356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800135a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0a      	ldr	r2, [pc, #40]	; (800138c <HAL_Init+0x40>)
 8001362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_Init+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_Init+0x40>)
 800136e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001374:	2003      	movs	r0, #3
 8001376:	f000 fce6 	bl	8001d46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff feec 	bl	8001158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001380:	f7ff fcc4 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023c00 	.word	0x40023c00

08001390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x20>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_IncTick+0x24>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000008 	.word	0x20000008
 80013b4:	20004bcc 	.word	0x20004bcc

080013b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20004bcc 	.word	0x20004bcc

080013d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff ffee 	bl	80013b8 <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d005      	beq.n	80013f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_Delay+0x40>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013f6:	bf00      	nop
 80013f8:	f7ff ffde 	bl	80013b8 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f7      	bhi.n	80013f8 <HAL_Delay+0x28>
  {
  }
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000008 	.word	0x20000008

08001414 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e033      	b.n	8001492 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	2b00      	cmp	r3, #0
 8001430:	d109      	bne.n	8001446 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fc96 	bl	8000d64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	d118      	bne.n	8001484 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800145a:	f023 0302 	bic.w	r3, r3, #2
 800145e:	f043 0202 	orr.w	r2, r3, #2
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 fac4 	bl	80019f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	f043 0201 	orr.w	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	641a      	str	r2, [r3, #64]	; 0x40
 8001482:	e001      	b.n	8001488 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_ADC_Start+0x1a>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e0a5      	b.n	8001602 <HAL_ADC_Start+0x166>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d018      	beq.n	80014fe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014dc:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <HAL_ADC_Start+0x174>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <HAL_ADC_Start+0x178>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	0c9a      	lsrs	r2, r3, #18
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014f0:	e002      	b.n	80014f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f9      	bne.n	80014f2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b01      	cmp	r3, #1
 800150a:	d179      	bne.n	8001600 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152a:	2b00      	cmp	r3, #0
 800152c:	d007      	beq.n	800153e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001536:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800154a:	d106      	bne.n	800155a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001550:	f023 0206 	bic.w	r2, r3, #6
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	645a      	str	r2, [r3, #68]	; 0x44
 8001558:	e002      	b.n	8001560 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <HAL_ADC_Start+0x17c>)
 800156a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001574:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	2b00      	cmp	r3, #0
 8001580:	d12a      	bne.n	80015d8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a25      	ldr	r2, [pc, #148]	; (800161c <HAL_ADC_Start+0x180>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d015      	beq.n	80015b8 <HAL_ADC_Start+0x11c>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a23      	ldr	r2, [pc, #140]	; (8001620 <HAL_ADC_Start+0x184>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d105      	bne.n	80015a2 <HAL_ADC_Start+0x106>
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <HAL_ADC_Start+0x17c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00a      	beq.n	80015b8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <HAL_ADC_Start+0x188>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d129      	bne.n	8001600 <HAL_ADC_Start+0x164>
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_ADC_Start+0x17c>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d823      	bhi.n	8001600 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d11c      	bne.n	8001600 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	e013      	b.n	8001600 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0f      	ldr	r2, [pc, #60]	; (800161c <HAL_ADC_Start+0x180>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d10e      	bne.n	8001600 <HAL_ADC_Start+0x164>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d107      	bne.n	8001600 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015fe:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000000 	.word	0x20000000
 8001614:	431bde83 	.word	0x431bde83
 8001618:	40012300 	.word	0x40012300
 800161c:	40012000 	.word	0x40012000
 8001620:	40012100 	.word	0x40012100
 8001624:	40012200 	.word	0x40012200

08001628 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_ADC_Stop+0x16>
 800163a:	2302      	movs	r3, #2
 800163c:	e021      	b.n	8001682 <HAL_ADC_Stop+0x5a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0201 	bic.w	r2, r2, #1
 8001654:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d109      	bne.n	8001678 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	f043 0201 	orr.w	r2, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016aa:	d113      	bne.n	80016d4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ba:	d10b      	bne.n	80016d4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f043 0220 	orr.w	r2, r3, #32
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e05c      	b.n	800178e <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80016d4:	f7ff fe70 	bl	80013b8 <HAL_GetTick>
 80016d8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016da:	e01a      	b.n	8001712 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e2:	d016      	beq.n	8001712 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d007      	beq.n	80016fa <HAL_ADC_PollForConversion+0x6c>
 80016ea:	f7ff fe65 	bl	80013b8 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d20b      	bcs.n	8001712 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f043 0204 	orr.w	r2, r3, #4
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e03d      	b.n	800178e <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b02      	cmp	r3, #2
 800171e:	d1dd      	bne.n	80016dc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f06f 0212 	mvn.w	r2, #18
 8001728:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d123      	bne.n	800178c <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001748:	2b00      	cmp	r3, #0
 800174a:	d11f      	bne.n	800178c <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001764:	2b00      	cmp	r3, #0
 8001766:	d111      	bne.n	800178c <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d105      	bne.n	800178c <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x1c>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e105      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x228>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b09      	cmp	r3, #9
 80017da:	d925      	bls.n	8001828 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68d9      	ldr	r1, [r3, #12]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	3b1e      	subs	r3, #30
 80017f2:	2207      	movs	r2, #7
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43da      	mvns	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	400a      	ands	r2, r1
 8001800:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68d9      	ldr	r1, [r3, #12]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	4603      	mov	r3, r0
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4403      	add	r3, r0
 800181a:	3b1e      	subs	r3, #30
 800181c:	409a      	lsls	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	e022      	b.n	800186e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6919      	ldr	r1, [r3, #16]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	b29b      	uxth	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	2207      	movs	r2, #7
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	400a      	ands	r2, r1
 800184a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6919      	ldr	r1, [r3, #16]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	4603      	mov	r3, r0
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4403      	add	r3, r0
 8001864:	409a      	lsls	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b06      	cmp	r3, #6
 8001874:	d824      	bhi.n	80018c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	3b05      	subs	r3, #5
 8001888:	221f      	movs	r2, #31
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	400a      	ands	r2, r1
 8001896:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	4618      	mov	r0, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	3b05      	subs	r3, #5
 80018b2:	fa00 f203 	lsl.w	r2, r0, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34
 80018be:	e04c      	b.n	800195a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b0c      	cmp	r3, #12
 80018c6:	d824      	bhi.n	8001912 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	3b23      	subs	r3, #35	; 0x23
 80018da:	221f      	movs	r2, #31
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43da      	mvns	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	400a      	ands	r2, r1
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	3b23      	subs	r3, #35	; 0x23
 8001904:	fa00 f203 	lsl.w	r2, r0, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
 8001910:	e023      	b.n	800195a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	3b41      	subs	r3, #65	; 0x41
 8001924:	221f      	movs	r2, #31
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	400a      	ands	r2, r1
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	3b41      	subs	r3, #65	; 0x41
 800194e:	fa00 f203 	lsl.w	r2, r0, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <HAL_ADC_ConfigChannel+0x234>)
 800195c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a21      	ldr	r2, [pc, #132]	; (80019e8 <HAL_ADC_ConfigChannel+0x238>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d109      	bne.n	800197c <HAL_ADC_ConfigChannel+0x1cc>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b12      	cmp	r3, #18
 800196e:	d105      	bne.n	800197c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <HAL_ADC_ConfigChannel+0x238>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d123      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x21e>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b10      	cmp	r3, #16
 800198c:	d003      	beq.n	8001996 <HAL_ADC_ConfigChannel+0x1e6>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b11      	cmp	r3, #17
 8001994:	d11b      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b10      	cmp	r3, #16
 80019a8:	d111      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_ADC_ConfigChannel+0x23c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_ADC_ConfigChannel+0x240>)
 80019b0:	fba2 2303 	umull	r2, r3, r2, r3
 80019b4:	0c9a      	lsrs	r2, r3, #18
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019c0:	e002      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f9      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40012300 	.word	0x40012300
 80019e8:	40012000 	.word	0x40012000
 80019ec:	20000000 	.word	0x20000000
 80019f0:	431bde83 	.word	0x431bde83

080019f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019fc:	4b79      	ldr	r3, [pc, #484]	; (8001be4 <ADC_Init+0x1f0>)
 80019fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	021a      	lsls	r2, r3, #8
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6859      	ldr	r1, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6899      	ldr	r1, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <ADC_Init+0x1f4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d022      	beq.n	8001ad2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6899      	ldr	r1, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6899      	ldr	r1, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	e00f      	b.n	8001af2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ae0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001af0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0202 	bic.w	r2, r2, #2
 8001b00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6899      	ldr	r1, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7e1b      	ldrb	r3, [r3, #24]
 8001b0c:	005a      	lsls	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d01b      	beq.n	8001b58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6859      	ldr	r1, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	035a      	lsls	r2, r3, #13
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	e007      	b.n	8001b68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	051a      	lsls	r2, r3, #20
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6899      	ldr	r1, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001baa:	025a      	lsls	r2, r3, #9
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6899      	ldr	r1, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	029a      	lsls	r2, r3, #10
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	609a      	str	r2, [r3, #8]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40012300 	.word	0x40012300
 8001be8:	0f000001 	.word	0x0f000001

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db0b      	blt.n	8001c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	4907      	ldr	r1, [pc, #28]	; (8001c88 <__NVIC_EnableIRQ+0x38>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ff4c 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6e:	f7ff ff61 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001d72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	68b9      	ldr	r1, [r7, #8]
 8001d78:	6978      	ldr	r0, [r7, #20]
 8001d7a:	f7ff ffb1 	bl	8001ce0 <NVIC_EncodePriority>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d84:	4611      	mov	r1, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ff80 	bl	8001c8c <__NVIC_SetPriority>
}
 8001d8c:	bf00      	nop
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff54 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e16b      	b.n	80020a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	f040 815a 	bne.w	800209e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d00b      	beq.n	8001e0a <HAL_GPIO_Init+0x5a>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d007      	beq.n	8001e0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dfe:	2b11      	cmp	r3, #17
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b12      	cmp	r3, #18
 8001e08:	d130      	bne.n	8001e6c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e40:	2201      	movs	r2, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 0201 	and.w	r2, r3, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0xfc>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b12      	cmp	r3, #18
 8001eaa:	d123      	bne.n	8001ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	08da      	lsrs	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3208      	adds	r2, #8
 8001eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	08da      	lsrs	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3208      	adds	r2, #8
 8001eee:	69b9      	ldr	r1, [r7, #24]
 8001ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0203 	and.w	r2, r3, #3
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80b4 	beq.w	800209e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b5f      	ldr	r3, [pc, #380]	; (80020b8 <HAL_GPIO_Init+0x308>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a5e      	ldr	r2, [pc, #376]	; (80020b8 <HAL_GPIO_Init+0x308>)
 8001f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b5c      	ldr	r3, [pc, #368]	; (80020b8 <HAL_GPIO_Init+0x308>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f52:	4a5a      	ldr	r2, [pc, #360]	; (80020bc <HAL_GPIO_Init+0x30c>)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	220f      	movs	r2, #15
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a51      	ldr	r2, [pc, #324]	; (80020c0 <HAL_GPIO_Init+0x310>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d02b      	beq.n	8001fd6 <HAL_GPIO_Init+0x226>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a50      	ldr	r2, [pc, #320]	; (80020c4 <HAL_GPIO_Init+0x314>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d025      	beq.n	8001fd2 <HAL_GPIO_Init+0x222>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4f      	ldr	r2, [pc, #316]	; (80020c8 <HAL_GPIO_Init+0x318>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <HAL_GPIO_Init+0x21e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4e      	ldr	r2, [pc, #312]	; (80020cc <HAL_GPIO_Init+0x31c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d019      	beq.n	8001fca <HAL_GPIO_Init+0x21a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4d      	ldr	r2, [pc, #308]	; (80020d0 <HAL_GPIO_Init+0x320>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0x216>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4c      	ldr	r2, [pc, #304]	; (80020d4 <HAL_GPIO_Init+0x324>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_GPIO_Init+0x212>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4b      	ldr	r2, [pc, #300]	; (80020d8 <HAL_GPIO_Init+0x328>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <HAL_GPIO_Init+0x20e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4a      	ldr	r2, [pc, #296]	; (80020dc <HAL_GPIO_Init+0x32c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_GPIO_Init+0x20a>
 8001fb6:	2307      	movs	r3, #7
 8001fb8:	e00e      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fba:	2308      	movs	r3, #8
 8001fbc:	e00c      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fbe:	2306      	movs	r3, #6
 8001fc0:	e00a      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fc2:	2305      	movs	r3, #5
 8001fc4:	e008      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e004      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e002      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	f002 0203 	and.w	r2, r2, #3
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	4093      	lsls	r3, r2
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe8:	4934      	ldr	r1, [pc, #208]	; (80020bc <HAL_GPIO_Init+0x30c>)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	3302      	adds	r3, #2
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <HAL_GPIO_Init+0x330>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800201a:	4a31      	ldr	r2, [pc, #196]	; (80020e0 <HAL_GPIO_Init+0x330>)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002020:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <HAL_GPIO_Init+0x330>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002044:	4a26      	ldr	r2, [pc, #152]	; (80020e0 <HAL_GPIO_Init+0x330>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204a:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_GPIO_Init+0x330>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800206e:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <HAL_GPIO_Init+0x330>)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002074:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_GPIO_Init+0x330>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002098:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_GPIO_Init+0x330>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3301      	adds	r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	2b0f      	cmp	r3, #15
 80020a8:	f67f ae90 	bls.w	8001dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020ac:	bf00      	nop
 80020ae:	3724      	adds	r7, #36	; 0x24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40013800 	.word	0x40013800
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40020400 	.word	0x40020400
 80020c8:	40020800 	.word	0x40020800
 80020cc:	40020c00 	.word	0x40020c00
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40021400 	.word	0x40021400
 80020d8:	40021800 	.word	0x40021800
 80020dc:	40021c00 	.word	0x40021c00
 80020e0:	40013c00 	.word	0x40013c00

080020e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
 80020f0:	4613      	mov	r3, r2
 80020f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020f4:	787b      	ldrb	r3, [r7, #1]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002100:	e003      	b.n	800210a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002102:	887b      	ldrh	r3, [r7, #2]
 8002104:	041a      	lsls	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	619a      	str	r2, [r3, #24]
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002116:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002118:	b08f      	sub	sp, #60	; 0x3c
 800211a:	af0a      	add	r7, sp, #40	; 0x28
 800211c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e054      	b.n	80021d2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f00a f99e 	bl	800c484 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2203      	movs	r2, #3
 800214c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d102      	bne.n	8002162 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f004 f99c 	bl	80064a4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	687e      	ldr	r6, [r7, #4]
 8002174:	466d      	mov	r5, sp
 8002176:	f106 0410 	add.w	r4, r6, #16
 800217a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800217c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800217e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002182:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002186:	e885 0003 	stmia.w	r5, {r0, r1}
 800218a:	1d33      	adds	r3, r6, #4
 800218c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800218e:	6838      	ldr	r0, [r7, #0]
 8002190:	f004 f916 	bl	80063c0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	4618      	mov	r0, r3
 800219c:	f004 f993 	bl	80064c6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	687e      	ldr	r6, [r7, #4]
 80021a8:	466d      	mov	r5, sp
 80021aa:	f106 0410 	add.w	r4, r6, #16
 80021ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80021be:	1d33      	adds	r3, r6, #4
 80021c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c2:	6838      	ldr	r0, [r7, #0]
 80021c4:	f004 faa6 	bl	8006714 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021da <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80021da:	b590      	push	{r4, r7, lr}
 80021dc:	b089      	sub	sp, #36	; 0x24
 80021de:	af04      	add	r7, sp, #16
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	4608      	mov	r0, r1
 80021e4:	4611      	mov	r1, r2
 80021e6:	461a      	mov	r2, r3
 80021e8:	4603      	mov	r3, r0
 80021ea:	70fb      	strb	r3, [r7, #3]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70bb      	strb	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_HCD_HC_Init+0x28>
 80021fe:	2302      	movs	r3, #2
 8002200:	e07f      	b.n	8002302 <HAL_HCD_HC_Init+0x128>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	440b      	add	r3, r1
 8002218:	333d      	adds	r3, #61	; 0x3d
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	440b      	add	r3, r1
 800222c:	3338      	adds	r3, #56	; 0x38
 800222e:	787a      	ldrb	r2, [r7, #1]
 8002230:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002232:	78fa      	ldrb	r2, [r7, #3]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	440b      	add	r3, r1
 8002240:	3340      	adds	r3, #64	; 0x40
 8002242:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002244:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	440b      	add	r3, r1
 8002254:	3339      	adds	r3, #57	; 0x39
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	333f      	adds	r3, #63	; 0x3f
 800226a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800226e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	78bb      	ldrb	r3, [r7, #2]
 8002274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002278:	b2d8      	uxtb	r0, r3
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	333a      	adds	r3, #58	; 0x3a
 8002288:	4602      	mov	r2, r0
 800228a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800228c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002290:	2b00      	cmp	r3, #0
 8002292:	da0a      	bge.n	80022aa <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	333b      	adds	r3, #59	; 0x3b
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	e009      	b.n	80022be <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	440b      	add	r3, r1
 80022b8:	333b      	adds	r3, #59	; 0x3b
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	333c      	adds	r3, #60	; 0x3c
 80022ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80022d2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	787c      	ldrb	r4, [r7, #1]
 80022da:	78ba      	ldrb	r2, [r7, #2]
 80022dc:	78f9      	ldrb	r1, [r7, #3]
 80022de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	4623      	mov	r3, r4
 80022f0:	f004 fb92 	bl	8006a18 <USB_HC_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bd90      	pop	{r4, r7, pc}

0800230a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_HCD_HC_Halt+0x1e>
 8002324:	2302      	movs	r3, #2
 8002326:	e00f      	b.n	8002348 <HAL_HCD_HC_Halt+0x3e>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f004 fdce 	bl	8006eda <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	4608      	mov	r0, r1
 800235a:	4611      	mov	r1, r2
 800235c:	461a      	mov	r2, r3
 800235e:	4603      	mov	r3, r0
 8002360:	70fb      	strb	r3, [r7, #3]
 8002362:	460b      	mov	r3, r1
 8002364:	70bb      	strb	r3, [r7, #2]
 8002366:	4613      	mov	r3, r2
 8002368:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	333b      	adds	r3, #59	; 0x3b
 800237a:	78ba      	ldrb	r2, [r7, #2]
 800237c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	333f      	adds	r3, #63	; 0x3f
 800238e:	787a      	ldrb	r2, [r7, #1]
 8002390:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002392:	7c3b      	ldrb	r3, [r7, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d114      	bne.n	80023c2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	440b      	add	r3, r1
 80023a6:	3342      	adds	r3, #66	; 0x42
 80023a8:	2203      	movs	r2, #3
 80023aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	440b      	add	r3, r1
 80023ba:	333d      	adds	r3, #61	; 0x3d
 80023bc:	7f3a      	ldrb	r2, [r7, #28]
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	e009      	b.n	80023d6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	440b      	add	r3, r1
 80023d0:	3342      	adds	r3, #66	; 0x42
 80023d2:	2202      	movs	r2, #2
 80023d4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80023d6:	787b      	ldrb	r3, [r7, #1]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	f200 80d6 	bhi.w	800258a <HAL_HCD_HC_SubmitRequest+0x23a>
 80023de:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80023e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e4:	080023f5 	.word	0x080023f5
 80023e8:	08002575 	.word	0x08002575
 80023ec:	08002461 	.word	0x08002461
 80023f0:	080024eb 	.word	0x080024eb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80023f4:	7c3b      	ldrb	r3, [r7, #16]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	f040 80c9 	bne.w	800258e <HAL_HCD_HC_SubmitRequest+0x23e>
 80023fc:	78bb      	ldrb	r3, [r7, #2]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f040 80c5 	bne.w	800258e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002404:	8b3b      	ldrh	r3, [r7, #24]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	3351      	adds	r3, #81	; 0x51
 800241a:	2201      	movs	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	3351      	adds	r3, #81	; 0x51
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10a      	bne.n	800244a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	3342      	adds	r3, #66	; 0x42
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002448:	e0a1      	b.n	800258e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	440b      	add	r3, r1
 8002458:	3342      	adds	r3, #66	; 0x42
 800245a:	2202      	movs	r2, #2
 800245c:	701a      	strb	r2, [r3, #0]
      break;
 800245e:	e096      	b.n	800258e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002460:	78bb      	ldrb	r3, [r7, #2]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d120      	bne.n	80024a8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	3351      	adds	r3, #81	; 0x51
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	440b      	add	r3, r1
 800248a:	3342      	adds	r3, #66	; 0x42
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002490:	e07e      	b.n	8002590 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	440b      	add	r3, r1
 80024a0:	3342      	adds	r3, #66	; 0x42
 80024a2:	2202      	movs	r2, #2
 80024a4:	701a      	strb	r2, [r3, #0]
      break;
 80024a6:	e073      	b.n	8002590 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	3350      	adds	r3, #80	; 0x50
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10a      	bne.n	80024d4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	3342      	adds	r3, #66	; 0x42
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
      break;
 80024d2:	e05d      	b.n	8002590 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	3342      	adds	r3, #66	; 0x42
 80024e4:	2202      	movs	r2, #2
 80024e6:	701a      	strb	r2, [r3, #0]
      break;
 80024e8:	e052      	b.n	8002590 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80024ea:	78bb      	ldrb	r3, [r7, #2]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d120      	bne.n	8002532 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	3351      	adds	r3, #81	; 0x51
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10a      	bne.n	800251c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	440b      	add	r3, r1
 8002514:	3342      	adds	r3, #66	; 0x42
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800251a:	e039      	b.n	8002590 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	440b      	add	r3, r1
 800252a:	3342      	adds	r3, #66	; 0x42
 800252c:	2202      	movs	r2, #2
 800252e:	701a      	strb	r2, [r3, #0]
      break;
 8002530:	e02e      	b.n	8002590 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	3350      	adds	r3, #80	; 0x50
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	440b      	add	r3, r1
 8002556:	3342      	adds	r3, #66	; 0x42
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
      break;
 800255c:	e018      	b.n	8002590 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	440b      	add	r3, r1
 800256c:	3342      	adds	r3, #66	; 0x42
 800256e:	2202      	movs	r2, #2
 8002570:	701a      	strb	r2, [r3, #0]
      break;
 8002572:	e00d      	b.n	8002590 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	440b      	add	r3, r1
 8002582:	3342      	adds	r3, #66	; 0x42
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
      break;
 8002588:	e002      	b.n	8002590 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800258a:	bf00      	nop
 800258c:	e000      	b.n	8002590 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800258e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	3344      	adds	r3, #68	; 0x44
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	8b39      	ldrh	r1, [r7, #24]
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4403      	add	r3, r0
 80025b4:	3348      	adds	r3, #72	; 0x48
 80025b6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	440b      	add	r3, r1
 80025c6:	335c      	adds	r3, #92	; 0x5c
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	440b      	add	r3, r1
 80025da:	334c      	adds	r3, #76	; 0x4c
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	3339      	adds	r3, #57	; 0x39
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	440b      	add	r3, r1
 8002602:	335d      	adds	r3, #93	; 0x5d
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	3338      	adds	r3, #56	; 0x38
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	18d1      	adds	r1, r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	f004 fb02 	bl	8006c2c <USB_HC_StartXfer>
 8002628:	4603      	mov	r3, r0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop

08002634 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f004 f81f 	bl	800668e <USB_GetMode>
 8002650:	4603      	mov	r3, r0
 8002652:	2b01      	cmp	r3, #1
 8002654:	f040 80ef 	bne.w	8002836 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f004 f803 	bl	8006668 <USB_ReadInterrupts>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80e5 	beq.w	8002834 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f003 fffa 	bl	8006668 <USB_ReadInterrupts>
 8002674:	4603      	mov	r3, r0
 8002676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800267a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800267e:	d104      	bne.n	800268a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002688:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f003 ffea 	bl	8006668 <USB_ReadInterrupts>
 8002694:	4603      	mov	r3, r0
 8002696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800269e:	d104      	bne.n	80026aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 ffda 	bl	8006668 <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026be:	d104      	bne.n	80026ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 ffca 	bl	8006668 <USB_ReadInterrupts>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d103      	bne.n	80026e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2202      	movs	r2, #2
 80026e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 ffbc 	bl	8006668 <USB_ReadInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026fa:	d115      	bne.n	8002728 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002704:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d108      	bne.n	8002728 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f009 ff32 	bl	800c580 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2101      	movs	r1, #1
 8002722:	4618      	mov	r0, r3
 8002724:	f004 f8b2 	bl	800688c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f003 ff9b 	bl	8006668 <USB_ReadInterrupts>
 8002732:	4603      	mov	r3, r0
 8002734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800273c:	d102      	bne.n	8002744 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f001 f966 	bl	8003a10 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f003 ff8d 	bl	8006668 <USB_ReadInterrupts>
 800274e:	4603      	mov	r3, r0
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b08      	cmp	r3, #8
 8002756:	d106      	bne.n	8002766 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f009 fef5 	bl	800c548 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2208      	movs	r2, #8
 8002764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f003 ff7c 	bl	8006668 <USB_ReadInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800277a:	d138      	bne.n	80027ee <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f004 fb99 	bl	8006eb8 <USB_HC_ReadInterrupt>
 8002786:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	e025      	b.n	80027da <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	fa22 f303 	lsr.w	r3, r2, r3
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d018      	beq.n	80027d4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b8:	d106      	bne.n	80027c8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	4619      	mov	r1, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f8cf 	bl	8002964 <HCD_HC_IN_IRQHandler>
 80027c6:	e005      	b.n	80027d4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	4619      	mov	r1, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fcfd 	bl	80031ce <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	3301      	adds	r3, #1
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d3d4      	bcc.n	800278e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 ff38 	bl	8006668 <USB_ReadInterrupts>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d101      	bne.n	8002806 <HAL_HCD_IRQHandler+0x1d2>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_HCD_IRQHandler+0x1d4>
 8002806:	2300      	movs	r3, #0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d014      	beq.n	8002836 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0210 	bic.w	r2, r2, #16
 800281a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f001 f84b 	bl	80038b8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699a      	ldr	r2, [r3, #24]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0210 	orr.w	r2, r2, #16
 8002830:	619a      	str	r2, [r3, #24]
 8002832:	e000      	b.n	8002836 <HAL_HCD_IRQHandler+0x202>
      return;
 8002834:	bf00      	nop
    }
  }
}
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_HCD_Start+0x16>
 800284e:	2302      	movs	r3, #2
 8002850:	e013      	b.n	800287a <HAL_HCD_Start+0x3e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f003 fe0f 	bl	8006482 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2101      	movs	r1, #1
 800286a:	4618      	mov	r0, r3
 800286c:	f004 f872 	bl	8006954 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_HCD_Stop+0x16>
 8002894:	2302      	movs	r3, #2
 8002896:	e00d      	b.n	80028b4 <HAL_HCD_Stop+0x32>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 fc53 	bl	8007150 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f004 f819 	bl	8006900 <USB_ResetPort>
 80028ce:	4603      	mov	r3, r0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	335c      	adds	r3, #92	; 0x5c
 80028f4:	781b      	ldrb	r3, [r3, #0]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	334c      	adds	r3, #76	; 0x4c
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f004 f85b 	bl	80069f4 <USB_GetCurrentFrame>
 800293e:	4603      	mov	r3, r0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f004 f836 	bl	80069c6 <USB_GetHostSpeed>
 800295a:	4603      	mov	r3, r0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b04      	cmp	r3, #4
 8002992:	d119      	bne.n	80029c8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	461a      	mov	r2, r3
 80029a2:	2304      	movs	r3, #4
 80029a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	0151      	lsls	r1, r2, #5
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	440a      	add	r2, r1
 80029bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	60d3      	str	r3, [r2, #12]
 80029c6:	e0ce      	b.n	8002b66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029de:	d12c      	bne.n	8002a3a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ec:	461a      	mov	r2, r3
 80029ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	440b      	add	r3, r1
 8002a02:	335d      	adds	r3, #93	; 0x5d
 8002a04:	2207      	movs	r2, #7
 8002a06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	0151      	lsls	r1, r2, #5
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	440a      	add	r2, r1
 8002a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a22:	f043 0302 	orr.w	r3, r3, #2
 8002a26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	4611      	mov	r1, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f004 fa51 	bl	8006eda <USB_HC_Halt>
 8002a38:	e095      	b.n	8002b66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d109      	bne.n	8002a64 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2320      	movs	r3, #32
 8002a60:	6093      	str	r3, [r2, #8]
 8002a62:	e080      	b.n	8002b66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d134      	bne.n	8002ae4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	0151      	lsls	r1, r2, #5
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	440a      	add	r2, r1
 8002a90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	440b      	add	r3, r1
 8002aa8:	335d      	adds	r3, #93	; 0x5d
 8002aaa:	2205      	movs	r2, #5
 8002aac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aba:	461a      	mov	r2, r3
 8002abc:	2310      	movs	r3, #16
 8002abe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002acc:	461a      	mov	r2, r3
 8002ace:	2308      	movs	r3, #8
 8002ad0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f004 f9fc 	bl	8006eda <USB_HC_Halt>
 8002ae2:	e040      	b.n	8002b66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afa:	d134      	bne.n	8002b66 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	0151      	lsls	r1, r2, #5
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	440a      	add	r2, r1
 8002b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f004 f9d7 	bl	8006eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2310      	movs	r3, #16
 8002b3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	440b      	add	r3, r1
 8002b4c:	335d      	adds	r3, #93	; 0x5d
 8002b4e:	2208      	movs	r2, #8
 8002b50:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b64:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b7c:	d122      	bne.n	8002bc4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	0151      	lsls	r1, r2, #5
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	440a      	add	r2, r1
 8002b94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f004 f996 	bl	8006eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bc0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002bc2:	e300      	b.n	80031c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	f040 80fd 	bne.w	8002dd6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01b      	beq.n	8002c1c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3348      	adds	r3, #72	; 0x48
 8002bf4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	0159      	lsls	r1, r3, #5
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	440b      	add	r3, r1
 8002bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002c08:	1ad1      	subs	r1, r2, r3
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4403      	add	r3, r0
 8002c18:	334c      	adds	r3, #76	; 0x4c
 8002c1a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	335d      	adds	r3, #93	; 0x5d
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3358      	adds	r3, #88	; 0x58
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	461a      	mov	r2, r3
 8002c52:	2301      	movs	r3, #1
 8002c54:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	333f      	adds	r3, #63	; 0x3f
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	333f      	adds	r3, #63	; 0x3f
 8002c7c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d121      	bne.n	8002cc6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	0151      	lsls	r1, r2, #5
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	440a      	add	r2, r1
 8002c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c9c:	f043 0302 	orr.w	r3, r3, #2
 8002ca0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f004 f914 	bl	8006eda <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	6093      	str	r3, [r2, #8]
 8002cc4:	e070      	b.n	8002da8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	333f      	adds	r3, #63	; 0x3f
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d12a      	bne.n	8002d32 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	0151      	lsls	r1, r2, #5
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	440a      	add	r2, r1
 8002cf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cfa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	335c      	adds	r3, #92	; 0x5c
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	b2d8      	uxtb	r0, r3
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	440b      	add	r3, r1
 8002d22:	335c      	adds	r3, #92	; 0x5c
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	4601      	mov	r1, r0
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f009 fc36 	bl	800c59c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d30:	e03a      	b.n	8002da8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	333f      	adds	r3, #63	; 0x3f
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d12f      	bne.n	8002da8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	335c      	adds	r3, #92	; 0x5c
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	440b      	add	r3, r1
 8002d6a:	3350      	adds	r3, #80	; 0x50
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	f083 0301 	eor.w	r3, r3, #1
 8002d72:	b2d8      	uxtb	r0, r3
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	3350      	adds	r3, #80	; 0x50
 8002d84:	4602      	mov	r2, r0
 8002d86:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	b2d8      	uxtb	r0, r3
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	440b      	add	r3, r1
 8002d9a:	335c      	adds	r3, #92	; 0x5c
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4601      	mov	r1, r0
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f009 fbfa 	bl	800c59c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	440b      	add	r3, r1
 8002db6:	3350      	adds	r3, #80	; 0x50
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	f083 0301 	eor.w	r3, r3, #1
 8002dbe:	b2d8      	uxtb	r0, r3
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	3350      	adds	r3, #80	; 0x50
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	701a      	strb	r2, [r3, #0]
}
 8002dd4:	e1f7      	b.n	80031c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	f040 811a 	bne.w	8003022 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	0151      	lsls	r1, r2, #5
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	440a      	add	r2, r1
 8002e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e08:	f023 0302 	bic.w	r3, r3, #2
 8002e0c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	440b      	add	r3, r1
 8002e1c:	335d      	adds	r3, #93	; 0x5d
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d10a      	bne.n	8002e3a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	440b      	add	r3, r1
 8002e32:	335c      	adds	r3, #92	; 0x5c
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
 8002e38:	e0d9      	b.n	8002fee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	440b      	add	r3, r1
 8002e48:	335d      	adds	r3, #93	; 0x5d
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b05      	cmp	r3, #5
 8002e4e:	d10a      	bne.n	8002e66 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	335c      	adds	r3, #92	; 0x5c
 8002e60:	2205      	movs	r2, #5
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	e0c3      	b.n	8002fee <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	335d      	adds	r3, #93	; 0x5d
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b06      	cmp	r3, #6
 8002e7a:	d00a      	beq.n	8002e92 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	440b      	add	r3, r1
 8002e8a:	335d      	adds	r3, #93	; 0x5d
 8002e8c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d156      	bne.n	8002f40 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3358      	adds	r3, #88	; 0x58
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	1c59      	adds	r1, r3, #1
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4403      	add	r3, r0
 8002eb4:	3358      	adds	r3, #88	; 0x58
 8002eb6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3358      	adds	r3, #88	; 0x58
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d914      	bls.n	8002ef8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	440b      	add	r3, r1
 8002edc:	3358      	adds	r3, #88	; 0x58
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	440b      	add	r3, r1
 8002ef0:	335c      	adds	r3, #92	; 0x5c
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e009      	b.n	8002f0c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	335c      	adds	r3, #92	; 0x5c
 8002f08:	2202      	movs	r2, #2
 8002f0a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f22:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f2a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e056      	b.n	8002fee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	335d      	adds	r3, #93	; 0x5d
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d123      	bne.n	8002f9e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	335c      	adds	r3, #92	; 0x5c
 8002f66:	2202      	movs	r2, #2
 8002f68:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f80:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f88:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f96:	461a      	mov	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	e027      	b.n	8002fee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	440b      	add	r3, r1
 8002fac:	335d      	adds	r3, #93	; 0x5d
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b07      	cmp	r3, #7
 8002fb2:	d11c      	bne.n	8002fee <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3358      	adds	r3, #88	; 0x58
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	1c59      	adds	r1, r3, #1
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4403      	add	r3, r0
 8002fd6:	3358      	adds	r3, #88	; 0x58
 8002fd8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	440b      	add	r3, r1
 8002fe8:	335c      	adds	r3, #92	; 0x5c
 8002fea:	2204      	movs	r2, #4
 8002fec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	b2d8      	uxtb	r0, r3
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	440b      	add	r3, r1
 8003012:	335c      	adds	r3, #92	; 0x5c
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	4601      	mov	r1, r0
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f009 fabe 	bl	800c59c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003020:	e0d1      	b.n	80031c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4413      	add	r3, r2
 800302a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003034:	2b80      	cmp	r3, #128	; 0x80
 8003036:	d13e      	bne.n	80030b6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	0151      	lsls	r1, r2, #5
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	440a      	add	r2, r1
 800304e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003052:	f043 0302 	orr.w	r3, r3, #2
 8003056:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	440b      	add	r3, r1
 8003066:	3358      	adds	r3, #88	; 0x58
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	1c59      	adds	r1, r3, #1
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4403      	add	r3, r0
 800307a:	3358      	adds	r3, #88	; 0x58
 800307c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	440b      	add	r3, r1
 800308c:	335d      	adds	r3, #93	; 0x5d
 800308e:	2206      	movs	r2, #6
 8003090:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f003 ff1c 	bl	8006eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	461a      	mov	r2, r3
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	6093      	str	r3, [r2, #8]
}
 80030b4:	e087      	b.n	80031c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d17c      	bne.n	80031c6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	440b      	add	r3, r1
 80030da:	333f      	adds	r3, #63	; 0x3f
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d122      	bne.n	8003128 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	440b      	add	r3, r1
 80030f0:	3358      	adds	r3, #88	; 0x58
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	0151      	lsls	r1, r2, #5
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	440a      	add	r2, r1
 800310c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f003 feda 	bl	8006eda <USB_HC_Halt>
 8003126:	e045      	b.n	80031b4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	440b      	add	r3, r1
 8003136:	333f      	adds	r3, #63	; 0x3f
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	440b      	add	r3, r1
 800314c:	333f      	adds	r3, #63	; 0x3f
 800314e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003150:	2b02      	cmp	r3, #2
 8003152:	d12f      	bne.n	80031b4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	440b      	add	r3, r1
 8003162:	3358      	adds	r3, #88	; 0x58
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d121      	bne.n	80031b4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	440b      	add	r3, r1
 800317e:	335d      	adds	r3, #93	; 0x5d
 8003180:	2203      	movs	r2, #3
 8003182:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4413      	add	r3, r2
 800318c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	0151      	lsls	r1, r2, #5
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	440a      	add	r2, r1
 800319a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800319e:	f043 0302 	orr.w	r3, r3, #2
 80031a2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f003 fe93 	bl	8006eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c0:	461a      	mov	r2, r3
 80031c2:	2310      	movs	r3, #16
 80031c4:	6093      	str	r3, [r2, #8]
}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b086      	sub	sp, #24
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d119      	bne.n	8003232 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4413      	add	r3, r2
 8003206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320a:	461a      	mov	r2, r3
 800320c:	2304      	movs	r3, #4
 800320e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	0151      	lsls	r1, r2, #5
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	440a      	add	r2, r1
 8003226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800322a:	f043 0302 	orr.w	r3, r3, #2
 800322e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003230:	e33e      	b.n	80038b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b20      	cmp	r3, #32
 8003246:	d141      	bne.n	80032cc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	461a      	mov	r2, r3
 8003256:	2320      	movs	r3, #32
 8003258:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	440b      	add	r3, r1
 8003268:	333d      	adds	r3, #61	; 0x3d
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b01      	cmp	r3, #1
 800326e:	f040 831f 	bne.w	80038b0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	333d      	adds	r3, #61	; 0x3d
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	335c      	adds	r3, #92	; 0x5c
 8003296:	2202      	movs	r2, #2
 8003298:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	0151      	lsls	r1, r2, #5
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	440a      	add	r2, r1
 80032b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032b4:	f043 0302 	orr.w	r3, r3, #2
 80032b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f003 fe08 	bl	8006eda <USB_HC_Halt>
}
 80032ca:	e2f1      	b.n	80038b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d13f      	bne.n	8003362 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	440b      	add	r3, r1
 80032f0:	335d      	adds	r3, #93	; 0x5d
 80032f2:	2204      	movs	r2, #4
 80032f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	440b      	add	r3, r1
 8003304:	333d      	adds	r3, #61	; 0x3d
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	440b      	add	r3, r1
 8003318:	3358      	adds	r3, #88	; 0x58
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	0151      	lsls	r1, r2, #5
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	440a      	add	r2, r1
 8003334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003338:	f043 0302 	orr.w	r3, r3, #2
 800333c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f003 fdc6 	bl	8006eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4413      	add	r3, r2
 8003356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335a:	461a      	mov	r2, r3
 800335c:	2340      	movs	r3, #64	; 0x40
 800335e:	6093      	str	r3, [r2, #8]
}
 8003360:	e2a6      	b.n	80038b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4413      	add	r3, r2
 800336a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003378:	d122      	bne.n	80033c0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	0151      	lsls	r1, r2, #5
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	440a      	add	r2, r1
 8003390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003394:	f043 0302 	orr.w	r3, r3, #2
 8003398:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f003 fd98 	bl	8006eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b6:	461a      	mov	r2, r3
 80033b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033bc:	6093      	str	r3, [r2, #8]
}
 80033be:	e277      	b.n	80038b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d135      	bne.n	8003442 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	3358      	adds	r3, #88	; 0x58
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	0151      	lsls	r1, r2, #5
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	440a      	add	r2, r1
 8003400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f003 fd60 	bl	8006eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4413      	add	r3, r2
 8003422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003426:	461a      	mov	r2, r3
 8003428:	2301      	movs	r3, #1
 800342a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	440b      	add	r3, r1
 800343a:	335d      	adds	r3, #93	; 0x5d
 800343c:	2201      	movs	r2, #1
 800343e:	701a      	strb	r2, [r3, #0]
}
 8003440:	e236      	b.n	80038b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4413      	add	r3, r2
 800344a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b08      	cmp	r3, #8
 8003456:	d12b      	bne.n	80034b0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003464:	461a      	mov	r2, r3
 8003466:	2308      	movs	r3, #8
 8003468:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4413      	add	r3, r2
 8003472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	0151      	lsls	r1, r2, #5
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	440a      	add	r2, r1
 8003480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003484:	f043 0302 	orr.w	r3, r3, #2
 8003488:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f003 fd20 	bl	8006eda <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	440b      	add	r3, r1
 80034a8:	335d      	adds	r3, #93	; 0x5d
 80034aa:	2205      	movs	r2, #5
 80034ac:	701a      	strb	r2, [r3, #0]
}
 80034ae:	e1ff      	b.n	80038b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	d155      	bne.n	8003572 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	440b      	add	r3, r1
 80034d4:	3358      	adds	r3, #88	; 0x58
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	440b      	add	r3, r1
 80034e8:	335d      	adds	r3, #93	; 0x5d
 80034ea:	2203      	movs	r2, #3
 80034ec:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	333d      	adds	r3, #61	; 0x3d
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d114      	bne.n	800352e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	333c      	adds	r3, #60	; 0x3c
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	333d      	adds	r3, #61	; 0x3d
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4413      	add	r3, r2
 8003536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	0151      	lsls	r1, r2, #5
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	440a      	add	r2, r1
 8003544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f003 fcbe 	bl	8006eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	461a      	mov	r2, r3
 800356c:	2310      	movs	r3, #16
 800356e:	6093      	str	r3, [r2, #8]
}
 8003570:	e19e      	b.n	80038b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4413      	add	r3, r2
 800357a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	2b80      	cmp	r3, #128	; 0x80
 8003586:	d12b      	bne.n	80035e0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	0151      	lsls	r1, r2, #5
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	440a      	add	r2, r1
 800359e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035a2:	f043 0302 	orr.w	r3, r3, #2
 80035a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	4611      	mov	r1, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f003 fc91 	bl	8006eda <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	440b      	add	r3, r1
 80035c6:	335d      	adds	r3, #93	; 0x5d
 80035c8:	2206      	movs	r2, #6
 80035ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	461a      	mov	r2, r3
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	6093      	str	r3, [r2, #8]
}
 80035de:	e167      	b.n	80038b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f6:	d135      	bne.n	8003664 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	0151      	lsls	r1, r2, #5
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	440a      	add	r2, r1
 800360e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003612:	f043 0302 	orr.w	r3, r3, #2
 8003616:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f003 fc59 	bl	8006eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003634:	461a      	mov	r2, r3
 8003636:	2310      	movs	r3, #16
 8003638:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003646:	461a      	mov	r2, r3
 8003648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800364c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	440b      	add	r3, r1
 800365c:	335d      	adds	r3, #93	; 0x5d
 800365e:	2208      	movs	r2, #8
 8003660:	701a      	strb	r2, [r3, #0]
}
 8003662:	e125      	b.n	80038b0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4413      	add	r3, r2
 800366c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b02      	cmp	r3, #2
 8003678:	f040 811a 	bne.w	80038b0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	0151      	lsls	r1, r2, #5
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	440a      	add	r2, r1
 8003692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003696:	f023 0302 	bic.w	r3, r3, #2
 800369a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	440b      	add	r3, r1
 80036aa:	335d      	adds	r3, #93	; 0x5d
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d137      	bne.n	8003722 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	440b      	add	r3, r1
 80036c0:	335c      	adds	r3, #92	; 0x5c
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	440b      	add	r3, r1
 80036d4:	333f      	adds	r3, #63	; 0x3f
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d00b      	beq.n	80036f4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	440b      	add	r3, r1
 80036ea:	333f      	adds	r3, #63	; 0x3f
 80036ec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	f040 80c5 	bne.w	800387e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	440b      	add	r3, r1
 8003702:	3351      	adds	r3, #81	; 0x51
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	f083 0301 	eor.w	r3, r3, #1
 800370a:	b2d8      	uxtb	r0, r3
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	440b      	add	r3, r1
 800371a:	3351      	adds	r3, #81	; 0x51
 800371c:	4602      	mov	r2, r0
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	e0ad      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	440b      	add	r3, r1
 8003730:	335d      	adds	r3, #93	; 0x5d
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b03      	cmp	r3, #3
 8003736:	d10a      	bne.n	800374e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	440b      	add	r3, r1
 8003746:	335c      	adds	r3, #92	; 0x5c
 8003748:	2202      	movs	r2, #2
 800374a:	701a      	strb	r2, [r3, #0]
 800374c:	e097      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	440b      	add	r3, r1
 800375c:	335d      	adds	r3, #93	; 0x5d
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b04      	cmp	r3, #4
 8003762:	d10a      	bne.n	800377a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	440b      	add	r3, r1
 8003772:	335c      	adds	r3, #92	; 0x5c
 8003774:	2202      	movs	r2, #2
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	e081      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	440b      	add	r3, r1
 8003788:	335d      	adds	r3, #93	; 0x5d
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b05      	cmp	r3, #5
 800378e:	d10a      	bne.n	80037a6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	440b      	add	r3, r1
 800379e:	335c      	adds	r3, #92	; 0x5c
 80037a0:	2205      	movs	r2, #5
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	e06b      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	440b      	add	r3, r1
 80037b4:	335d      	adds	r3, #93	; 0x5d
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b06      	cmp	r3, #6
 80037ba:	d00a      	beq.n	80037d2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	440b      	add	r3, r1
 80037ca:	335d      	adds	r3, #93	; 0x5d
 80037cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d155      	bne.n	800387e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	440b      	add	r3, r1
 80037e0:	3358      	adds	r3, #88	; 0x58
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	1c59      	adds	r1, r3, #1
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4403      	add	r3, r0
 80037f4:	3358      	adds	r3, #88	; 0x58
 80037f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	440b      	add	r3, r1
 8003806:	3358      	adds	r3, #88	; 0x58
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b03      	cmp	r3, #3
 800380c:	d914      	bls.n	8003838 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	440b      	add	r3, r1
 800381c:	3358      	adds	r3, #88	; 0x58
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	440b      	add	r3, r1
 8003830:	335c      	adds	r3, #92	; 0x5c
 8003832:	2204      	movs	r2, #4
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	e009      	b.n	800384c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	440b      	add	r3, r1
 8003846:	335c      	adds	r3, #92	; 0x5c
 8003848:	2202      	movs	r2, #2
 800384a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4413      	add	r3, r2
 8003854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003862:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800386a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003878:	461a      	mov	r2, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4413      	add	r3, r2
 8003886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388a:	461a      	mov	r2, r3
 800388c:	2302      	movs	r3, #2
 800388e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	b2d8      	uxtb	r0, r3
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	440b      	add	r3, r1
 80038a2:	335c      	adds	r3, #92	; 0x5c
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	4601      	mov	r1, r0
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f008 fe76 	bl	800c59c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80038b0:	bf00      	nop
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08a      	sub	sp, #40	; 0x28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	0c5b      	lsrs	r3, r3, #17
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038ec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d003      	beq.n	80038fc <HCD_RXQLVL_IRQHandler+0x44>
 80038f4:	2b05      	cmp	r3, #5
 80038f6:	f000 8082 	beq.w	80039fe <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038fa:	e083      	b.n	8003a04 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d07f      	beq.n	8003a02 <HCD_RXQLVL_IRQHandler+0x14a>
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	440b      	add	r3, r1
 8003910:	3344      	adds	r3, #68	; 0x44
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d074      	beq.n	8003a02 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	440b      	add	r3, r1
 800392a:	3344      	adds	r3, #68	; 0x44
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	b292      	uxth	r2, r2
 8003932:	4619      	mov	r1, r3
 8003934:	f002 fe6f 	bl	8006616 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	440b      	add	r3, r1
 8003946:	3344      	adds	r3, #68	; 0x44
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	18d1      	adds	r1, r2, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4403      	add	r3, r0
 800395c:	3344      	adds	r3, #68	; 0x44
 800395e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	440b      	add	r3, r1
 800396e:	334c      	adds	r3, #76	; 0x4c
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	18d1      	adds	r1, r2, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4403      	add	r3, r0
 8003984:	334c      	adds	r3, #76	; 0x4c
 8003986:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	4413      	add	r3, r2
 8003990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <HCD_RXQLVL_IRQHandler+0x154>)
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d031      	beq.n	8003a02 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039b4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039bc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	440b      	add	r3, r1
 80039de:	3350      	adds	r3, #80	; 0x50
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	f083 0301 	eor.w	r3, r3, #1
 80039e6:	b2d8      	uxtb	r0, r3
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	440b      	add	r3, r1
 80039f6:	3350      	adds	r3, #80	; 0x50
 80039f8:	4602      	mov	r2, r0
 80039fa:	701a      	strb	r2, [r3, #0]
      break;
 80039fc:	e001      	b.n	8003a02 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80039fe:	bf00      	nop
 8003a00:	e000      	b.n	8003a04 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003a02:	bf00      	nop
  }
}
 8003a04:	bf00      	nop
 8003a06:	3728      	adds	r7, #40	; 0x28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	1ff80000 	.word	0x1ff80000

08003a10 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a3c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d10b      	bne.n	8003a60 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d102      	bne.n	8003a58 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f008 fd86 	bl	800c564 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f043 0302 	orr.w	r3, r3, #2
 8003a5e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d132      	bne.n	8003ad0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f043 0308 	orr.w	r3, r3, #8
 8003a70:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d126      	bne.n	8003aca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d113      	bne.n	8003aac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a8e:	d106      	bne.n	8003a9e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2102      	movs	r1, #2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f002 fef8 	bl	800688c <USB_InitFSLSPClkSel>
 8003a9c:	e011      	b.n	8003ac2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f002 fef1 	bl	800688c <USB_InitFSLSPClkSel>
 8003aaa:	e00a      	b.n	8003ac2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d106      	bne.n	8003ac2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aba:	461a      	mov	r2, r3
 8003abc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ac0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f008 fd7c 	bl	800c5c0 <HAL_HCD_PortEnabled_Callback>
 8003ac8:	e002      	b.n	8003ad0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f008 fd86 	bl	800c5dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d103      	bne.n	8003ae2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f043 0320 	orr.w	r3, r3, #32
 8003ae0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	6013      	str	r3, [r2, #0]
}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e11f      	b.n	8003d4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd f964 	bl	8000dec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2224      	movs	r2, #36	; 0x24
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b5c:	f001 f9de 	bl	8004f1c <HAL_RCC_GetPCLK1Freq>
 8003b60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4a7b      	ldr	r2, [pc, #492]	; (8003d54 <HAL_I2C_Init+0x25c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d807      	bhi.n	8003b7c <HAL_I2C_Init+0x84>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4a7a      	ldr	r2, [pc, #488]	; (8003d58 <HAL_I2C_Init+0x260>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	bf94      	ite	ls
 8003b74:	2301      	movls	r3, #1
 8003b76:	2300      	movhi	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	e006      	b.n	8003b8a <HAL_I2C_Init+0x92>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a77      	ldr	r2, [pc, #476]	; (8003d5c <HAL_I2C_Init+0x264>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	bf94      	ite	ls
 8003b84:	2301      	movls	r3, #1
 8003b86:	2300      	movhi	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e0db      	b.n	8003d4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a72      	ldr	r2, [pc, #456]	; (8003d60 <HAL_I2C_Init+0x268>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	0c9b      	lsrs	r3, r3, #18
 8003b9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4a64      	ldr	r2, [pc, #400]	; (8003d54 <HAL_I2C_Init+0x25c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d802      	bhi.n	8003bcc <HAL_I2C_Init+0xd4>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	e009      	b.n	8003be0 <HAL_I2C_Init+0xe8>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	4a63      	ldr	r2, [pc, #396]	; (8003d64 <HAL_I2C_Init+0x26c>)
 8003bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bdc:	099b      	lsrs	r3, r3, #6
 8003bde:	3301      	adds	r3, #1
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	430b      	orrs	r3, r1
 8003be6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4956      	ldr	r1, [pc, #344]	; (8003d54 <HAL_I2C_Init+0x25c>)
 8003bfc:	428b      	cmp	r3, r1
 8003bfe:	d80d      	bhi.n	8003c1c <HAL_I2C_Init+0x124>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1e59      	subs	r1, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	bf38      	it	cc
 8003c18:	2304      	movcc	r3, #4
 8003c1a:	e04f      	b.n	8003cbc <HAL_I2C_Init+0x1c4>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d111      	bne.n	8003c48 <HAL_I2C_Init+0x150>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1e58      	subs	r0, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	440b      	add	r3, r1
 8003c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c36:	3301      	adds	r3, #1
 8003c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e012      	b.n	8003c6e <HAL_I2C_Init+0x176>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e58      	subs	r0, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	0099      	lsls	r1, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Init+0x17e>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e022      	b.n	8003cbc <HAL_I2C_Init+0x1c4>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10e      	bne.n	8003c9c <HAL_I2C_Init+0x1a4>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1e58      	subs	r0, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6859      	ldr	r1, [r3, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	440b      	add	r3, r1
 8003c8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c90:	3301      	adds	r3, #1
 8003c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c9a:	e00f      	b.n	8003cbc <HAL_I2C_Init+0x1c4>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1e58      	subs	r0, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	0099      	lsls	r1, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	6809      	ldr	r1, [r1, #0]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6911      	ldr	r1, [r2, #16]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68d2      	ldr	r2, [r2, #12]
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	000186a0 	.word	0x000186a0
 8003d58:	001e847f 	.word	0x001e847f
 8003d5c:	003d08ff 	.word	0x003d08ff
 8003d60:	431bde83 	.word	0x431bde83
 8003d64:	10624dd3 	.word	0x10624dd3

08003d68 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e128      	b.n	8003fcc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a90      	ldr	r2, [pc, #576]	; (8003fd4 <HAL_I2S_Init+0x26c>)
 8003d92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7fd f871 	bl	8000e7c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003db0:	f023 030f 	bic.w	r3, r3, #15
 8003db4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d060      	beq.n	8003e88 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003dce:	2310      	movs	r3, #16
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	e001      	b.n	8003dd8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003dd4:	2320      	movs	r3, #32
 8003dd6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d802      	bhi.n	8003de6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003de6:	2001      	movs	r0, #1
 8003de8:	f001 f9d4 	bl	8005194 <HAL_RCCEx_GetPeriphCLKFreq>
 8003dec:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df6:	d125      	bne.n	8003e44 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d010      	beq.n	8003e22 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	461a      	mov	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	3305      	adds	r3, #5
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	e01f      	b.n	8003e62 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	461a      	mov	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	3305      	adds	r3, #5
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	e00e      	b.n	8003e62 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	461a      	mov	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	3305      	adds	r3, #5
 8003e60:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4a5c      	ldr	r2, [pc, #368]	; (8003fd8 <HAL_I2S_Init+0x270>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	08db      	lsrs	r3, r3, #3
 8003e6c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	e003      	b.n	8003e90 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d902      	bls.n	8003e9c <HAL_I2S_Init+0x134>
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	2bff      	cmp	r3, #255	; 0xff
 8003e9a:	d907      	bls.n	8003eac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea0:	f043 0210 	orr.w	r2, r3, #16
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e08f      	b.n	8003fcc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	ea42 0103 	orr.w	r1, r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003eca:	f023 030f 	bic.w	r3, r3, #15
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6851      	ldr	r1, [r2, #4]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6892      	ldr	r2, [r2, #8]
 8003ed6:	4311      	orrs	r1, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68d2      	ldr	r2, [r2, #12]
 8003edc:	4311      	orrs	r1, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6992      	ldr	r2, [r2, #24]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d161      	bne.n	8003fbc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a38      	ldr	r2, [pc, #224]	; (8003fdc <HAL_I2S_Init+0x274>)
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a37      	ldr	r2, [pc, #220]	; (8003fe0 <HAL_I2S_Init+0x278>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d101      	bne.n	8003f0c <HAL_I2S_Init+0x1a4>
 8003f08:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <HAL_I2S_Init+0x27c>)
 8003f0a:	e001      	b.n	8003f10 <HAL_I2S_Init+0x1a8>
 8003f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6812      	ldr	r2, [r2, #0]
 8003f16:	4932      	ldr	r1, [pc, #200]	; (8003fe0 <HAL_I2S_Init+0x278>)
 8003f18:	428a      	cmp	r2, r1
 8003f1a:	d101      	bne.n	8003f20 <HAL_I2S_Init+0x1b8>
 8003f1c:	4a31      	ldr	r2, [pc, #196]	; (8003fe4 <HAL_I2S_Init+0x27c>)
 8003f1e:	e001      	b.n	8003f24 <HAL_I2S_Init+0x1bc>
 8003f20:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f24:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f28:	f023 030f 	bic.w	r3, r3, #15
 8003f2c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a2b      	ldr	r2, [pc, #172]	; (8003fe0 <HAL_I2S_Init+0x278>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d101      	bne.n	8003f3c <HAL_I2S_Init+0x1d4>
 8003f38:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <HAL_I2S_Init+0x27c>)
 8003f3a:	e001      	b.n	8003f40 <HAL_I2S_Init+0x1d8>
 8003f3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f40:	2202      	movs	r2, #2
 8003f42:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a25      	ldr	r2, [pc, #148]	; (8003fe0 <HAL_I2S_Init+0x278>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d101      	bne.n	8003f52 <HAL_I2S_Init+0x1ea>
 8003f4e:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <HAL_I2S_Init+0x27c>)
 8003f50:	e001      	b.n	8003f56 <HAL_I2S_Init+0x1ee>
 8003f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f62:	d003      	beq.n	8003f6c <HAL_I2S_Init+0x204>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d103      	bne.n	8003f74 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	e001      	b.n	8003f78 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	b299      	uxth	r1, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003f8e:	4303      	orrs	r3, r0
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	430b      	orrs	r3, r1
 8003f94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003f96:	4313      	orrs	r3, r2
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	897b      	ldrh	r3, [r7, #10]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fa4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a0d      	ldr	r2, [pc, #52]	; (8003fe0 <HAL_I2S_Init+0x278>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d101      	bne.n	8003fb4 <HAL_I2S_Init+0x24c>
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_I2S_Init+0x27c>)
 8003fb2:	e001      	b.n	8003fb8 <HAL_I2S_Init+0x250>
 8003fb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb8:	897a      	ldrh	r2, [r7, #10]
 8003fba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3720      	adds	r7, #32
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	080040df 	.word	0x080040df
 8003fd8:	cccccccd 	.word	0xcccccccd
 8003fdc:	080041f5 	.word	0x080041f5
 8003fe0:	40003800 	.word	0x40003800
 8003fe4:	40003400 	.word	0x40003400

08003fe8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	881a      	ldrh	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	1c9a      	adds	r2, r3, #2
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10e      	bne.n	8004078 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004068:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff ffb8 	bl	8003fe8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	b292      	uxth	r2, r2
 8004094:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	1c9a      	adds	r2, r3, #2
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10e      	bne.n	80040d6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040c6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff ff93 	bl	8003ffc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d13a      	bne.n	8004170 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	d109      	bne.n	8004118 <I2S_IRQHandler+0x3a>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	d102      	bne.n	8004118 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff ffb4 	bl	8004080 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411e:	2b40      	cmp	r3, #64	; 0x40
 8004120:	d126      	bne.n	8004170 <I2S_IRQHandler+0x92>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b20      	cmp	r3, #32
 800412e:	d11f      	bne.n	8004170 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800413e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	f043 0202 	orr.w	r2, r3, #2
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff ff50 	bl	8004010 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b03      	cmp	r3, #3
 800417a:	d136      	bne.n	80041ea <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b02      	cmp	r3, #2
 8004184:	d109      	bne.n	800419a <I2S_IRQHandler+0xbc>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004190:	2b80      	cmp	r3, #128	; 0x80
 8004192:	d102      	bne.n	800419a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ff45 	bl	8004024 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d122      	bne.n	80041ea <I2S_IRQHandler+0x10c>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d11b      	bne.n	80041ea <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041c0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	f043 0204 	orr.w	r2, r3, #4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ff13 	bl	8004010 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041ea:	bf00      	nop
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4aa2      	ldr	r2, [pc, #648]	; (8004494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d101      	bne.n	8004212 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800420e:	4ba2      	ldr	r3, [pc, #648]	; (8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004210:	e001      	b.n	8004216 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004212:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a9b      	ldr	r2, [pc, #620]	; (8004494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d101      	bne.n	8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800422c:	4b9a      	ldr	r3, [pc, #616]	; (8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800422e:	e001      	b.n	8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004230:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004240:	d004      	beq.n	800424c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	f040 8099 	bne.w	800437e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b02      	cmp	r3, #2
 8004254:	d107      	bne.n	8004266 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f925 	bl	80044b0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	d107      	bne.n	8004280 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f9c8 	bl	8004610 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004286:	2b40      	cmp	r3, #64	; 0x40
 8004288:	d13a      	bne.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d035      	beq.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a7e      	ldr	r2, [pc, #504]	; (8004494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d101      	bne.n	80042a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800429e:	4b7e      	ldr	r3, [pc, #504]	; (8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042a0:	e001      	b.n	80042a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80042a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4979      	ldr	r1, [pc, #484]	; (8004494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042ae:	428b      	cmp	r3, r1
 80042b0:	d101      	bne.n	80042b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042b2:	4b79      	ldr	r3, [pc, #484]	; (8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042b4:	e001      	b.n	80042ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80042b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042be:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042ce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	f043 0202 	orr.w	r2, r3, #2
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff fe88 	bl	8004010 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b08      	cmp	r3, #8
 8004308:	f040 80be 	bne.w	8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 80b8 	beq.w	8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004326:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a59      	ldr	r2, [pc, #356]	; (8004494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d101      	bne.n	8004336 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004332:	4b59      	ldr	r3, [pc, #356]	; (8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004334:	e001      	b.n	800433a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004336:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4954      	ldr	r1, [pc, #336]	; (8004494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004342:	428b      	cmp	r3, r1
 8004344:	d101      	bne.n	800434a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004346:	4b54      	ldr	r3, [pc, #336]	; (8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004348:	e001      	b.n	800434e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800434a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800434e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004352:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004354:	2300      	movs	r3, #0
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	f043 0204 	orr.w	r2, r3, #4
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fe4a 	bl	8004010 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800437c:	e084      	b.n	8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b02      	cmp	r3, #2
 8004386:	d107      	bne.n	8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f8be 	bl	8004514 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d107      	bne.n	80043b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f8fd 	bl	80045ac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b40      	cmp	r3, #64	; 0x40
 80043ba:	d12f      	bne.n	800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d02a      	beq.n	800441c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043d4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2e      	ldr	r2, [pc, #184]	; (8004494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d101      	bne.n	80043e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80043e0:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043e2:	e001      	b.n	80043e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80043e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4929      	ldr	r1, [pc, #164]	; (8004494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043f0:	428b      	cmp	r3, r1
 80043f2:	d101      	bne.n	80043f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80043f4:	4b28      	ldr	r3, [pc, #160]	; (8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043f6:	e001      	b.n	80043fc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80043f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004400:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f043 0202 	orr.w	r2, r3, #2
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff fdfa 	bl	8004010 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b08      	cmp	r3, #8
 8004424:	d131      	bne.n	800448a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d02c      	beq.n	800448a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a17      	ldr	r2, [pc, #92]	; (8004494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d101      	bne.n	800443e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800443a:	4b17      	ldr	r3, [pc, #92]	; (8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800443c:	e001      	b.n	8004442 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800443e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4912      	ldr	r1, [pc, #72]	; (8004494 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800444a:	428b      	cmp	r3, r1
 800444c:	d101      	bne.n	8004452 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800444e:	4b12      	ldr	r3, [pc, #72]	; (8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004450:	e001      	b.n	8004456 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004452:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004456:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800445a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800446a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	f043 0204 	orr.w	r2, r3, #4
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff fdc5 	bl	8004010 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004486:	e000      	b.n	800448a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004488:	bf00      	nop
}
 800448a:	bf00      	nop
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40003800 	.word	0x40003800
 8004498:	40003400 	.word	0x40003400

0800449c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	1c99      	adds	r1, r3, #2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6251      	str	r1, [r2, #36]	; 0x24
 80044c2:	881a      	ldrh	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d113      	bne.n	800450a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff ffc9 	bl	800449c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	1c99      	adds	r1, r3, #2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6251      	str	r1, [r2, #36]	; 0x24
 8004526:	8819      	ldrh	r1, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1d      	ldr	r2, [pc, #116]	; (80045a4 <I2SEx_TxISR_I2SExt+0x90>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d101      	bne.n	8004536 <I2SEx_TxISR_I2SExt+0x22>
 8004532:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <I2SEx_TxISR_I2SExt+0x94>)
 8004534:	e001      	b.n	800453a <I2SEx_TxISR_I2SExt+0x26>
 8004536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800453a:	460a      	mov	r2, r1
 800453c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004542:	b29b      	uxth	r3, r3
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d121      	bne.n	800459a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a12      	ldr	r2, [pc, #72]	; (80045a4 <I2SEx_TxISR_I2SExt+0x90>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d101      	bne.n	8004564 <I2SEx_TxISR_I2SExt+0x50>
 8004560:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <I2SEx_TxISR_I2SExt+0x94>)
 8004562:	e001      	b.n	8004568 <I2SEx_TxISR_I2SExt+0x54>
 8004564:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	490d      	ldr	r1, [pc, #52]	; (80045a4 <I2SEx_TxISR_I2SExt+0x90>)
 8004570:	428b      	cmp	r3, r1
 8004572:	d101      	bne.n	8004578 <I2SEx_TxISR_I2SExt+0x64>
 8004574:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <I2SEx_TxISR_I2SExt+0x94>)
 8004576:	e001      	b.n	800457c <I2SEx_TxISR_I2SExt+0x68>
 8004578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800457c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004580:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d106      	bne.n	800459a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff ff81 	bl	800449c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800459a:	bf00      	nop
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40003800 	.word	0x40003800
 80045a8:	40003400 	.word	0x40003400

080045ac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68d8      	ldr	r0, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	1c99      	adds	r1, r3, #2
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045c4:	b282      	uxth	r2, r0
 80045c6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d113      	bne.n	8004608 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045ee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff ff4a 	bl	800449c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004608:	bf00      	nop
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a20      	ldr	r2, [pc, #128]	; (80046a0 <I2SEx_RxISR_I2SExt+0x90>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d101      	bne.n	8004626 <I2SEx_RxISR_I2SExt+0x16>
 8004622:	4b20      	ldr	r3, [pc, #128]	; (80046a4 <I2SEx_RxISR_I2SExt+0x94>)
 8004624:	e001      	b.n	800462a <I2SEx_RxISR_I2SExt+0x1a>
 8004626:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800462a:	68d8      	ldr	r0, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	1c99      	adds	r1, r3, #2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004636:	b282      	uxth	r2, r0
 8004638:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d121      	bne.n	8004696 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a12      	ldr	r2, [pc, #72]	; (80046a0 <I2SEx_RxISR_I2SExt+0x90>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d101      	bne.n	8004660 <I2SEx_RxISR_I2SExt+0x50>
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <I2SEx_RxISR_I2SExt+0x94>)
 800465e:	e001      	b.n	8004664 <I2SEx_RxISR_I2SExt+0x54>
 8004660:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	490d      	ldr	r1, [pc, #52]	; (80046a0 <I2SEx_RxISR_I2SExt+0x90>)
 800466c:	428b      	cmp	r3, r1
 800466e:	d101      	bne.n	8004674 <I2SEx_RxISR_I2SExt+0x64>
 8004670:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <I2SEx_RxISR_I2SExt+0x94>)
 8004672:	e001      	b.n	8004678 <I2SEx_RxISR_I2SExt+0x68>
 8004674:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004678:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800467c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff ff03 	bl	800449c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40003800 	.word	0x40003800
 80046a4:	40003400 	.word	0x40003400

080046a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e25b      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d075      	beq.n	80047b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046c6:	4ba3      	ldr	r3, [pc, #652]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d00c      	beq.n	80046ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046d2:	4ba0      	ldr	r3, [pc, #640]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d112      	bne.n	8004704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046de:	4b9d      	ldr	r3, [pc, #628]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ea:	d10b      	bne.n	8004704 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ec:	4b99      	ldr	r3, [pc, #612]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d05b      	beq.n	80047b0 <HAL_RCC_OscConfig+0x108>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d157      	bne.n	80047b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e236      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470c:	d106      	bne.n	800471c <HAL_RCC_OscConfig+0x74>
 800470e:	4b91      	ldr	r3, [pc, #580]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a90      	ldr	r2, [pc, #576]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	e01d      	b.n	8004758 <HAL_RCC_OscConfig+0xb0>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x98>
 8004726:	4b8b      	ldr	r3, [pc, #556]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a8a      	ldr	r2, [pc, #552]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 800472c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	4b88      	ldr	r3, [pc, #544]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a87      	ldr	r2, [pc, #540]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e00b      	b.n	8004758 <HAL_RCC_OscConfig+0xb0>
 8004740:	4b84      	ldr	r3, [pc, #528]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a83      	ldr	r2, [pc, #524]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	4b81      	ldr	r3, [pc, #516]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a80      	ldr	r2, [pc, #512]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d013      	beq.n	8004788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7fc fe2a 	bl	80013b8 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004768:	f7fc fe26 	bl	80013b8 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b64      	cmp	r3, #100	; 0x64
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e1fb      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477a:	4b76      	ldr	r3, [pc, #472]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCC_OscConfig+0xc0>
 8004786:	e014      	b.n	80047b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7fc fe16 	bl	80013b8 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004790:	f7fc fe12 	bl	80013b8 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	; 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e1e7      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047a2:	4b6c      	ldr	r3, [pc, #432]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0xe8>
 80047ae:	e000      	b.n	80047b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d063      	beq.n	8004886 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047be:	4b65      	ldr	r3, [pc, #404]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00b      	beq.n	80047e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ca:	4b62      	ldr	r3, [pc, #392]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d11c      	bne.n	8004810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047d6:	4b5f      	ldr	r3, [pc, #380]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d116      	bne.n	8004810 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e2:	4b5c      	ldr	r3, [pc, #368]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <HAL_RCC_OscConfig+0x152>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d001      	beq.n	80047fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e1bb      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fa:	4b56      	ldr	r3, [pc, #344]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	4952      	ldr	r1, [pc, #328]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 800480a:	4313      	orrs	r3, r2
 800480c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480e:	e03a      	b.n	8004886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d020      	beq.n	800485a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004818:	4b4f      	ldr	r3, [pc, #316]	; (8004958 <HAL_RCC_OscConfig+0x2b0>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481e:	f7fc fdcb 	bl	80013b8 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004826:	f7fc fdc7 	bl	80013b8 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e19c      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004838:	4b46      	ldr	r3, [pc, #280]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004844:	4b43      	ldr	r3, [pc, #268]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	4940      	ldr	r1, [pc, #256]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004854:	4313      	orrs	r3, r2
 8004856:	600b      	str	r3, [r1, #0]
 8004858:	e015      	b.n	8004886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800485a:	4b3f      	ldr	r3, [pc, #252]	; (8004958 <HAL_RCC_OscConfig+0x2b0>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fc fdaa 	bl	80013b8 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004868:	f7fc fda6 	bl	80013b8 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e17b      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800487a:	4b36      	ldr	r3, [pc, #216]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d030      	beq.n	80048f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d016      	beq.n	80048c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800489a:	4b30      	ldr	r3, [pc, #192]	; (800495c <HAL_RCC_OscConfig+0x2b4>)
 800489c:	2201      	movs	r2, #1
 800489e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a0:	f7fc fd8a 	bl	80013b8 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048a8:	f7fc fd86 	bl	80013b8 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e15b      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ba:	4b26      	ldr	r3, [pc, #152]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f0      	beq.n	80048a8 <HAL_RCC_OscConfig+0x200>
 80048c6:	e015      	b.n	80048f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c8:	4b24      	ldr	r3, [pc, #144]	; (800495c <HAL_RCC_OscConfig+0x2b4>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ce:	f7fc fd73 	bl	80013b8 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d6:	f7fc fd6f 	bl	80013b8 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e144      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e8:	4b1a      	ldr	r3, [pc, #104]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80048ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1f0      	bne.n	80048d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a0 	beq.w	8004a42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004902:	2300      	movs	r3, #0
 8004904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004906:	4b13      	ldr	r3, [pc, #76]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10f      	bne.n	8004932 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	4a0e      	ldr	r2, [pc, #56]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 800491c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004920:	6413      	str	r3, [r2, #64]	; 0x40
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004932:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_OscConfig+0x2b8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d121      	bne.n	8004982 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800493e:	4b08      	ldr	r3, [pc, #32]	; (8004960 <HAL_RCC_OscConfig+0x2b8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a07      	ldr	r2, [pc, #28]	; (8004960 <HAL_RCC_OscConfig+0x2b8>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800494a:	f7fc fd35 	bl	80013b8 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004950:	e011      	b.n	8004976 <HAL_RCC_OscConfig+0x2ce>
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800
 8004958:	42470000 	.word	0x42470000
 800495c:	42470e80 	.word	0x42470e80
 8004960:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004964:	f7fc fd28 	bl	80013b8 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e0fd      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004976:	4b81      	ldr	r3, [pc, #516]	; (8004b7c <HAL_RCC_OscConfig+0x4d4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d106      	bne.n	8004998 <HAL_RCC_OscConfig+0x2f0>
 800498a:	4b7d      	ldr	r3, [pc, #500]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	4a7c      	ldr	r2, [pc, #496]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	6713      	str	r3, [r2, #112]	; 0x70
 8004996:	e01c      	b.n	80049d2 <HAL_RCC_OscConfig+0x32a>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b05      	cmp	r3, #5
 800499e:	d10c      	bne.n	80049ba <HAL_RCC_OscConfig+0x312>
 80049a0:	4b77      	ldr	r3, [pc, #476]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 80049a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a4:	4a76      	ldr	r2, [pc, #472]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 80049a6:	f043 0304 	orr.w	r3, r3, #4
 80049aa:	6713      	str	r3, [r2, #112]	; 0x70
 80049ac:	4b74      	ldr	r3, [pc, #464]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b0:	4a73      	ldr	r2, [pc, #460]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	6713      	str	r3, [r2, #112]	; 0x70
 80049b8:	e00b      	b.n	80049d2 <HAL_RCC_OscConfig+0x32a>
 80049ba:	4b71      	ldr	r3, [pc, #452]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	4a70      	ldr	r2, [pc, #448]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	6713      	str	r3, [r2, #112]	; 0x70
 80049c6:	4b6e      	ldr	r3, [pc, #440]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	4a6d      	ldr	r2, [pc, #436]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 80049cc:	f023 0304 	bic.w	r3, r3, #4
 80049d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d015      	beq.n	8004a06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049da:	f7fc fced 	bl	80013b8 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e0:	e00a      	b.n	80049f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e2:	f7fc fce9 	bl	80013b8 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e0bc      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f8:	4b61      	ldr	r3, [pc, #388]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0ee      	beq.n	80049e2 <HAL_RCC_OscConfig+0x33a>
 8004a04:	e014      	b.n	8004a30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a06:	f7fc fcd7 	bl	80013b8 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a0c:	e00a      	b.n	8004a24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a0e:	f7fc fcd3 	bl	80013b8 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e0a6      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a24:	4b56      	ldr	r3, [pc, #344]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 8004a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1ee      	bne.n	8004a0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d105      	bne.n	8004a42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a36:	4b52      	ldr	r3, [pc, #328]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	4a51      	ldr	r2, [pc, #324]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 8004a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 8092 	beq.w	8004b70 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a4c:	4b4c      	ldr	r3, [pc, #304]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 030c 	and.w	r3, r3, #12
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d05c      	beq.n	8004b12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d141      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a60:	4b48      	ldr	r3, [pc, #288]	; (8004b84 <HAL_RCC_OscConfig+0x4dc>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a66:	f7fc fca7 	bl	80013b8 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a6e:	f7fc fca3 	bl	80013b8 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e078      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a80:	4b3f      	ldr	r3, [pc, #252]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f0      	bne.n	8004a6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	019b      	lsls	r3, r3, #6
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	085b      	lsrs	r3, r3, #1
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	041b      	lsls	r3, r3, #16
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	061b      	lsls	r3, r3, #24
 8004ab0:	4933      	ldr	r1, [pc, #204]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ab6:	4b33      	ldr	r3, [pc, #204]	; (8004b84 <HAL_RCC_OscConfig+0x4dc>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abc:	f7fc fc7c 	bl	80013b8 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac4:	f7fc fc78 	bl	80013b8 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e04d      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad6:	4b2a      	ldr	r3, [pc, #168]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x41c>
 8004ae2:	e045      	b.n	8004b70 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae4:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <HAL_RCC_OscConfig+0x4dc>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aea:	f7fc fc65 	bl	80013b8 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af2:	f7fc fc61 	bl	80013b8 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e036      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b04:	4b1e      	ldr	r3, [pc, #120]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f0      	bne.n	8004af2 <HAL_RCC_OscConfig+0x44a>
 8004b10:	e02e      	b.n	8004b70 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e029      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b1e:	4b18      	ldr	r3, [pc, #96]	; (8004b80 <HAL_RCC_OscConfig+0x4d8>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d11c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d115      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b46:	4013      	ands	r3, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d10d      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d106      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40007000 	.word	0x40007000
 8004b80:	40023800 	.word	0x40023800
 8004b84:	42470060 	.word	0x42470060

08004b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0cc      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b9c:	4b68      	ldr	r3, [pc, #416]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 030f 	and.w	r3, r3, #15
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d90c      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004baa:	4b65      	ldr	r3, [pc, #404]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb2:	4b63      	ldr	r3, [pc, #396]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0b8      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d020      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bdc:	4b59      	ldr	r3, [pc, #356]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4a58      	ldr	r2, [pc, #352]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bf4:	4b53      	ldr	r3, [pc, #332]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	4a52      	ldr	r2, [pc, #328]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c00:	4b50      	ldr	r3, [pc, #320]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	494d      	ldr	r1, [pc, #308]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d044      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d107      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c26:	4b47      	ldr	r3, [pc, #284]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d119      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e07f      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d003      	beq.n	8004c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c46:	4b3f      	ldr	r3, [pc, #252]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e06f      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c56:	4b3b      	ldr	r3, [pc, #236]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e067      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c66:	4b37      	ldr	r3, [pc, #220]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f023 0203 	bic.w	r2, r3, #3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	4934      	ldr	r1, [pc, #208]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c78:	f7fc fb9e 	bl	80013b8 <HAL_GetTick>
 8004c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7e:	e00a      	b.n	8004c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c80:	f7fc fb9a 	bl	80013b8 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e04f      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c96:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 020c 	and.w	r2, r3, #12
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d1eb      	bne.n	8004c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca8:	4b25      	ldr	r3, [pc, #148]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d20c      	bcs.n	8004cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb6:	4b22      	ldr	r3, [pc, #136]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cbe:	4b20      	ldr	r3, [pc, #128]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e032      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cdc:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	4916      	ldr	r1, [pc, #88]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	490e      	ldr	r1, [pc, #56]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d0e:	f000 f821 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8004d12:	4601      	mov	r1, r0
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	091b      	lsrs	r3, r3, #4
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	4a0a      	ldr	r2, [pc, #40]	; (8004d48 <HAL_RCC_ClockConfig+0x1c0>)
 8004d20:	5cd3      	ldrb	r3, [r2, r3]
 8004d22:	fa21 f303 	lsr.w	r3, r1, r3
 8004d26:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fc fa12 	bl	8001158 <HAL_InitTick>

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40023c00 	.word	0x40023c00
 8004d44:	40023800 	.word	0x40023800
 8004d48:	0800cce8 	.word	0x0800cce8
 8004d4c:	20000000 	.word	0x20000000
 8004d50:	20000004 	.word	0x20000004

08004d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	607b      	str	r3, [r7, #4]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	2300      	movs	r3, #0
 8004d64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d6a:	4b63      	ldr	r3, [pc, #396]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d007      	beq.n	8004d86 <HAL_RCC_GetSysClockFreq+0x32>
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d008      	beq.n	8004d8c <HAL_RCC_GetSysClockFreq+0x38>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f040 80b4 	bne.w	8004ee8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d80:	4b5e      	ldr	r3, [pc, #376]	; (8004efc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d82:	60bb      	str	r3, [r7, #8]
       break;
 8004d84:	e0b3      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d86:	4b5e      	ldr	r3, [pc, #376]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004d88:	60bb      	str	r3, [r7, #8]
      break;
 8004d8a:	e0b0      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d8c:	4b5a      	ldr	r3, [pc, #360]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d96:	4b58      	ldr	r3, [pc, #352]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d04a      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da2:	4b55      	ldr	r3, [pc, #340]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	099b      	lsrs	r3, r3, #6
 8004da8:	f04f 0400 	mov.w	r4, #0
 8004dac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	ea03 0501 	and.w	r5, r3, r1
 8004db8:	ea04 0602 	and.w	r6, r4, r2
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	4632      	mov	r2, r6
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	f04f 0400 	mov.w	r4, #0
 8004dc8:	0154      	lsls	r4, r2, #5
 8004dca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004dce:	014b      	lsls	r3, r1, #5
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	1b49      	subs	r1, r1, r5
 8004dd6:	eb62 0206 	sbc.w	r2, r2, r6
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	f04f 0400 	mov.w	r4, #0
 8004de2:	0194      	lsls	r4, r2, #6
 8004de4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004de8:	018b      	lsls	r3, r1, #6
 8004dea:	1a5b      	subs	r3, r3, r1
 8004dec:	eb64 0402 	sbc.w	r4, r4, r2
 8004df0:	f04f 0100 	mov.w	r1, #0
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	00e2      	lsls	r2, r4, #3
 8004dfa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004dfe:	00d9      	lsls	r1, r3, #3
 8004e00:	460b      	mov	r3, r1
 8004e02:	4614      	mov	r4, r2
 8004e04:	195b      	adds	r3, r3, r5
 8004e06:	eb44 0406 	adc.w	r4, r4, r6
 8004e0a:	f04f 0100 	mov.w	r1, #0
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	0262      	lsls	r2, r4, #9
 8004e14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004e18:	0259      	lsls	r1, r3, #9
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4614      	mov	r4, r2
 8004e1e:	4618      	mov	r0, r3
 8004e20:	4621      	mov	r1, r4
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f04f 0400 	mov.w	r4, #0
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4623      	mov	r3, r4
 8004e2c:	f7fb f9d0 	bl	80001d0 <__aeabi_uldivmod>
 8004e30:	4603      	mov	r3, r0
 8004e32:	460c      	mov	r4, r1
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	e049      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e38:	4b2f      	ldr	r3, [pc, #188]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	099b      	lsrs	r3, r3, #6
 8004e3e:	f04f 0400 	mov.w	r4, #0
 8004e42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	ea03 0501 	and.w	r5, r3, r1
 8004e4e:	ea04 0602 	and.w	r6, r4, r2
 8004e52:	4629      	mov	r1, r5
 8004e54:	4632      	mov	r2, r6
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	f04f 0400 	mov.w	r4, #0
 8004e5e:	0154      	lsls	r4, r2, #5
 8004e60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e64:	014b      	lsls	r3, r1, #5
 8004e66:	4619      	mov	r1, r3
 8004e68:	4622      	mov	r2, r4
 8004e6a:	1b49      	subs	r1, r1, r5
 8004e6c:	eb62 0206 	sbc.w	r2, r2, r6
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	f04f 0400 	mov.w	r4, #0
 8004e78:	0194      	lsls	r4, r2, #6
 8004e7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e7e:	018b      	lsls	r3, r1, #6
 8004e80:	1a5b      	subs	r3, r3, r1
 8004e82:	eb64 0402 	sbc.w	r4, r4, r2
 8004e86:	f04f 0100 	mov.w	r1, #0
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	00e2      	lsls	r2, r4, #3
 8004e90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e94:	00d9      	lsls	r1, r3, #3
 8004e96:	460b      	mov	r3, r1
 8004e98:	4614      	mov	r4, r2
 8004e9a:	195b      	adds	r3, r3, r5
 8004e9c:	eb44 0406 	adc.w	r4, r4, r6
 8004ea0:	f04f 0100 	mov.w	r1, #0
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	02a2      	lsls	r2, r4, #10
 8004eaa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004eae:	0299      	lsls	r1, r3, #10
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4614      	mov	r4, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f04f 0400 	mov.w	r4, #0
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	4623      	mov	r3, r4
 8004ec2:	f7fb f985 	bl	80001d0 <__aeabi_uldivmod>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	460c      	mov	r4, r1
 8004eca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	60bb      	str	r3, [r7, #8]
      break;
 8004ee6:	e002      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ee8:	4b04      	ldr	r3, [pc, #16]	; (8004efc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004eea:	60bb      	str	r3, [r7, #8]
      break;
 8004eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eee:	68bb      	ldr	r3, [r7, #8]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	00f42400 	.word	0x00f42400
 8004f00:	007a1200 	.word	0x007a1200

08004f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f08:	4b03      	ldr	r3, [pc, #12]	; (8004f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	20000000 	.word	0x20000000

08004f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f20:	f7ff fff0 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8004f24:	4601      	mov	r1, r0
 8004f26:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	0a9b      	lsrs	r3, r3, #10
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	4a03      	ldr	r2, [pc, #12]	; (8004f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f32:	5cd3      	ldrb	r3, [r2, r3]
 8004f34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	0800ccf8 	.word	0x0800ccf8

08004f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f48:	f7ff ffdc 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8004f4c:	4601      	mov	r1, r0
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	0b5b      	lsrs	r3, r3, #13
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	4a03      	ldr	r2, [pc, #12]	; (8004f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f5a:	5cd3      	ldrb	r3, [r2, r3]
 8004f5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40023800 	.word	0x40023800
 8004f68:	0800ccf8 	.word	0x0800ccf8

08004f6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	220f      	movs	r2, #15
 8004f7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f7c:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 0203 	and.w	r2, r3, #3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f88:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f94:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004fa0:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	08db      	lsrs	r3, r3, #3
 8004fa6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fae:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <HAL_RCC_GetClockConfig+0x60>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 020f 	and.w	r2, r3, #15
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	601a      	str	r2, [r3, #0]
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	40023c00 	.word	0x40023c00

08004fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d035      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ff8:	4b62      	ldr	r3, [pc, #392]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ffe:	f7fc f9db 	bl	80013b8 <HAL_GetTick>
 8005002:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005006:	f7fc f9d7 	bl	80013b8 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e0b0      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005018:	4b5b      	ldr	r3, [pc, #364]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f0      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	019a      	lsls	r2, r3, #6
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	071b      	lsls	r3, r3, #28
 8005030:	4955      	ldr	r1, [pc, #340]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005038:	4b52      	ldr	r3, [pc, #328]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800503a:	2201      	movs	r2, #1
 800503c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800503e:	f7fc f9bb 	bl	80013b8 <HAL_GetTick>
 8005042:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005044:	e008      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005046:	f7fc f9b7 	bl	80013b8 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e090      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005058:	4b4b      	ldr	r3, [pc, #300]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0f0      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8083 	beq.w	8005178 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	4b44      	ldr	r3, [pc, #272]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	4a43      	ldr	r2, [pc, #268]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800507c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005080:	6413      	str	r3, [r2, #64]	; 0x40
 8005082:	4b41      	ldr	r3, [pc, #260]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800508e:	4b3f      	ldr	r3, [pc, #252]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a3e      	ldr	r2, [pc, #248]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005098:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800509a:	f7fc f98d 	bl	80013b8 <HAL_GetTick>
 800509e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050a2:	f7fc f989 	bl	80013b8 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e062      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050b4:	4b35      	ldr	r3, [pc, #212]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050c0:	4b31      	ldr	r3, [pc, #196]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d02f      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d028      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050de:	4b2a      	ldr	r3, [pc, #168]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050e8:	4b29      	ldr	r3, [pc, #164]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050ee:	4b28      	ldr	r3, [pc, #160]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050f4:	4a24      	ldr	r2, [pc, #144]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050fa:	4b23      	ldr	r3, [pc, #140]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b01      	cmp	r3, #1
 8005104:	d114      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005106:	f7fc f957 	bl	80013b8 <HAL_GetTick>
 800510a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800510c:	e00a      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800510e:	f7fc f953 	bl	80013b8 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	f241 3288 	movw	r2, #5000	; 0x1388
 800511c:	4293      	cmp	r3, r2
 800511e:	d901      	bls.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e02a      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005124:	4b18      	ldr	r3, [pc, #96]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0ee      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800513c:	d10d      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800513e:	4b12      	ldr	r3, [pc, #72]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800514e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005152:	490d      	ldr	r1, [pc, #52]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005154:	4313      	orrs	r3, r2
 8005156:	608b      	str	r3, [r1, #8]
 8005158:	e005      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800515a:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	4a0a      	ldr	r2, [pc, #40]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005160:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005164:	6093      	str	r3, [r2, #8]
 8005166:	4b08      	ldr	r3, [pc, #32]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005168:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005172:	4905      	ldr	r1, [pc, #20]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005174:	4313      	orrs	r3, r2
 8005176:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	42470068 	.word	0x42470068
 8005188:	40023800 	.word	0x40023800
 800518c:	40007000 	.word	0x40007000
 8005190:	42470e40 	.word	0x42470e40

08005194 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d13d      	bne.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80051b2:	4b22      	ldr	r3, [pc, #136]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051ba:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d004      	beq.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d12f      	bne.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80051c6:	4b1e      	ldr	r3, [pc, #120]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051c8:	617b      	str	r3, [r7, #20]
          break;
 80051ca:	e02f      	b.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80051cc:	4b1b      	ldr	r3, [pc, #108]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d8:	d108      	bne.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051da:	4b18      	ldr	r3, [pc, #96]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e2:	4a18      	ldr	r2, [pc, #96]	; (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	e007      	b.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051ec:	4b13      	ldr	r3, [pc, #76]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051f4:	4a14      	ldr	r2, [pc, #80]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fa:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80051fc:	4b0f      	ldr	r3, [pc, #60]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80051fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005202:	099b      	lsrs	r3, r3, #6
 8005204:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	fb02 f303 	mul.w	r3, r2, r3
 800520e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005210:	4b0a      	ldr	r3, [pc, #40]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005216:	0f1b      	lsrs	r3, r3, #28
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005222:	617b      	str	r3, [r7, #20]
          break;
 8005224:	e002      	b.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
          break;
 800522a:	bf00      	nop
        }
      }
      break;
 800522c:	bf00      	nop
    }
  }
  return frequency;
 800522e:	697b      	ldr	r3, [r7, #20]
}
 8005230:	4618      	mov	r0, r3
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	40023800 	.word	0x40023800
 8005240:	00bb8000 	.word	0x00bb8000
 8005244:	007a1200 	.word	0x007a1200
 8005248:	00f42400 	.word	0x00f42400

0800524c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e056      	b.n	800530c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d106      	bne.n	800527e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7fb fe67 	bl	8000f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2202      	movs	r2, #2
 8005282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005294:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	ea42 0103 	orr.w	r1, r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	0c1b      	lsrs	r3, r3, #16
 80052dc:	f003 0104 	and.w	r1, r3, #4
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08c      	sub	sp, #48	; 0x30
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005322:	2301      	movs	r3, #1
 8005324:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_SPI_TransmitReceive+0x26>
 8005336:	2302      	movs	r3, #2
 8005338:	e18a      	b.n	8005650 <HAL_SPI_TransmitReceive+0x33c>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005342:	f7fc f839 	bl	80013b8 <HAL_GetTick>
 8005346:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800534e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005358:	887b      	ldrh	r3, [r7, #2]
 800535a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800535c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005360:	2b01      	cmp	r3, #1
 8005362:	d00f      	beq.n	8005384 <HAL_SPI_TransmitReceive+0x70>
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800536a:	d107      	bne.n	800537c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d103      	bne.n	800537c <HAL_SPI_TransmitReceive+0x68>
 8005374:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005378:	2b04      	cmp	r3, #4
 800537a:	d003      	beq.n	8005384 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800537c:	2302      	movs	r3, #2
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005382:	e15b      	b.n	800563c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <HAL_SPI_TransmitReceive+0x82>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <HAL_SPI_TransmitReceive+0x82>
 8005390:	887b      	ldrh	r3, [r7, #2]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d103      	bne.n	800539e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800539c:	e14e      	b.n	800563c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d003      	beq.n	80053b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2205      	movs	r2, #5
 80053ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	887a      	ldrh	r2, [r7, #2]
 80053c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	887a      	ldrh	r2, [r7, #2]
 80053c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	887a      	ldrh	r2, [r7, #2]
 80053d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	887a      	ldrh	r2, [r7, #2]
 80053da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f2:	2b40      	cmp	r3, #64	; 0x40
 80053f4:	d007      	beq.n	8005406 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005404:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800540e:	d178      	bne.n	8005502 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <HAL_SPI_TransmitReceive+0x10a>
 8005418:	8b7b      	ldrh	r3, [r7, #26]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d166      	bne.n	80054ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	881a      	ldrh	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	1c9a      	adds	r2, r3, #2
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005442:	e053      	b.n	80054ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b02      	cmp	r3, #2
 8005450:	d11b      	bne.n	800548a <HAL_SPI_TransmitReceive+0x176>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d016      	beq.n	800548a <HAL_SPI_TransmitReceive+0x176>
 800545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545e:	2b01      	cmp	r3, #1
 8005460:	d113      	bne.n	800548a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005466:	881a      	ldrh	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	1c9a      	adds	r2, r3, #2
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b01      	cmp	r3, #1
 8005496:	d119      	bne.n	80054cc <HAL_SPI_TransmitReceive+0x1b8>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d014      	beq.n	80054cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	b292      	uxth	r2, r2
 80054ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	1c9a      	adds	r2, r3, #2
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054c8:	2301      	movs	r3, #1
 80054ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054cc:	f7fb ff74 	bl	80013b8 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054d8:	429a      	cmp	r2, r3
 80054da:	d807      	bhi.n	80054ec <HAL_SPI_TransmitReceive+0x1d8>
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e2:	d003      	beq.n	80054ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054ea:	e0a7      	b.n	800563c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1a6      	bne.n	8005444 <HAL_SPI_TransmitReceive+0x130>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1a1      	bne.n	8005444 <HAL_SPI_TransmitReceive+0x130>
 8005500:	e07c      	b.n	80055fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_SPI_TransmitReceive+0x1fc>
 800550a:	8b7b      	ldrh	r3, [r7, #26]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d16b      	bne.n	80055e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	7812      	ldrb	r2, [r2, #0]
 800551c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005536:	e057      	b.n	80055e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d11c      	bne.n	8005580 <HAL_SPI_TransmitReceive+0x26c>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800554a:	b29b      	uxth	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d017      	beq.n	8005580 <HAL_SPI_TransmitReceive+0x26c>
 8005550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005552:	2b01      	cmp	r3, #1
 8005554:	d114      	bne.n	8005580 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	330c      	adds	r3, #12
 8005560:	7812      	ldrb	r2, [r2, #0]
 8005562:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b01      	cmp	r3, #1
 800558c:	d119      	bne.n	80055c2 <HAL_SPI_TransmitReceive+0x2ae>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d014      	beq.n	80055c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055be:	2301      	movs	r3, #1
 80055c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055c2:	f7fb fef9 	bl	80013b8 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d803      	bhi.n	80055da <HAL_SPI_TransmitReceive+0x2c6>
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d102      	bne.n	80055e0 <HAL_SPI_TransmitReceive+0x2cc>
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d103      	bne.n	80055e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055e6:	e029      	b.n	800563c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1a2      	bne.n	8005538 <HAL_SPI_TransmitReceive+0x224>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d19d      	bne.n	8005538 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f893 	bl	800572c <SPI_EndRxTxTransaction>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d006      	beq.n	800561a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005618:	e010      	b.n	800563c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10b      	bne.n	800563a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	e000      	b.n	800563c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800563a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800564c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005650:	4618      	mov	r0, r3
 8005652:	3730      	adds	r7, #48	; 0x30
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005668:	e04c      	b.n	8005704 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d048      	beq.n	8005704 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005672:	f7fb fea1 	bl	80013b8 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d902      	bls.n	8005688 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d13d      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005696:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a0:	d111      	bne.n	80056c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056aa:	d004      	beq.n	80056b6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b4:	d107      	bne.n	80056c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ce:	d10f      	bne.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e00f      	b.n	8005724 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	4013      	ands	r3, r2
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	429a      	cmp	r2, r3
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	79fb      	ldrb	r3, [r7, #7]
 800571e:	429a      	cmp	r2, r3
 8005720:	d1a3      	bne.n	800566a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af02      	add	r7, sp, #8
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005738:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <SPI_EndRxTxTransaction+0x7c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <SPI_EndRxTxTransaction+0x80>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	0d5b      	lsrs	r3, r3, #21
 8005744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005748:	fb02 f303 	mul.w	r3, r2, r3
 800574c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005756:	d112      	bne.n	800577e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2200      	movs	r2, #0
 8005760:	2180      	movs	r1, #128	; 0x80
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff ff78 	bl	8005658 <SPI_WaitFlagStateUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d016      	beq.n	800579c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e00f      	b.n	800579e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	3b01      	subs	r3, #1
 8005788:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005794:	2b80      	cmp	r3, #128	; 0x80
 8005796:	d0f2      	beq.n	800577e <SPI_EndRxTxTransaction+0x52>
 8005798:	e000      	b.n	800579c <SPI_EndRxTxTransaction+0x70>
        break;
 800579a:	bf00      	nop
  }

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000000 	.word	0x20000000
 80057ac:	165e9f81 	.word	0x165e9f81

080057b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e01d      	b.n	80057fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f815 	bl	8005806 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3304      	adds	r3, #4
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f000 f968 	bl	8005ac4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800581a:	b480      	push	{r7}
 800581c:	b085      	sub	sp, #20
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0201 	orr.w	r2, r2, #1
 8005830:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b06      	cmp	r3, #6
 8005842:	d007      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b02      	cmp	r3, #2
 8005876:	d122      	bne.n	80058be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b02      	cmp	r3, #2
 8005884:	d11b      	bne.n	80058be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f06f 0202 	mvn.w	r2, #2
 800588e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f8ee 	bl	8005a86 <HAL_TIM_IC_CaptureCallback>
 80058aa:	e005      	b.n	80058b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f8e0 	bl	8005a72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f8f1 	bl	8005a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d122      	bne.n	8005912 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d11b      	bne.n	8005912 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f06f 0204 	mvn.w	r2, #4
 80058e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f8c4 	bl	8005a86 <HAL_TIM_IC_CaptureCallback>
 80058fe:	e005      	b.n	800590c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f8b6 	bl	8005a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f8c7 	bl	8005a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b08      	cmp	r3, #8
 800591e:	d122      	bne.n	8005966 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b08      	cmp	r3, #8
 800592c:	d11b      	bne.n	8005966 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f06f 0208 	mvn.w	r2, #8
 8005936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2204      	movs	r2, #4
 800593c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	f003 0303 	and.w	r3, r3, #3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f89a 	bl	8005a86 <HAL_TIM_IC_CaptureCallback>
 8005952:	e005      	b.n	8005960 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f88c 	bl	8005a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f89d 	bl	8005a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b10      	cmp	r3, #16
 8005972:	d122      	bne.n	80059ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f003 0310 	and.w	r3, r3, #16
 800597e:	2b10      	cmp	r3, #16
 8005980:	d11b      	bne.n	80059ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f06f 0210 	mvn.w	r2, #16
 800598a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2208      	movs	r2, #8
 8005990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f870 	bl	8005a86 <HAL_TIM_IC_CaptureCallback>
 80059a6:	e005      	b.n	80059b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f862 	bl	8005a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f873 	bl	8005a9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d10e      	bne.n	80059e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d107      	bne.n	80059e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f06f 0201 	mvn.w	r2, #1
 80059de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7fb f97d 	bl	8000ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f0:	2b80      	cmp	r3, #128	; 0x80
 80059f2:	d10e      	bne.n	8005a12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fe:	2b80      	cmp	r3, #128	; 0x80
 8005a00:	d107      	bne.n	8005a12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f903 	bl	8005c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1c:	2b40      	cmp	r3, #64	; 0x40
 8005a1e:	d10e      	bne.n	8005a3e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b40      	cmp	r3, #64	; 0x40
 8005a2c:	d107      	bne.n	8005a3e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f838 	bl	8005aae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	d10e      	bne.n	8005a6a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d107      	bne.n	8005a6a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f06f 0220 	mvn.w	r2, #32
 8005a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f8cd 	bl	8005c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a40      	ldr	r2, [pc, #256]	; (8005bd8 <TIM_Base_SetConfig+0x114>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d013      	beq.n	8005b04 <TIM_Base_SetConfig+0x40>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae2:	d00f      	beq.n	8005b04 <TIM_Base_SetConfig+0x40>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a3d      	ldr	r2, [pc, #244]	; (8005bdc <TIM_Base_SetConfig+0x118>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00b      	beq.n	8005b04 <TIM_Base_SetConfig+0x40>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a3c      	ldr	r2, [pc, #240]	; (8005be0 <TIM_Base_SetConfig+0x11c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d007      	beq.n	8005b04 <TIM_Base_SetConfig+0x40>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a3b      	ldr	r2, [pc, #236]	; (8005be4 <TIM_Base_SetConfig+0x120>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_Base_SetConfig+0x40>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a3a      	ldr	r2, [pc, #232]	; (8005be8 <TIM_Base_SetConfig+0x124>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d108      	bne.n	8005b16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a2f      	ldr	r2, [pc, #188]	; (8005bd8 <TIM_Base_SetConfig+0x114>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d02b      	beq.n	8005b76 <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b24:	d027      	beq.n	8005b76 <TIM_Base_SetConfig+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a2c      	ldr	r2, [pc, #176]	; (8005bdc <TIM_Base_SetConfig+0x118>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d023      	beq.n	8005b76 <TIM_Base_SetConfig+0xb2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a2b      	ldr	r2, [pc, #172]	; (8005be0 <TIM_Base_SetConfig+0x11c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d01f      	beq.n	8005b76 <TIM_Base_SetConfig+0xb2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a2a      	ldr	r2, [pc, #168]	; (8005be4 <TIM_Base_SetConfig+0x120>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d01b      	beq.n	8005b76 <TIM_Base_SetConfig+0xb2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a29      	ldr	r2, [pc, #164]	; (8005be8 <TIM_Base_SetConfig+0x124>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d017      	beq.n	8005b76 <TIM_Base_SetConfig+0xb2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a28      	ldr	r2, [pc, #160]	; (8005bec <TIM_Base_SetConfig+0x128>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <TIM_Base_SetConfig+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a27      	ldr	r2, [pc, #156]	; (8005bf0 <TIM_Base_SetConfig+0x12c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00f      	beq.n	8005b76 <TIM_Base_SetConfig+0xb2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a26      	ldr	r2, [pc, #152]	; (8005bf4 <TIM_Base_SetConfig+0x130>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00b      	beq.n	8005b76 <TIM_Base_SetConfig+0xb2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a25      	ldr	r2, [pc, #148]	; (8005bf8 <TIM_Base_SetConfig+0x134>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d007      	beq.n	8005b76 <TIM_Base_SetConfig+0xb2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a24      	ldr	r2, [pc, #144]	; (8005bfc <TIM_Base_SetConfig+0x138>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d003      	beq.n	8005b76 <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a23      	ldr	r2, [pc, #140]	; (8005c00 <TIM_Base_SetConfig+0x13c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d108      	bne.n	8005b88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a0a      	ldr	r2, [pc, #40]	; (8005bd8 <TIM_Base_SetConfig+0x114>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <TIM_Base_SetConfig+0xf8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a0c      	ldr	r2, [pc, #48]	; (8005be8 <TIM_Base_SetConfig+0x124>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d103      	bne.n	8005bc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	691a      	ldr	r2, [r3, #16]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	615a      	str	r2, [r3, #20]
}
 8005bca:	bf00      	nop
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40010000 	.word	0x40010000
 8005bdc:	40000400 	.word	0x40000400
 8005be0:	40000800 	.word	0x40000800
 8005be4:	40000c00 	.word	0x40000c00
 8005be8:	40010400 	.word	0x40010400
 8005bec:	40014000 	.word	0x40014000
 8005bf0:	40014400 	.word	0x40014400
 8005bf4:	40014800 	.word	0x40014800
 8005bf8:	40001800 	.word	0x40001800
 8005bfc:	40001c00 	.word	0x40001c00
 8005c00:	40002000 	.word	0x40002000

08005c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e03f      	b.n	8005cbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fb f9c2 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2224      	movs	r2, #36	; 0x24
 8005c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f829 	bl	8005cc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695a      	ldr	r2, [r3, #20]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d0a:	f023 030c 	bic.w	r3, r3, #12
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6812      	ldr	r2, [r2, #0]
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	430b      	orrs	r3, r1
 8005d16:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699a      	ldr	r2, [r3, #24]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d36:	f040 818b 	bne.w	8006050 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4ac1      	ldr	r2, [pc, #772]	; (8006044 <UART_SetConfig+0x37c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d005      	beq.n	8005d50 <UART_SetConfig+0x88>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4abf      	ldr	r2, [pc, #764]	; (8006048 <UART_SetConfig+0x380>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	f040 80bd 	bne.w	8005eca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d50:	f7ff f8f8 	bl	8004f44 <HAL_RCC_GetPCLK2Freq>
 8005d54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	461d      	mov	r5, r3
 8005d5a:	f04f 0600 	mov.w	r6, #0
 8005d5e:	46a8      	mov	r8, r5
 8005d60:	46b1      	mov	r9, r6
 8005d62:	eb18 0308 	adds.w	r3, r8, r8
 8005d66:	eb49 0409 	adc.w	r4, r9, r9
 8005d6a:	4698      	mov	r8, r3
 8005d6c:	46a1      	mov	r9, r4
 8005d6e:	eb18 0805 	adds.w	r8, r8, r5
 8005d72:	eb49 0906 	adc.w	r9, r9, r6
 8005d76:	f04f 0100 	mov.w	r1, #0
 8005d7a:	f04f 0200 	mov.w	r2, #0
 8005d7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d82:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d86:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d8a:	4688      	mov	r8, r1
 8005d8c:	4691      	mov	r9, r2
 8005d8e:	eb18 0005 	adds.w	r0, r8, r5
 8005d92:	eb49 0106 	adc.w	r1, r9, r6
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	461d      	mov	r5, r3
 8005d9c:	f04f 0600 	mov.w	r6, #0
 8005da0:	196b      	adds	r3, r5, r5
 8005da2:	eb46 0406 	adc.w	r4, r6, r6
 8005da6:	461a      	mov	r2, r3
 8005da8:	4623      	mov	r3, r4
 8005daa:	f7fa fa11 	bl	80001d0 <__aeabi_uldivmod>
 8005dae:	4603      	mov	r3, r0
 8005db0:	460c      	mov	r4, r1
 8005db2:	461a      	mov	r2, r3
 8005db4:	4ba5      	ldr	r3, [pc, #660]	; (800604c <UART_SetConfig+0x384>)
 8005db6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dba:	095b      	lsrs	r3, r3, #5
 8005dbc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	461d      	mov	r5, r3
 8005dc4:	f04f 0600 	mov.w	r6, #0
 8005dc8:	46a9      	mov	r9, r5
 8005dca:	46b2      	mov	sl, r6
 8005dcc:	eb19 0309 	adds.w	r3, r9, r9
 8005dd0:	eb4a 040a 	adc.w	r4, sl, sl
 8005dd4:	4699      	mov	r9, r3
 8005dd6:	46a2      	mov	sl, r4
 8005dd8:	eb19 0905 	adds.w	r9, r9, r5
 8005ddc:	eb4a 0a06 	adc.w	sl, sl, r6
 8005de0:	f04f 0100 	mov.w	r1, #0
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005df0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005df4:	4689      	mov	r9, r1
 8005df6:	4692      	mov	sl, r2
 8005df8:	eb19 0005 	adds.w	r0, r9, r5
 8005dfc:	eb4a 0106 	adc.w	r1, sl, r6
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	461d      	mov	r5, r3
 8005e06:	f04f 0600 	mov.w	r6, #0
 8005e0a:	196b      	adds	r3, r5, r5
 8005e0c:	eb46 0406 	adc.w	r4, r6, r6
 8005e10:	461a      	mov	r2, r3
 8005e12:	4623      	mov	r3, r4
 8005e14:	f7fa f9dc 	bl	80001d0 <__aeabi_uldivmod>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4b8b      	ldr	r3, [pc, #556]	; (800604c <UART_SetConfig+0x384>)
 8005e20:	fba3 1302 	umull	r1, r3, r3, r2
 8005e24:	095b      	lsrs	r3, r3, #5
 8005e26:	2164      	movs	r1, #100	; 0x64
 8005e28:	fb01 f303 	mul.w	r3, r1, r3
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	3332      	adds	r3, #50	; 0x32
 8005e32:	4a86      	ldr	r2, [pc, #536]	; (800604c <UART_SetConfig+0x384>)
 8005e34:	fba2 2303 	umull	r2, r3, r2, r3
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e40:	4498      	add	r8, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	461d      	mov	r5, r3
 8005e46:	f04f 0600 	mov.w	r6, #0
 8005e4a:	46a9      	mov	r9, r5
 8005e4c:	46b2      	mov	sl, r6
 8005e4e:	eb19 0309 	adds.w	r3, r9, r9
 8005e52:	eb4a 040a 	adc.w	r4, sl, sl
 8005e56:	4699      	mov	r9, r3
 8005e58:	46a2      	mov	sl, r4
 8005e5a:	eb19 0905 	adds.w	r9, r9, r5
 8005e5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e62:	f04f 0100 	mov.w	r1, #0
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e76:	4689      	mov	r9, r1
 8005e78:	4692      	mov	sl, r2
 8005e7a:	eb19 0005 	adds.w	r0, r9, r5
 8005e7e:	eb4a 0106 	adc.w	r1, sl, r6
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	461d      	mov	r5, r3
 8005e88:	f04f 0600 	mov.w	r6, #0
 8005e8c:	196b      	adds	r3, r5, r5
 8005e8e:	eb46 0406 	adc.w	r4, r6, r6
 8005e92:	461a      	mov	r2, r3
 8005e94:	4623      	mov	r3, r4
 8005e96:	f7fa f99b 	bl	80001d0 <__aeabi_uldivmod>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	4b6a      	ldr	r3, [pc, #424]	; (800604c <UART_SetConfig+0x384>)
 8005ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	2164      	movs	r1, #100	; 0x64
 8005eaa:	fb01 f303 	mul.w	r3, r1, r3
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	3332      	adds	r3, #50	; 0x32
 8005eb4:	4a65      	ldr	r2, [pc, #404]	; (800604c <UART_SetConfig+0x384>)
 8005eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	f003 0207 	and.w	r2, r3, #7
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4442      	add	r2, r8
 8005ec6:	609a      	str	r2, [r3, #8]
 8005ec8:	e26f      	b.n	80063aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005eca:	f7ff f827 	bl	8004f1c <HAL_RCC_GetPCLK1Freq>
 8005ece:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	461d      	mov	r5, r3
 8005ed4:	f04f 0600 	mov.w	r6, #0
 8005ed8:	46a8      	mov	r8, r5
 8005eda:	46b1      	mov	r9, r6
 8005edc:	eb18 0308 	adds.w	r3, r8, r8
 8005ee0:	eb49 0409 	adc.w	r4, r9, r9
 8005ee4:	4698      	mov	r8, r3
 8005ee6:	46a1      	mov	r9, r4
 8005ee8:	eb18 0805 	adds.w	r8, r8, r5
 8005eec:	eb49 0906 	adc.w	r9, r9, r6
 8005ef0:	f04f 0100 	mov.w	r1, #0
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005efc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f00:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f04:	4688      	mov	r8, r1
 8005f06:	4691      	mov	r9, r2
 8005f08:	eb18 0005 	adds.w	r0, r8, r5
 8005f0c:	eb49 0106 	adc.w	r1, r9, r6
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	461d      	mov	r5, r3
 8005f16:	f04f 0600 	mov.w	r6, #0
 8005f1a:	196b      	adds	r3, r5, r5
 8005f1c:	eb46 0406 	adc.w	r4, r6, r6
 8005f20:	461a      	mov	r2, r3
 8005f22:	4623      	mov	r3, r4
 8005f24:	f7fa f954 	bl	80001d0 <__aeabi_uldivmod>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	4b47      	ldr	r3, [pc, #284]	; (800604c <UART_SetConfig+0x384>)
 8005f30:	fba3 2302 	umull	r2, r3, r3, r2
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	461d      	mov	r5, r3
 8005f3e:	f04f 0600 	mov.w	r6, #0
 8005f42:	46a9      	mov	r9, r5
 8005f44:	46b2      	mov	sl, r6
 8005f46:	eb19 0309 	adds.w	r3, r9, r9
 8005f4a:	eb4a 040a 	adc.w	r4, sl, sl
 8005f4e:	4699      	mov	r9, r3
 8005f50:	46a2      	mov	sl, r4
 8005f52:	eb19 0905 	adds.w	r9, r9, r5
 8005f56:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f5a:	f04f 0100 	mov.w	r1, #0
 8005f5e:	f04f 0200 	mov.w	r2, #0
 8005f62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f6e:	4689      	mov	r9, r1
 8005f70:	4692      	mov	sl, r2
 8005f72:	eb19 0005 	adds.w	r0, r9, r5
 8005f76:	eb4a 0106 	adc.w	r1, sl, r6
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	461d      	mov	r5, r3
 8005f80:	f04f 0600 	mov.w	r6, #0
 8005f84:	196b      	adds	r3, r5, r5
 8005f86:	eb46 0406 	adc.w	r4, r6, r6
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	4623      	mov	r3, r4
 8005f8e:	f7fa f91f 	bl	80001d0 <__aeabi_uldivmod>
 8005f92:	4603      	mov	r3, r0
 8005f94:	460c      	mov	r4, r1
 8005f96:	461a      	mov	r2, r3
 8005f98:	4b2c      	ldr	r3, [pc, #176]	; (800604c <UART_SetConfig+0x384>)
 8005f9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f9e:	095b      	lsrs	r3, r3, #5
 8005fa0:	2164      	movs	r1, #100	; 0x64
 8005fa2:	fb01 f303 	mul.w	r3, r1, r3
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	00db      	lsls	r3, r3, #3
 8005faa:	3332      	adds	r3, #50	; 0x32
 8005fac:	4a27      	ldr	r2, [pc, #156]	; (800604c <UART_SetConfig+0x384>)
 8005fae:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb2:	095b      	lsrs	r3, r3, #5
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fba:	4498      	add	r8, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	461d      	mov	r5, r3
 8005fc0:	f04f 0600 	mov.w	r6, #0
 8005fc4:	46a9      	mov	r9, r5
 8005fc6:	46b2      	mov	sl, r6
 8005fc8:	eb19 0309 	adds.w	r3, r9, r9
 8005fcc:	eb4a 040a 	adc.w	r4, sl, sl
 8005fd0:	4699      	mov	r9, r3
 8005fd2:	46a2      	mov	sl, r4
 8005fd4:	eb19 0905 	adds.w	r9, r9, r5
 8005fd8:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fdc:	f04f 0100 	mov.w	r1, #0
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fe8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ff0:	4689      	mov	r9, r1
 8005ff2:	4692      	mov	sl, r2
 8005ff4:	eb19 0005 	adds.w	r0, r9, r5
 8005ff8:	eb4a 0106 	adc.w	r1, sl, r6
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	461d      	mov	r5, r3
 8006002:	f04f 0600 	mov.w	r6, #0
 8006006:	196b      	adds	r3, r5, r5
 8006008:	eb46 0406 	adc.w	r4, r6, r6
 800600c:	461a      	mov	r2, r3
 800600e:	4623      	mov	r3, r4
 8006010:	f7fa f8de 	bl	80001d0 <__aeabi_uldivmod>
 8006014:	4603      	mov	r3, r0
 8006016:	460c      	mov	r4, r1
 8006018:	461a      	mov	r2, r3
 800601a:	4b0c      	ldr	r3, [pc, #48]	; (800604c <UART_SetConfig+0x384>)
 800601c:	fba3 1302 	umull	r1, r3, r3, r2
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	2164      	movs	r1, #100	; 0x64
 8006024:	fb01 f303 	mul.w	r3, r1, r3
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	3332      	adds	r3, #50	; 0x32
 800602e:	4a07      	ldr	r2, [pc, #28]	; (800604c <UART_SetConfig+0x384>)
 8006030:	fba2 2303 	umull	r2, r3, r2, r3
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	f003 0207 	and.w	r2, r3, #7
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4442      	add	r2, r8
 8006040:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006042:	e1b2      	b.n	80063aa <UART_SetConfig+0x6e2>
 8006044:	40011000 	.word	0x40011000
 8006048:	40011400 	.word	0x40011400
 800604c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4ad7      	ldr	r2, [pc, #860]	; (80063b4 <UART_SetConfig+0x6ec>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d005      	beq.n	8006066 <UART_SetConfig+0x39e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4ad6      	ldr	r2, [pc, #856]	; (80063b8 <UART_SetConfig+0x6f0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	f040 80d1 	bne.w	8006208 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006066:	f7fe ff6d 	bl	8004f44 <HAL_RCC_GetPCLK2Freq>
 800606a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	469a      	mov	sl, r3
 8006070:	f04f 0b00 	mov.w	fp, #0
 8006074:	46d0      	mov	r8, sl
 8006076:	46d9      	mov	r9, fp
 8006078:	eb18 0308 	adds.w	r3, r8, r8
 800607c:	eb49 0409 	adc.w	r4, r9, r9
 8006080:	4698      	mov	r8, r3
 8006082:	46a1      	mov	r9, r4
 8006084:	eb18 080a 	adds.w	r8, r8, sl
 8006088:	eb49 090b 	adc.w	r9, r9, fp
 800608c:	f04f 0100 	mov.w	r1, #0
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006098:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800609c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060a0:	4688      	mov	r8, r1
 80060a2:	4691      	mov	r9, r2
 80060a4:	eb1a 0508 	adds.w	r5, sl, r8
 80060a8:	eb4b 0609 	adc.w	r6, fp, r9
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	4619      	mov	r1, r3
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	f04f 0400 	mov.w	r4, #0
 80060be:	0094      	lsls	r4, r2, #2
 80060c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060c4:	008b      	lsls	r3, r1, #2
 80060c6:	461a      	mov	r2, r3
 80060c8:	4623      	mov	r3, r4
 80060ca:	4628      	mov	r0, r5
 80060cc:	4631      	mov	r1, r6
 80060ce:	f7fa f87f 	bl	80001d0 <__aeabi_uldivmod>
 80060d2:	4603      	mov	r3, r0
 80060d4:	460c      	mov	r4, r1
 80060d6:	461a      	mov	r2, r3
 80060d8:	4bb8      	ldr	r3, [pc, #736]	; (80063bc <UART_SetConfig+0x6f4>)
 80060da:	fba3 2302 	umull	r2, r3, r3, r2
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	469b      	mov	fp, r3
 80060e8:	f04f 0c00 	mov.w	ip, #0
 80060ec:	46d9      	mov	r9, fp
 80060ee:	46e2      	mov	sl, ip
 80060f0:	eb19 0309 	adds.w	r3, r9, r9
 80060f4:	eb4a 040a 	adc.w	r4, sl, sl
 80060f8:	4699      	mov	r9, r3
 80060fa:	46a2      	mov	sl, r4
 80060fc:	eb19 090b 	adds.w	r9, r9, fp
 8006100:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006104:	f04f 0100 	mov.w	r1, #0
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006110:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006114:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006118:	4689      	mov	r9, r1
 800611a:	4692      	mov	sl, r2
 800611c:	eb1b 0509 	adds.w	r5, fp, r9
 8006120:	eb4c 060a 	adc.w	r6, ip, sl
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	4619      	mov	r1, r3
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	f04f 0300 	mov.w	r3, #0
 8006132:	f04f 0400 	mov.w	r4, #0
 8006136:	0094      	lsls	r4, r2, #2
 8006138:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800613c:	008b      	lsls	r3, r1, #2
 800613e:	461a      	mov	r2, r3
 8006140:	4623      	mov	r3, r4
 8006142:	4628      	mov	r0, r5
 8006144:	4631      	mov	r1, r6
 8006146:	f7fa f843 	bl	80001d0 <__aeabi_uldivmod>
 800614a:	4603      	mov	r3, r0
 800614c:	460c      	mov	r4, r1
 800614e:	461a      	mov	r2, r3
 8006150:	4b9a      	ldr	r3, [pc, #616]	; (80063bc <UART_SetConfig+0x6f4>)
 8006152:	fba3 1302 	umull	r1, r3, r3, r2
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	2164      	movs	r1, #100	; 0x64
 800615a:	fb01 f303 	mul.w	r3, r1, r3
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	011b      	lsls	r3, r3, #4
 8006162:	3332      	adds	r3, #50	; 0x32
 8006164:	4a95      	ldr	r2, [pc, #596]	; (80063bc <UART_SetConfig+0x6f4>)
 8006166:	fba2 2303 	umull	r2, r3, r2, r3
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006170:	4498      	add	r8, r3
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	469b      	mov	fp, r3
 8006176:	f04f 0c00 	mov.w	ip, #0
 800617a:	46d9      	mov	r9, fp
 800617c:	46e2      	mov	sl, ip
 800617e:	eb19 0309 	adds.w	r3, r9, r9
 8006182:	eb4a 040a 	adc.w	r4, sl, sl
 8006186:	4699      	mov	r9, r3
 8006188:	46a2      	mov	sl, r4
 800618a:	eb19 090b 	adds.w	r9, r9, fp
 800618e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006192:	f04f 0100 	mov.w	r1, #0
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800619e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061a6:	4689      	mov	r9, r1
 80061a8:	4692      	mov	sl, r2
 80061aa:	eb1b 0509 	adds.w	r5, fp, r9
 80061ae:	eb4c 060a 	adc.w	r6, ip, sl
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	4619      	mov	r1, r3
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	f04f 0400 	mov.w	r4, #0
 80061c4:	0094      	lsls	r4, r2, #2
 80061c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061ca:	008b      	lsls	r3, r1, #2
 80061cc:	461a      	mov	r2, r3
 80061ce:	4623      	mov	r3, r4
 80061d0:	4628      	mov	r0, r5
 80061d2:	4631      	mov	r1, r6
 80061d4:	f7f9 fffc 	bl	80001d0 <__aeabi_uldivmod>
 80061d8:	4603      	mov	r3, r0
 80061da:	460c      	mov	r4, r1
 80061dc:	461a      	mov	r2, r3
 80061de:	4b77      	ldr	r3, [pc, #476]	; (80063bc <UART_SetConfig+0x6f4>)
 80061e0:	fba3 1302 	umull	r1, r3, r3, r2
 80061e4:	095b      	lsrs	r3, r3, #5
 80061e6:	2164      	movs	r1, #100	; 0x64
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	3332      	adds	r3, #50	; 0x32
 80061f2:	4a72      	ldr	r2, [pc, #456]	; (80063bc <UART_SetConfig+0x6f4>)
 80061f4:	fba2 2303 	umull	r2, r3, r2, r3
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	f003 020f 	and.w	r2, r3, #15
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4442      	add	r2, r8
 8006204:	609a      	str	r2, [r3, #8]
 8006206:	e0d0      	b.n	80063aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006208:	f7fe fe88 	bl	8004f1c <HAL_RCC_GetPCLK1Freq>
 800620c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	469a      	mov	sl, r3
 8006212:	f04f 0b00 	mov.w	fp, #0
 8006216:	46d0      	mov	r8, sl
 8006218:	46d9      	mov	r9, fp
 800621a:	eb18 0308 	adds.w	r3, r8, r8
 800621e:	eb49 0409 	adc.w	r4, r9, r9
 8006222:	4698      	mov	r8, r3
 8006224:	46a1      	mov	r9, r4
 8006226:	eb18 080a 	adds.w	r8, r8, sl
 800622a:	eb49 090b 	adc.w	r9, r9, fp
 800622e:	f04f 0100 	mov.w	r1, #0
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800623a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800623e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006242:	4688      	mov	r8, r1
 8006244:	4691      	mov	r9, r2
 8006246:	eb1a 0508 	adds.w	r5, sl, r8
 800624a:	eb4b 0609 	adc.w	r6, fp, r9
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	4619      	mov	r1, r3
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	f04f 0400 	mov.w	r4, #0
 8006260:	0094      	lsls	r4, r2, #2
 8006262:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006266:	008b      	lsls	r3, r1, #2
 8006268:	461a      	mov	r2, r3
 800626a:	4623      	mov	r3, r4
 800626c:	4628      	mov	r0, r5
 800626e:	4631      	mov	r1, r6
 8006270:	f7f9 ffae 	bl	80001d0 <__aeabi_uldivmod>
 8006274:	4603      	mov	r3, r0
 8006276:	460c      	mov	r4, r1
 8006278:	461a      	mov	r2, r3
 800627a:	4b50      	ldr	r3, [pc, #320]	; (80063bc <UART_SetConfig+0x6f4>)
 800627c:	fba3 2302 	umull	r2, r3, r3, r2
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	469b      	mov	fp, r3
 800628a:	f04f 0c00 	mov.w	ip, #0
 800628e:	46d9      	mov	r9, fp
 8006290:	46e2      	mov	sl, ip
 8006292:	eb19 0309 	adds.w	r3, r9, r9
 8006296:	eb4a 040a 	adc.w	r4, sl, sl
 800629a:	4699      	mov	r9, r3
 800629c:	46a2      	mov	sl, r4
 800629e:	eb19 090b 	adds.w	r9, r9, fp
 80062a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062a6:	f04f 0100 	mov.w	r1, #0
 80062aa:	f04f 0200 	mov.w	r2, #0
 80062ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062ba:	4689      	mov	r9, r1
 80062bc:	4692      	mov	sl, r2
 80062be:	eb1b 0509 	adds.w	r5, fp, r9
 80062c2:	eb4c 060a 	adc.w	r6, ip, sl
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	4619      	mov	r1, r3
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	f04f 0400 	mov.w	r4, #0
 80062d8:	0094      	lsls	r4, r2, #2
 80062da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062de:	008b      	lsls	r3, r1, #2
 80062e0:	461a      	mov	r2, r3
 80062e2:	4623      	mov	r3, r4
 80062e4:	4628      	mov	r0, r5
 80062e6:	4631      	mov	r1, r6
 80062e8:	f7f9 ff72 	bl	80001d0 <__aeabi_uldivmod>
 80062ec:	4603      	mov	r3, r0
 80062ee:	460c      	mov	r4, r1
 80062f0:	461a      	mov	r2, r3
 80062f2:	4b32      	ldr	r3, [pc, #200]	; (80063bc <UART_SetConfig+0x6f4>)
 80062f4:	fba3 1302 	umull	r1, r3, r3, r2
 80062f8:	095b      	lsrs	r3, r3, #5
 80062fa:	2164      	movs	r1, #100	; 0x64
 80062fc:	fb01 f303 	mul.w	r3, r1, r3
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	3332      	adds	r3, #50	; 0x32
 8006306:	4a2d      	ldr	r2, [pc, #180]	; (80063bc <UART_SetConfig+0x6f4>)
 8006308:	fba2 2303 	umull	r2, r3, r2, r3
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006312:	4498      	add	r8, r3
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	469b      	mov	fp, r3
 8006318:	f04f 0c00 	mov.w	ip, #0
 800631c:	46d9      	mov	r9, fp
 800631e:	46e2      	mov	sl, ip
 8006320:	eb19 0309 	adds.w	r3, r9, r9
 8006324:	eb4a 040a 	adc.w	r4, sl, sl
 8006328:	4699      	mov	r9, r3
 800632a:	46a2      	mov	sl, r4
 800632c:	eb19 090b 	adds.w	r9, r9, fp
 8006330:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006334:	f04f 0100 	mov.w	r1, #0
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006340:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006344:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006348:	4689      	mov	r9, r1
 800634a:	4692      	mov	sl, r2
 800634c:	eb1b 0509 	adds.w	r5, fp, r9
 8006350:	eb4c 060a 	adc.w	r6, ip, sl
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	4619      	mov	r1, r3
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	f04f 0300 	mov.w	r3, #0
 8006362:	f04f 0400 	mov.w	r4, #0
 8006366:	0094      	lsls	r4, r2, #2
 8006368:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800636c:	008b      	lsls	r3, r1, #2
 800636e:	461a      	mov	r2, r3
 8006370:	4623      	mov	r3, r4
 8006372:	4628      	mov	r0, r5
 8006374:	4631      	mov	r1, r6
 8006376:	f7f9 ff2b 	bl	80001d0 <__aeabi_uldivmod>
 800637a:	4603      	mov	r3, r0
 800637c:	460c      	mov	r4, r1
 800637e:	461a      	mov	r2, r3
 8006380:	4b0e      	ldr	r3, [pc, #56]	; (80063bc <UART_SetConfig+0x6f4>)
 8006382:	fba3 1302 	umull	r1, r3, r3, r2
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	2164      	movs	r1, #100	; 0x64
 800638a:	fb01 f303 	mul.w	r3, r1, r3
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	3332      	adds	r3, #50	; 0x32
 8006394:	4a09      	ldr	r2, [pc, #36]	; (80063bc <UART_SetConfig+0x6f4>)
 8006396:	fba2 2303 	umull	r2, r3, r2, r3
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	f003 020f 	and.w	r2, r3, #15
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4442      	add	r2, r8
 80063a6:	609a      	str	r2, [r3, #8]
}
 80063a8:	e7ff      	b.n	80063aa <UART_SetConfig+0x6e2>
 80063aa:	bf00      	nop
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b4:	40011000 	.word	0x40011000
 80063b8:	40011400 	.word	0x40011400
 80063bc:	51eb851f 	.word	0x51eb851f

080063c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063c0:	b084      	sub	sp, #16
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	f107 001c 	add.w	r0, r7, #28
 80063ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d122      	bne.n	800641e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80063ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006402:	2b01      	cmp	r3, #1
 8006404:	d105      	bne.n	8006412 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f94a 	bl	80066ac <USB_CoreReset>
 8006418:	4603      	mov	r3, r0
 800641a:	73fb      	strb	r3, [r7, #15]
 800641c:	e01a      	b.n	8006454 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f93e 	bl	80066ac <USB_CoreReset>
 8006430:	4603      	mov	r3, r0
 8006432:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	639a      	str	r2, [r3, #56]	; 0x38
 8006446:	e005      	b.n	8006454 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	2b01      	cmp	r3, #1
 8006458:	d10b      	bne.n	8006472 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f043 0206 	orr.w	r2, r3, #6
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f043 0220 	orr.w	r2, r3, #32
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006472:	7bfb      	ldrb	r3, [r7, #15]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800647e:	b004      	add	sp, #16
 8006480:	4770      	bx	lr

08006482 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f043 0201 	orr.w	r2, r3, #1
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f023 0201 	bic.w	r2, r3, #1
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b082      	sub	sp, #8
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	460b      	mov	r3, r1
 80064d0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064de:	78fb      	ldrb	r3, [r7, #3]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d106      	bne.n	80064f2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	60da      	str	r2, [r3, #12]
 80064f0:	e00b      	b.n	800650a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80064f2:	78fb      	ldrb	r3, [r7, #3]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d106      	bne.n	8006506 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	60da      	str	r2, [r3, #12]
 8006504:	e001      	b.n	800650a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e003      	b.n	8006512 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800650a:	2032      	movs	r0, #50	; 0x32
 800650c:	f7fa ff60 	bl	80013d0 <HAL_Delay>

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	019b      	lsls	r3, r3, #6
 800652e:	f043 0220 	orr.w	r2, r3, #32
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3301      	adds	r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4a09      	ldr	r2, [pc, #36]	; (8006564 <USB_FlushTxFifo+0x48>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d901      	bls.n	8006548 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e006      	b.n	8006556 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	f003 0320 	and.w	r3, r3, #32
 8006550:	2b20      	cmp	r3, #32
 8006552:	d0f0      	beq.n	8006536 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	00030d40 	.word	0x00030d40

08006568 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2210      	movs	r2, #16
 8006578:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3301      	adds	r3, #1
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4a09      	ldr	r2, [pc, #36]	; (80065a8 <USB_FlushRxFifo+0x40>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d901      	bls.n	800658c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e006      	b.n	800659a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	2b10      	cmp	r3, #16
 8006596:	d0f0      	beq.n	800657a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	00030d40 	.word	0x00030d40

080065ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b089      	sub	sp, #36	; 0x24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	4611      	mov	r1, r2
 80065b8:	461a      	mov	r2, r3
 80065ba:	460b      	mov	r3, r1
 80065bc:	71fb      	strb	r3, [r7, #7]
 80065be:	4613      	mov	r3, r2
 80065c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80065ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d11a      	bne.n	8006608 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80065d2:	88bb      	ldrh	r3, [r7, #4]
 80065d4:	3303      	adds	r3, #3
 80065d6:	089b      	lsrs	r3, r3, #2
 80065d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80065da:	2300      	movs	r3, #0
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	e00f      	b.n	8006600 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	031a      	lsls	r2, r3, #12
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ec:	461a      	mov	r2, r3
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	3304      	adds	r3, #4
 80065f8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	3301      	adds	r3, #1
 80065fe:	61bb      	str	r3, [r7, #24]
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	429a      	cmp	r2, r3
 8006606:	d3eb      	bcc.n	80065e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3724      	adds	r7, #36	; 0x24
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006616:	b480      	push	{r7}
 8006618:	b089      	sub	sp, #36	; 0x24
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	4613      	mov	r3, r2
 8006622:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800662c:	88fb      	ldrh	r3, [r7, #6]
 800662e:	3303      	adds	r3, #3
 8006630:	089b      	lsrs	r3, r3, #2
 8006632:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]
 8006638:	e00b      	b.n	8006652 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	601a      	str	r2, [r3, #0]
    pDest++;
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	3304      	adds	r3, #4
 800664a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	3301      	adds	r3, #1
 8006650:	61bb      	str	r3, [r7, #24]
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	429a      	cmp	r2, r3
 8006658:	d3ef      	bcc.n	800663a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800665a:	69fb      	ldr	r3, [r7, #28]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3724      	adds	r7, #36	; 0x24
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4013      	ands	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006680:	68fb      	ldr	r3, [r7, #12]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	f003 0301 	and.w	r3, r3, #1
}
 800669e:	4618      	mov	r0, r3
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
	...

080066ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3301      	adds	r3, #1
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4a13      	ldr	r2, [pc, #76]	; (8006710 <USB_CoreReset+0x64>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d901      	bls.n	80066ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e01b      	b.n	8006702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	daf2      	bge.n	80066b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f043 0201 	orr.w	r2, r3, #1
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3301      	adds	r3, #1
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4a09      	ldr	r2, [pc, #36]	; (8006710 <USB_CoreReset+0x64>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d901      	bls.n	80066f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e006      	b.n	8006702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d0f0      	beq.n	80066e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	00030d40 	.word	0x00030d40

08006714 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006714:	b084      	sub	sp, #16
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	f107 001c 	add.w	r0, r7, #28
 8006722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006730:	461a      	mov	r2, r3
 8006732:	2300      	movs	r3, #0
 8006734:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006762:	2b00      	cmp	r3, #0
 8006764:	d018      	beq.n	8006798 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	2b01      	cmp	r3, #1
 800676a:	d10a      	bne.n	8006782 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800677a:	f043 0304 	orr.w	r3, r3, #4
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	e014      	b.n	80067ac <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006790:	f023 0304 	bic.w	r3, r3, #4
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	e009      	b.n	80067ac <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067a6:	f023 0304 	bic.w	r3, r3, #4
 80067aa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80067ac:	2110      	movs	r1, #16
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff feb4 	bl	800651c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff fed7 	bl	8006568 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	e015      	b.n	80067ec <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067cc:	461a      	mov	r2, r3
 80067ce:	f04f 33ff 	mov.w	r3, #4294967295
 80067d2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e0:	461a      	mov	r2, r3
 80067e2:	2300      	movs	r3, #0
 80067e4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d3e5      	bcc.n	80067c0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80067f4:	2101      	movs	r1, #1
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f8ac 	bl	8006954 <USB_DriveVbus>

  HAL_Delay(200U);
 80067fc:	20c8      	movs	r0, #200	; 0xc8
 80067fe:	f7fa fde7 	bl	80013d0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f04f 32ff 	mov.w	r2, #4294967295
 800680e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00b      	beq.n	8006834 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006822:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a14      	ldr	r2, [pc, #80]	; (8006878 <USB_HostInit+0x164>)
 8006828:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a13      	ldr	r2, [pc, #76]	; (800687c <USB_HostInit+0x168>)
 800682e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006832:	e009      	b.n	8006848 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2280      	movs	r2, #128	; 0x80
 8006838:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a10      	ldr	r2, [pc, #64]	; (8006880 <USB_HostInit+0x16c>)
 800683e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a10      	ldr	r2, [pc, #64]	; (8006884 <USB_HostInit+0x170>)
 8006844:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684a:	2b00      	cmp	r3, #0
 800684c:	d105      	bne.n	800685a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	f043 0210 	orr.w	r2, r3, #16
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <USB_HostInit+0x174>)
 8006860:	4313      	orrs	r3, r2
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006872:	b004      	add	sp, #16
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	01000200 	.word	0x01000200
 800687c:	00e00300 	.word	0x00e00300
 8006880:	00600080 	.word	0x00600080
 8006884:	004000e0 	.word	0x004000e0
 8006888:	a3200008 	.word	0xa3200008

0800688c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068aa:	f023 0303 	bic.w	r3, r3, #3
 80068ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	68f9      	ldr	r1, [r7, #12]
 80068c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80068c4:	4313      	orrs	r3, r2
 80068c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d107      	bne.n	80068de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068d4:	461a      	mov	r2, r3
 80068d6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80068da:	6053      	str	r3, [r2, #4]
 80068dc:	e009      	b.n	80068f2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80068de:	78fb      	ldrb	r3, [r7, #3]
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d106      	bne.n	80068f2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ea:	461a      	mov	r2, r3
 80068ec:	f241 7370 	movw	r3, #6000	; 0x1770
 80068f0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006920:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800692a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800692e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006930:	2064      	movs	r0, #100	; 0x64
 8006932:	f7fa fd4d 	bl	80013d0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800693e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006942:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006944:	200a      	movs	r0, #10
 8006946:	f7fa fd43 	bl	80013d0 <HAL_Delay>

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006964:	2300      	movs	r3, #0
 8006966:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006978:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d109      	bne.n	8006998 <USB_DriveVbus+0x44>
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d106      	bne.n	8006998 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006992:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006996:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800699e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a2:	d109      	bne.n	80069b8 <USB_DriveVbus+0x64>
 80069a4:	78fb      	ldrb	r3, [r7, #3]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d106      	bne.n	80069b8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80069b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069b6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	0c5b      	lsrs	r3, r3, #17
 80069e4:	f003 0303 	and.w	r3, r3, #3
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	b29b      	uxth	r3, r3
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
	...

08006a18 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	4608      	mov	r0, r1
 8006a22:	4611      	mov	r1, r2
 8006a24:	461a      	mov	r2, r3
 8006a26:	4603      	mov	r3, r0
 8006a28:	70fb      	strb	r3, [r7, #3]
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	70bb      	strb	r3, [r7, #2]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a46:	461a      	mov	r2, r3
 8006a48:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006a4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d87e      	bhi.n	8006b54 <USB_HC_Init+0x13c>
 8006a56:	a201      	add	r2, pc, #4	; (adr r2, 8006a5c <USB_HC_Init+0x44>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006a6d 	.word	0x08006a6d
 8006a60:	08006b17 	.word	0x08006b17
 8006a64:	08006a6d 	.word	0x08006a6d
 8006a68:	08006ad9 	.word	0x08006ad9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a78:	461a      	mov	r2, r3
 8006a7a:	f240 439d 	movw	r3, #1181	; 0x49d
 8006a7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006a80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	da10      	bge.n	8006aaa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	78fa      	ldrb	r2, [r7, #3]
 8006a98:	0151      	lsls	r1, r2, #5
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	440a      	add	r2, r1
 8006a9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006aa8:	e057      	b.n	8006b5a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d051      	beq.n	8006b5a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	78fa      	ldrb	r2, [r7, #3]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ad0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006ad4:	60d3      	str	r3, [r2, #12]
      break;
 8006ad6:	e040      	b.n	8006b5a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	f240 639d 	movw	r3, #1693	; 0x69d
 8006aea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006aec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	da34      	bge.n	8006b5e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	78fa      	ldrb	r2, [r7, #3]
 8006b04:	0151      	lsls	r1, r2, #5
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	440a      	add	r2, r1
 8006b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b12:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006b14:	e023      	b.n	8006b5e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006b16:	78fb      	ldrb	r3, [r7, #3]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b22:	461a      	mov	r2, r3
 8006b24:	f240 2325 	movw	r3, #549	; 0x225
 8006b28:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006b2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	da17      	bge.n	8006b62 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	78fa      	ldrb	r2, [r7, #3]
 8006b42:	0151      	lsls	r1, r2, #5
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	440a      	add	r2, r1
 8006b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b4c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006b50:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006b52:	e006      	b.n	8006b62 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	75fb      	strb	r3, [r7, #23]
      break;
 8006b58:	e004      	b.n	8006b64 <USB_HC_Init+0x14c>
      break;
 8006b5a:	bf00      	nop
 8006b5c:	e002      	b.n	8006b64 <USB_HC_Init+0x14c>
      break;
 8006b5e:	bf00      	nop
 8006b60:	e000      	b.n	8006b64 <USB_HC_Init+0x14c>
      break;
 8006b62:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b6a:	699a      	ldr	r2, [r3, #24]
 8006b6c:	78fb      	ldrb	r3, [r7, #3]
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	2101      	movs	r1, #1
 8006b74:	fa01 f303 	lsl.w	r3, r1, r3
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006b8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	da03      	bge.n	8006b9e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	e001      	b.n	8006ba2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006ba2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d103      	bne.n	8006bb2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e001      	b.n	8006bb6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006bb6:	787b      	ldrb	r3, [r7, #1]
 8006bb8:	059b      	lsls	r3, r3, #22
 8006bba:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006bbe:	78bb      	ldrb	r3, [r7, #2]
 8006bc0:	02db      	lsls	r3, r3, #11
 8006bc2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006bc6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006bc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bcc:	049b      	lsls	r3, r3, #18
 8006bce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006bd2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006bd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006bda:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	0159      	lsls	r1, r3, #5
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	440b      	add	r3, r1
 8006be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bec:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006bf2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006bf4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d10f      	bne.n	8006c1c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	78fa      	ldrb	r2, [r7, #3]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c1a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop

08006c2c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08c      	sub	sp, #48	; 0x30
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	4613      	mov	r3, r2
 8006c38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	785b      	ldrb	r3, [r3, #1]
 8006c42:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c48:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d028      	beq.n	8006ca8 <USB_HC_StartXfer+0x7c>
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	791b      	ldrb	r3, [r3, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d124      	bne.n	8006ca8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006c5e:	79fb      	ldrb	r3, [r7, #7]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10b      	bne.n	8006c7c <USB_HC_StartXfer+0x50>
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	795b      	ldrb	r3, [r3, #5]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d107      	bne.n	8006c7c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	4619      	mov	r1, r3
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 fa30 	bl	80070d8 <USB_DoPing>
      return HAL_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	e114      	b.n	8006ea6 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d112      	bne.n	8006ca8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	6a3a      	ldr	r2, [r7, #32]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c9c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006ca0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d018      	beq.n	8006ce2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	8912      	ldrh	r2, [r2, #8]
 8006cb8:	4413      	add	r3, r2
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	8912      	ldrh	r2, [r2, #8]
 8006cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cc4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006cc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006cc8:	8b7b      	ldrh	r3, [r7, #26]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d90b      	bls.n	8006ce6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006cce:	8b7b      	ldrh	r3, [r7, #26]
 8006cd0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006cd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	8912      	ldrh	r2, [r2, #8]
 8006cd8:	fb02 f203 	mul.w	r2, r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	611a      	str	r2, [r3, #16]
 8006ce0:	e001      	b.n	8006ce6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	78db      	ldrb	r3, [r3, #3]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d006      	beq.n	8006cfc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006cee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	8912      	ldrh	r2, [r2, #8]
 8006cf4:	fb02 f203 	mul.w	r2, r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d06:	04d9      	lsls	r1, r3, #19
 8006d08:	4b69      	ldr	r3, [pc, #420]	; (8006eb0 <USB_HC_StartXfer+0x284>)
 8006d0a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d0c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	7a9b      	ldrb	r3, [r3, #10]
 8006d12:	075b      	lsls	r3, r3, #29
 8006d14:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d18:	69f9      	ldr	r1, [r7, #28]
 8006d1a:	0148      	lsls	r0, r1, #5
 8006d1c:	6a39      	ldr	r1, [r7, #32]
 8006d1e:	4401      	add	r1, r0
 8006d20:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d24:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d26:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	68d9      	ldr	r1, [r3, #12]
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3e:	460a      	mov	r2, r1
 8006d40:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bf0c      	ite	eq
 8006d52:	2301      	moveq	r3, #1
 8006d54:	2300      	movne	r3, #0
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	69fa      	ldr	r2, [r7, #28]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	6a3a      	ldr	r2, [r7, #32]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d78:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	7e7b      	ldrb	r3, [r7, #25]
 8006d8a:	075b      	lsls	r3, r3, #29
 8006d8c:	69f9      	ldr	r1, [r7, #28]
 8006d8e:	0148      	lsls	r0, r1, #5
 8006d90:	6a39      	ldr	r1, [r7, #32]
 8006d92:	4401      	add	r1, r0
 8006d94:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a42      	ldr	r2, [pc, #264]	; (8006eb4 <USB_HC_StartXfer+0x288>)
 8006dac:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006dae:	4b41      	ldr	r3, [pc, #260]	; (8006eb4 <USB_HC_StartXfer+0x288>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006db6:	4a3f      	ldr	r2, [pc, #252]	; (8006eb4 <USB_HC_StartXfer+0x288>)
 8006db8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	78db      	ldrb	r3, [r3, #3]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d006      	beq.n	8006dd0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006dc2:	4b3c      	ldr	r3, [pc, #240]	; (8006eb4 <USB_HC_StartXfer+0x288>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dca:	4a3a      	ldr	r2, [pc, #232]	; (8006eb4 <USB_HC_StartXfer+0x288>)
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	e005      	b.n	8006ddc <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006dd0:	4b38      	ldr	r3, [pc, #224]	; (8006eb4 <USB_HC_StartXfer+0x288>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dd8:	4a36      	ldr	r2, [pc, #216]	; (8006eb4 <USB_HC_StartXfer+0x288>)
 8006dda:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ddc:	4b35      	ldr	r3, [pc, #212]	; (8006eb4 <USB_HC_StartXfer+0x288>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006de4:	4a33      	ldr	r2, [pc, #204]	; (8006eb4 <USB_HC_StartXfer+0x288>)
 8006de6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df4:	461a      	mov	r2, r3
 8006df6:	4b2f      	ldr	r3, [pc, #188]	; (8006eb4 <USB_HC_StartXfer+0x288>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006dfc:	79fb      	ldrb	r3, [r7, #7]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e04f      	b.n	8006ea6 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	78db      	ldrb	r3, [r3, #3]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d14a      	bne.n	8006ea4 <USB_HC_StartXfer+0x278>
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d046      	beq.n	8006ea4 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	79db      	ldrb	r3, [r3, #7]
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d830      	bhi.n	8006e80 <USB_HC_StartXfer+0x254>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <USB_HC_StartXfer+0x1f8>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e35 	.word	0x08006e35
 8006e28:	08006e59 	.word	0x08006e59
 8006e2c:	08006e35 	.word	0x08006e35
 8006e30:	08006e59 	.word	0x08006e59
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	3303      	adds	r3, #3
 8006e3a:	089b      	lsrs	r3, r3, #2
 8006e3c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006e3e:	8afa      	ldrh	r2, [r7, #22]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d91c      	bls.n	8006e84 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	f043 0220 	orr.w	r2, r3, #32
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e56:	e015      	b.n	8006e84 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	3303      	adds	r3, #3
 8006e5e:	089b      	lsrs	r3, r3, #2
 8006e60:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006e62:	8afa      	ldrh	r2, [r7, #22]
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d90a      	bls.n	8006e88 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e7e:	e003      	b.n	8006e88 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006e80:	bf00      	nop
 8006e82:	e002      	b.n	8006e8a <USB_HC_StartXfer+0x25e>
        break;
 8006e84:	bf00      	nop
 8006e86:	e000      	b.n	8006e8a <USB_HC_StartXfer+0x25e>
        break;
 8006e88:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	68d9      	ldr	r1, [r3, #12]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	785a      	ldrb	r2, [r3, #1]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	b298      	uxth	r0, r3
 8006e98:	2300      	movs	r3, #0
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f7ff fb84 	bl	80065ac <USB_WritePacket>
  }

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3728      	adds	r7, #40	; 0x28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	1ff80000 	.word	0x1ff80000
 8006eb4:	200000b4 	.word	0x200000b4

08006eb8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	b29b      	uxth	r3, r3
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b087      	sub	sp, #28
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	0c9b      	lsrs	r3, r3, #18
 8006f02:	f003 0303 	and.w	r3, r3, #3
 8006f06:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <USB_HC_Halt+0x3a>
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d16c      	bne.n	8006fee <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	0151      	lsls	r1, r2, #5
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	440a      	add	r2, r1
 8006f2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f32:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d143      	bne.n	8006fc8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	0151      	lsls	r1, r2, #5
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	440a      	add	r2, r1
 8006f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f5e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	0151      	lsls	r1, r2, #5
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	440a      	add	r2, r1
 8006f76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f7e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f9e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fac:	d81d      	bhi.n	8006fea <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc4:	d0ec      	beq.n	8006fa0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006fc6:	e080      	b.n	80070ca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	0151      	lsls	r1, r2, #5
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	440a      	add	r2, r1
 8006fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fe2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fe6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006fe8:	e06f      	b.n	80070ca <USB_HC_Halt+0x1f0>
          break;
 8006fea:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006fec:	e06d      	b.n	80070ca <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	0151      	lsls	r1, r2, #5
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	440a      	add	r2, r1
 8007004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800700c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d143      	bne.n	80070a6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	4413      	add	r3, r2
 8007026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	0151      	lsls	r1, r2, #5
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	440a      	add	r2, r1
 8007034:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007038:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800703c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	4413      	add	r3, r2
 8007046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	0151      	lsls	r1, r2, #5
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	440a      	add	r2, r1
 8007054:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800705c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4413      	add	r3, r2
 8007066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	0151      	lsls	r1, r2, #5
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	440a      	add	r2, r1
 8007074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007078:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800707c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	3301      	adds	r3, #1
 8007082:	617b      	str	r3, [r7, #20]
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800708a:	d81d      	bhi.n	80070c8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	4413      	add	r3, r2
 8007094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800709e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070a2:	d0ec      	beq.n	800707e <USB_HC_Halt+0x1a4>
 80070a4:	e011      	b.n	80070ca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	e000      	b.n	80070ca <USB_HC_Halt+0x1f0>
          break;
 80070c8:	bf00      	nop
    }
  }

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80070e8:	78fb      	ldrb	r3, [r7, #3]
 80070ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80070ec:	2301      	movs	r3, #1
 80070ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	04da      	lsls	r2, r3, #19
 80070f4:	4b15      	ldr	r3, [pc, #84]	; (800714c <USB_DoPing+0x74>)
 80070f6:	4013      	ands	r3, r2
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	0151      	lsls	r1, r2, #5
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	440a      	add	r2, r1
 8007100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007108:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	4413      	add	r3, r2
 8007112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007120:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007128:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	4413      	add	r3, r2
 8007132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007136:	461a      	mov	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	371c      	adds	r7, #28
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	1ff80000 	.word	0x1ff80000

08007150 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff f99f 	bl	80064a4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007166:	2110      	movs	r1, #16
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff f9d7 	bl	800651c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff f9fa 	bl	8006568 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007174:	2300      	movs	r3, #0
 8007176:	613b      	str	r3, [r7, #16]
 8007178:	e01f      	b.n	80071ba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4413      	add	r3, r2
 8007182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007190:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007198:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ae:	461a      	mov	r2, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	3301      	adds	r3, #1
 80071b8:	613b      	str	r3, [r7, #16]
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b0f      	cmp	r3, #15
 80071be:	d9dc      	bls.n	800717a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80071c0:	2300      	movs	r3, #0
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	e034      	b.n	8007230 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071fa:	461a      	mov	r2, r3
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	3301      	adds	r3, #1
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800720c:	d80c      	bhi.n	8007228 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4413      	add	r3, r2
 8007216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007220:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007224:	d0ec      	beq.n	8007200 <USB_StopHost+0xb0>
 8007226:	e000      	b.n	800722a <USB_StopHost+0xda>
        break;
 8007228:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	3301      	adds	r3, #1
 800722e:	613b      	str	r3, [r7, #16]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	2b0f      	cmp	r3, #15
 8007234:	d9c7      	bls.n	80071c6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800723c:	461a      	mov	r2, r3
 800723e:	f04f 33ff 	mov.w	r3, #4294967295
 8007242:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f04f 32ff 	mov.w	r2, #4294967295
 800724a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff f918 	bl	8006482 <USB_EnableGlobalInt>

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800725c:	b590      	push	{r4, r7, lr}
 800725e:	b089      	sub	sp, #36	; 0x24
 8007260:	af04      	add	r7, sp, #16
 8007262:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007264:	2301      	movs	r3, #1
 8007266:	2202      	movs	r2, #2
 8007268:	2102      	movs	r1, #2
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fcb4 	bl	8007bd8 <USBH_FindInterface>
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	2bff      	cmp	r3, #255	; 0xff
 8007278:	d002      	beq.n	8007280 <USBH_CDC_InterfaceInit+0x24>
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d901      	bls.n	8007284 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007280:	2302      	movs	r3, #2
 8007282:	e13d      	b.n	8007500 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fc89 	bl	8007ba0 <USBH_SelectInterface>
 800728e:	4603      	mov	r3, r0
 8007290:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007298:	2302      	movs	r3, #2
 800729a:	e131      	b.n	8007500 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80072a2:	2050      	movs	r0, #80	; 0x50
 80072a4:	f005 fbc6 	bl	800ca34 <malloc>
 80072a8:	4603      	mov	r3, r0
 80072aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80072bc:	2302      	movs	r3, #2
 80072be:	e11f      	b.n	8007500 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80072c0:	2250      	movs	r2, #80	; 0x50
 80072c2:	2100      	movs	r1, #0
 80072c4:	68b8      	ldr	r0, [r7, #8]
 80072c6:	f005 fbd0 	bl	800ca6a <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	211a      	movs	r1, #26
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
 80072d4:	4413      	add	r3, r2
 80072d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	b25b      	sxtb	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	da15      	bge.n	800730e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	211a      	movs	r1, #26
 80072e8:	fb01 f303 	mul.w	r3, r1, r3
 80072ec:	4413      	add	r3, r2
 80072ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072f2:	781a      	ldrb	r2, [r3, #0]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	211a      	movs	r1, #26
 80072fe:	fb01 f303 	mul.w	r3, r1, r3
 8007302:	4413      	add	r3, r2
 8007304:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007308:	881a      	ldrh	r2, [r3, #0]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	785b      	ldrb	r3, [r3, #1]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f002 f890 	bl	800943a <USBH_AllocPipe>
 800731a:	4603      	mov	r3, r0
 800731c:	461a      	mov	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	7819      	ldrb	r1, [r3, #0]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	7858      	ldrb	r0, [r3, #1]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	8952      	ldrh	r2, [r2, #10]
 800733a:	9202      	str	r2, [sp, #8]
 800733c:	2203      	movs	r2, #3
 800733e:	9201      	str	r2, [sp, #4]
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	4623      	mov	r3, r4
 8007344:	4602      	mov	r2, r0
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f002 f848 	bl	80093dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2200      	movs	r2, #0
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f005 fabd 	bl	800c8d4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800735a:	2300      	movs	r3, #0
 800735c:	2200      	movs	r2, #0
 800735e:	210a      	movs	r1, #10
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fc39 	bl	8007bd8 <USBH_FindInterface>
 8007366:	4603      	mov	r3, r0
 8007368:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	2bff      	cmp	r3, #255	; 0xff
 800736e:	d002      	beq.n	8007376 <USBH_CDC_InterfaceInit+0x11a>
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d901      	bls.n	800737a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007376:	2302      	movs	r3, #2
 8007378:	e0c2      	b.n	8007500 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	211a      	movs	r1, #26
 8007380:	fb01 f303 	mul.w	r3, r1, r3
 8007384:	4413      	add	r3, r2
 8007386:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	b25b      	sxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	da16      	bge.n	80073c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	211a      	movs	r1, #26
 8007398:	fb01 f303 	mul.w	r3, r1, r3
 800739c:	4413      	add	r3, r2
 800739e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	211a      	movs	r1, #26
 80073ae:	fb01 f303 	mul.w	r3, r1, r3
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80073b8:	881a      	ldrh	r2, [r3, #0]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	835a      	strh	r2, [r3, #26]
 80073be:	e015      	b.n	80073ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	211a      	movs	r1, #26
 80073c6:	fb01 f303 	mul.w	r3, r1, r3
 80073ca:	4413      	add	r3, r2
 80073cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80073d0:	781a      	ldrb	r2, [r3, #0]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	211a      	movs	r1, #26
 80073dc:	fb01 f303 	mul.w	r3, r1, r3
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80073e6:	881a      	ldrh	r2, [r3, #0]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	211a      	movs	r1, #26
 80073f2:	fb01 f303 	mul.w	r3, r1, r3
 80073f6:	4413      	add	r3, r2
 80073f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	b25b      	sxtb	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	da16      	bge.n	8007432 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	211a      	movs	r1, #26
 800740a:	fb01 f303 	mul.w	r3, r1, r3
 800740e:	4413      	add	r3, r2
 8007410:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007414:	781a      	ldrb	r2, [r3, #0]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	211a      	movs	r1, #26
 8007420:	fb01 f303 	mul.w	r3, r1, r3
 8007424:	4413      	add	r3, r2
 8007426:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800742a:	881a      	ldrh	r2, [r3, #0]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	835a      	strh	r2, [r3, #26]
 8007430:	e015      	b.n	800745e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	211a      	movs	r1, #26
 8007438:	fb01 f303 	mul.w	r3, r1, r3
 800743c:	4413      	add	r3, r2
 800743e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007442:	781a      	ldrb	r2, [r3, #0]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	211a      	movs	r1, #26
 800744e:	fb01 f303 	mul.w	r3, r1, r3
 8007452:	4413      	add	r3, r2
 8007454:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007458:	881a      	ldrh	r2, [r3, #0]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	7b9b      	ldrb	r3, [r3, #14]
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 ffe8 	bl	800943a <USBH_AllocPipe>
 800746a:	4603      	mov	r3, r0
 800746c:	461a      	mov	r2, r3
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	7bdb      	ldrb	r3, [r3, #15]
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f001 ffde 	bl	800943a <USBH_AllocPipe>
 800747e:	4603      	mov	r3, r0
 8007480:	461a      	mov	r2, r3
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	7b59      	ldrb	r1, [r3, #13]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	7b98      	ldrb	r0, [r3, #14]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	8b12      	ldrh	r2, [r2, #24]
 800749e:	9202      	str	r2, [sp, #8]
 80074a0:	2202      	movs	r2, #2
 80074a2:	9201      	str	r2, [sp, #4]
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	4623      	mov	r3, r4
 80074a8:	4602      	mov	r2, r0
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 ff96 	bl	80093dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	7b19      	ldrb	r1, [r3, #12]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	7bd8      	ldrb	r0, [r3, #15]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	8b52      	ldrh	r2, [r2, #26]
 80074c8:	9202      	str	r2, [sp, #8]
 80074ca:	2202      	movs	r2, #2
 80074cc:	9201      	str	r2, [sp, #4]
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	4623      	mov	r3, r4
 80074d2:	4602      	mov	r2, r0
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f001 ff81 	bl	80093dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	7b5b      	ldrb	r3, [r3, #13]
 80074e6:	2200      	movs	r2, #0
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f005 f9f2 	bl	800c8d4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	7b1b      	ldrb	r3, [r3, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f005 f9eb 	bl	800c8d4 <USBH_LL_SetToggle>

  return USBH_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	bd90      	pop	{r4, r7, pc}

08007508 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00e      	beq.n	8007540 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 ff76 	bl	800941a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 ffa1 	bl	800947c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	7b1b      	ldrb	r3, [r3, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00e      	beq.n	8007566 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	7b1b      	ldrb	r3, [r3, #12]
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 ff63 	bl	800941a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	7b1b      	ldrb	r3, [r3, #12]
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 ff8e 	bl	800947c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	7b5b      	ldrb	r3, [r3, #13]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00e      	beq.n	800758c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	7b5b      	ldrb	r3, [r3, #13]
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 ff50 	bl	800941a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	7b5b      	ldrb	r3, [r3, #13]
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 ff7b 	bl	800947c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f005 fa4f 	bl	800ca44 <free>
    phost->pActiveClass->pData = 0U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075ac:	2200      	movs	r2, #0
 80075ae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3340      	adds	r3, #64	; 0x40
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f8b1 	bl	800773a <GetLineCoding>
 80075d8:	4603      	mov	r3, r0
 80075da:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80075dc:	7afb      	ldrb	r3, [r7, #11]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d105      	bne.n	80075ee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075e8:	2102      	movs	r1, #2
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80075ee:	7afb      	ldrb	r3, [r7, #11]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007600:	2301      	movs	r3, #1
 8007602:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007604:	2300      	movs	r3, #0
 8007606:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007618:	2b04      	cmp	r3, #4
 800761a:	d877      	bhi.n	800770c <USBH_CDC_Process+0x114>
 800761c:	a201      	add	r2, pc, #4	; (adr r2, 8007624 <USBH_CDC_Process+0x2c>)
 800761e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007622:	bf00      	nop
 8007624:	08007639 	.word	0x08007639
 8007628:	0800763f 	.word	0x0800763f
 800762c:	0800766f 	.word	0x0800766f
 8007630:	080076e3 	.word	0x080076e3
 8007634:	080076f1 	.word	0x080076f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]
      break;
 800763c:	e06d      	b.n	800771a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f897 	bl	8007778 <SetLineCoding>
 800764a:	4603      	mov	r3, r0
 800764c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800764e:	7bbb      	ldrb	r3, [r7, #14]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d104      	bne.n	800765e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800765c:	e058      	b.n	8007710 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800765e:	7bbb      	ldrb	r3, [r7, #14]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d055      	beq.n	8007710 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2204      	movs	r2, #4
 8007668:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800766c:	e050      	b.n	8007710 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	3340      	adds	r3, #64	; 0x40
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f860 	bl	800773a <GetLineCoding>
 800767a:	4603      	mov	r3, r0
 800767c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800767e:	7bbb      	ldrb	r3, [r7, #14]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d126      	bne.n	80076d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007696:	791b      	ldrb	r3, [r3, #4]
 8007698:	429a      	cmp	r2, r3
 800769a:	d13b      	bne.n	8007714 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d133      	bne.n	8007714 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d12b      	bne.n	8007714 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d124      	bne.n	8007714 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f984 	bl	80079d8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80076d0:	e020      	b.n	8007714 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d01d      	beq.n	8007714 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2204      	movs	r2, #4
 80076dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80076e0:	e018      	b.n	8007714 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f867 	bl	80077b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f8f8 	bl	80078de <CDC_ProcessReception>
      break;
 80076ee:	e014      	b.n	800771a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80076f0:	2100      	movs	r1, #0
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 f94f 	bl	8008996 <USBH_ClrFeature>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10a      	bne.n	8007718 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800770a:	e005      	b.n	8007718 <USBH_CDC_Process+0x120>

    default:
      break;
 800770c:	bf00      	nop
 800770e:	e004      	b.n	800771a <USBH_CDC_Process+0x122>
      break;
 8007710:	bf00      	nop
 8007712:	e002      	b.n	800771a <USBH_CDC_Process+0x122>
      break;
 8007714:	bf00      	nop
 8007716:	e000      	b.n	800771a <USBH_CDC_Process+0x122>
      break;
 8007718:	bf00      	nop

  }

  return status;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b082      	sub	sp, #8
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	22a1      	movs	r2, #161	; 0xa1
 8007748:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2221      	movs	r2, #33	; 0x21
 800774e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2207      	movs	r2, #7
 8007760:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2207      	movs	r2, #7
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 faf4 	bl	8008d56 <USBH_CtlReq>
 800776e:	4603      	mov	r3, r0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2221      	movs	r2, #33	; 0x21
 8007786:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2207      	movs	r2, #7
 800779e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2207      	movs	r2, #7
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f001 fad5 	bl	8008d56 <USBH_CtlReq>
 80077ac:	4603      	mov	r3, r0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b086      	sub	sp, #24
 80077ba:	af02      	add	r7, sp, #8
 80077bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077c8:	2300      	movs	r3, #0
 80077ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d002      	beq.n	80077dc <CDC_ProcessTransmission+0x26>
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d025      	beq.n	8007826 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80077da:	e07c      	b.n	80078d6 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	8b12      	ldrh	r2, [r2, #24]
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d90c      	bls.n	8007802 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	69d9      	ldr	r1, [r3, #28]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8b1a      	ldrh	r2, [r3, #24]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	7b58      	ldrb	r0, [r3, #13]
 80077f4:	2301      	movs	r3, #1
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	4603      	mov	r3, r0
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 fdab 	bl	8009356 <USBH_BulkSendData>
 8007800:	e00c      	b.n	800781c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800780a:	b29a      	uxth	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	7b58      	ldrb	r0, [r3, #13]
 8007810:	2301      	movs	r3, #1
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	4603      	mov	r3, r0
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 fd9d 	bl	8009356 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007824:	e057      	b.n	80078d6 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	7b5b      	ldrb	r3, [r3, #13]
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f005 f827 	bl	800c880 <USBH_LL_GetURBState>
 8007832:	4603      	mov	r3, r0
 8007834:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d136      	bne.n	80078aa <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	8b12      	ldrh	r2, [r2, #24]
 8007844:	4293      	cmp	r3, r2
 8007846:	d90e      	bls.n	8007866 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	8b12      	ldrh	r2, [r2, #24]
 8007850:	1a9a      	subs	r2, r3, r2
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	8b12      	ldrh	r2, [r2, #24]
 800785e:	441a      	add	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	61da      	str	r2, [r3, #28]
 8007864:	e002      	b.n	800786c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	2b00      	cmp	r3, #0
 8007872:	d004      	beq.n	800787e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800787c:	e006      	b.n	800788c <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f892 	bl	80079b0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2204      	movs	r2, #4
 8007890:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80078a0:	2300      	movs	r3, #0
 80078a2:	2200      	movs	r2, #0
 80078a4:	f001 fff8 	bl	8009898 <osMessageQueuePut>
      break;
 80078a8:	e014      	b.n	80078d4 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 80078aa:	7afb      	ldrb	r3, [r7, #11]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d111      	bne.n	80078d4 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2204      	movs	r2, #4
 80078bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80078cc:	2300      	movs	r3, #0
 80078ce:	2200      	movs	r2, #0
 80078d0:	f001 ffe2 	bl	8009898 <osMessageQueuePut>
      break;
 80078d4:	bf00      	nop
  }
}
 80078d6:	bf00      	nop
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b086      	sub	sp, #24
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078f0:	2300      	movs	r3, #0
 80078f2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d002      	beq.n	8007904 <CDC_ProcessReception+0x26>
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d00e      	beq.n	8007920 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007902:	e051      	b.n	80079a8 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	6a19      	ldr	r1, [r3, #32]
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	8b5a      	ldrh	r2, [r3, #26]
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	7b1b      	ldrb	r3, [r3, #12]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f001 fd45 	bl	80093a0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2204      	movs	r2, #4
 800791a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800791e:	e043      	b.n	80079a8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	7b1b      	ldrb	r3, [r3, #12]
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f004 ffaa 	bl	800c880 <USBH_LL_GetURBState>
 800792c:	4603      	mov	r3, r0
 800792e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007930:	7cfb      	ldrb	r3, [r7, #19]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d137      	bne.n	80079a6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	7b1b      	ldrb	r3, [r3, #12]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f004 ff0d 	bl	800c75c <USBH_LL_GetLastXferSize>
 8007942:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	429a      	cmp	r2, r3
 800794c:	d016      	beq.n	800797c <CDC_ProcessReception+0x9e>
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	8b5b      	ldrh	r3, [r3, #26]
 8007952:	461a      	mov	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4293      	cmp	r3, r2
 8007958:	d910      	bls.n	800797c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	1ad2      	subs	r2, r2, r3
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	6a1a      	ldr	r2, [r3, #32]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	441a      	add	r2, r3
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2203      	movs	r2, #3
 8007976:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800797a:	e006      	b.n	800798a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f81d 	bl	80079c4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2204      	movs	r2, #4
 800798e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800799e:	2300      	movs	r3, #0
 80079a0:	2200      	movs	r2, #0
 80079a2:	f001 ff79 	bl	8009898 <osMessageQueuePut>
      break;
 80079a6:	bf00      	nop
  }
}
 80079a8:	bf00      	nop
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	4613      	mov	r3, r2
 80079f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007a00:	2302      	movs	r3, #2
 8007a02:	e044      	b.n	8007a8e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	79fa      	ldrb	r2, [r7, #7]
 8007a08:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f841 	bl	8007aa4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007a50:	2200      	movs	r2, #0
 8007a52:	2104      	movs	r1, #4
 8007a54:	2010      	movs	r0, #16
 8007a56:	f001 fe99 	bl	800978c <osMessageQueueNew>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8007a62:	4b0d      	ldr	r3, [pc, #52]	; (8007a98 <USBH_Init+0xac>)
 8007a64:	4a0d      	ldr	r2, [pc, #52]	; (8007a9c <USBH_Init+0xb0>)
 8007a66:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8007a68:	4b0b      	ldr	r3, [pc, #44]	; (8007a98 <USBH_Init+0xac>)
 8007a6a:	2280      	movs	r2, #128	; 0x80
 8007a6c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <USBH_Init+0xac>)
 8007a70:	2218      	movs	r2, #24
 8007a72:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8007a74:	4a08      	ldr	r2, [pc, #32]	; (8007a98 <USBH_Init+0xac>)
 8007a76:	68f9      	ldr	r1, [r7, #12]
 8007a78:	4809      	ldr	r0, [pc, #36]	; (8007aa0 <USBH_Init+0xb4>)
 8007a7a:	f001 fdb3 	bl	80095e4 <osThreadNew>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f004 fdb6 	bl	800c5f8 <USBH_LL_Init>

  return USBH_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	20004bd0 	.word	0x20004bd0
 8007a9c:	0800cca0 	.word	0x0800cca0
 8007aa0:	0800870d 	.word	0x0800870d

08007aa4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	e009      	b.n	8007aca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	33e0      	adds	r3, #224	; 0xe0
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	60fb      	str	r3, [r7, #12]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b0e      	cmp	r3, #14
 8007ace:	d9f2      	bls.n	8007ab6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	e009      	b.n	8007aea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af0:	d3f1      	bcc.n	8007ad6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2240      	movs	r2, #64	; 0x40
 8007b16:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d016      	beq.n	8007b8e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10e      	bne.n	8007b88 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b70:	1c59      	adds	r1, r3, #1
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	33de      	adds	r3, #222	; 0xde
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]
 8007b86:	e004      	b.n	8007b92 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007b88:	2302      	movs	r3, #2
 8007b8a:	73fb      	strb	r3, [r7, #15]
 8007b8c:	e001      	b.n	8007b92 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007b8e:	2302      	movs	r3, #2
 8007b90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007bb6:	78fa      	ldrb	r2, [r7, #3]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d204      	bcs.n	8007bc6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	78fa      	ldrb	r2, [r7, #3]
 8007bc0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007bc4:	e001      	b.n	8007bca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	4608      	mov	r0, r1
 8007be2:	4611      	mov	r1, r2
 8007be4:	461a      	mov	r2, r3
 8007be6:	4603      	mov	r3, r0
 8007be8:	70fb      	strb	r3, [r7, #3]
 8007bea:	460b      	mov	r3, r1
 8007bec:	70bb      	strb	r3, [r7, #2]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007c00:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c02:	e025      	b.n	8007c50 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	221a      	movs	r2, #26
 8007c08:	fb02 f303 	mul.w	r3, r2, r3
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	4413      	add	r3, r2
 8007c12:	3302      	adds	r3, #2
 8007c14:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	795b      	ldrb	r3, [r3, #5]
 8007c1a:	78fa      	ldrb	r2, [r7, #3]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d002      	beq.n	8007c26 <USBH_FindInterface+0x4e>
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	2bff      	cmp	r3, #255	; 0xff
 8007c24:	d111      	bne.n	8007c4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c2a:	78ba      	ldrb	r2, [r7, #2]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d002      	beq.n	8007c36 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c30:	78bb      	ldrb	r3, [r7, #2]
 8007c32:	2bff      	cmp	r3, #255	; 0xff
 8007c34:	d109      	bne.n	8007c4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c3a:	787a      	ldrb	r2, [r7, #1]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d002      	beq.n	8007c46 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c40:	787b      	ldrb	r3, [r7, #1]
 8007c42:	2bff      	cmp	r3, #255	; 0xff
 8007c44:	d101      	bne.n	8007c4a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	e006      	b.n	8007c58 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d9d6      	bls.n	8007c04 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007c56:	23ff      	movs	r3, #255	; 0xff
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	371c      	adds	r7, #28
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f004 fcff 	bl	800c670 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007c72:	2101      	movs	r1, #1
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f004 fe16 	bl	800c8a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af04      	add	r7, sp, #16
 8007c8a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d102      	bne.n	8007ca6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2203      	movs	r2, #3
 8007ca4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b0b      	cmp	r3, #11
 8007cae:	f200 823c 	bhi.w	800812a <USBH_Process+0x4a6>
 8007cb2:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <USBH_Process+0x34>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007ce9 	.word	0x08007ce9
 8007cbc:	08007d37 	.word	0x08007d37
 8007cc0:	08007dbb 	.word	0x08007dbb
 8007cc4:	080080a9 	.word	0x080080a9
 8007cc8:	0800812b 	.word	0x0800812b
 8007ccc:	08007e7b 	.word	0x08007e7b
 8007cd0:	08008033 	.word	0x08008033
 8007cd4:	08007ecd 	.word	0x08007ecd
 8007cd8:	08007f09 	.word	0x08007f09
 8007cdc:	08007f43 	.word	0x08007f43
 8007ce0:	08007f8b 	.word	0x08007f8b
 8007ce4:	08008091 	.word	0x08008091
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 821c 	beq.w	800812e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007cfc:	20c8      	movs	r0, #200	; 0xc8
 8007cfe:	f004 fe1c 	bl	800c93a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f004 fd0f 	bl	800c726 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f001 fdb2 	bl	8009898 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007d34:	e1fb      	b.n	800812e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d107      	bne.n	8007d50 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	e025      	b.n	8007d9c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d5a:	d914      	bls.n	8007d86 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007d62:	3301      	adds	r3, #1
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	d903      	bls.n	8007d7e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	220d      	movs	r2, #13
 8007d7a:	701a      	strb	r2, [r3, #0]
 8007d7c:	e00e      	b.n	8007d9c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	701a      	strb	r2, [r3, #0]
 8007d84:	e00a      	b.n	8007d9c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007d8c:	f103 020a 	add.w	r2, r3, #10
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007d96:	200a      	movs	r0, #10
 8007d98:	f004 fdcf 	bl	800c93a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007db0:	2300      	movs	r3, #0
 8007db2:	2200      	movs	r2, #0
 8007db4:	f001 fd70 	bl	8009898 <osMessageQueuePut>
#endif
#endif
      break;
 8007db8:	e1c0      	b.n	800813c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d005      	beq.n	8007dd0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007dca:	2104      	movs	r1, #4
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007dd0:	2064      	movs	r0, #100	; 0x64
 8007dd2:	f004 fdb2 	bl	800c93a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f004 fc80 	bl	800c6dc <USBH_LL_GetSpeed>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	461a      	mov	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2205      	movs	r2, #5
 8007dea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007dec:	2100      	movs	r1, #0
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 fb23 	bl	800943a <USBH_AllocPipe>
 8007df4:	4603      	mov	r3, r0
 8007df6:	461a      	mov	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007dfc:	2180      	movs	r1, #128	; 0x80
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f001 fb1b 	bl	800943a <USBH_AllocPipe>
 8007e04:	4603      	mov	r3, r0
 8007e06:	461a      	mov	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	7919      	ldrb	r1, [r3, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e20:	b292      	uxth	r2, r2
 8007e22:	9202      	str	r2, [sp, #8]
 8007e24:	2200      	movs	r2, #0
 8007e26:	9201      	str	r2, [sp, #4]
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2280      	movs	r2, #128	; 0x80
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f001 fad4 	bl	80093dc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	7959      	ldrb	r1, [r3, #5]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e48:	b292      	uxth	r2, r2
 8007e4a:	9202      	str	r2, [sp, #8]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	9201      	str	r2, [sp, #4]
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	4603      	mov	r3, r0
 8007e54:	2200      	movs	r2, #0
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f001 fac0 	bl	80093dc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e70:	2300      	movs	r3, #0
 8007e72:	2200      	movs	r2, #0
 8007e74:	f001 fd10 	bl	8009898 <osMessageQueuePut>
#endif
#endif
      break;
 8007e78:	e160      	b.n	800813c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f964 	bl	8008148 <USBH_HandleEnum>
 8007e80:	4603      	mov	r3, r0
 8007e82:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f040 8152 	bne.w	8008132 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d103      	bne.n	8007ea8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2208      	movs	r2, #8
 8007ea4:	701a      	strb	r2, [r3, #0]
 8007ea6:	e002      	b.n	8007eae <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2207      	movs	r2, #7
 8007eac:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2205      	movs	r2, #5
 8007eb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f001 fce7 	bl	8009898 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8007eca:	e132      	b.n	8008132 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 812f 	beq.w	8008136 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ede:	2101      	movs	r1, #1
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2208      	movs	r2, #8
 8007ee8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2205      	movs	r2, #5
 8007eee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007efe:	2300      	movs	r3, #0
 8007f00:	2200      	movs	r2, #0
 8007f02:	f001 fcc9 	bl	8009898 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8007f06:	e116      	b.n	8008136 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fcf8 	bl	8008908 <USBH_SetCfg>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d102      	bne.n	8007f24 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2209      	movs	r2, #9
 8007f22:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f38:	2300      	movs	r3, #0
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f001 fcac 	bl	8009898 <osMessageQueuePut>
#endif
#endif
      break;
 8007f40:	e0fc      	b.n	800813c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007f48:	f003 0320 	and.w	r3, r3, #32
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00a      	beq.n	8007f66 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007f50:	2101      	movs	r1, #1
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fcfb 	bl	800894e <USBH_SetFeature>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d106      	bne.n	8007f6c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	220a      	movs	r2, #10
 8007f62:	701a      	strb	r2, [r3, #0]
 8007f64:	e002      	b.n	8007f6c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	220a      	movs	r2, #10
 8007f6a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f80:	2300      	movs	r3, #0
 8007f82:	2200      	movs	r2, #0
 8007f84:	f001 fc88 	bl	8009898 <osMessageQueuePut>
#endif
#endif
      break;
 8007f88:	e0d8      	b.n	800813c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d03f      	beq.n	8008014 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	73fb      	strb	r3, [r7, #15]
 8007fa0:	e016      	b.n	8007fd0 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007fa2:	7bfa      	ldrb	r2, [r7, #15]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	32de      	adds	r2, #222	; 0xde
 8007fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fac:	791a      	ldrb	r2, [r3, #4]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d108      	bne.n	8007fca <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007fb8:	7bfa      	ldrb	r2, [r7, #15]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	32de      	adds	r2, #222	; 0xde
 8007fbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007fc8:	e005      	b.n	8007fd6 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	73fb      	strb	r3, [r7, #15]
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0e5      	beq.n	8007fa2 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d016      	beq.n	800800e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	4798      	blx	r3
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d109      	bne.n	8008006 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2206      	movs	r2, #6
 8007ff6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ffe:	2103      	movs	r1, #3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	4798      	blx	r3
 8008004:	e006      	b.n	8008014 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	220d      	movs	r2, #13
 800800a:	701a      	strb	r2, [r3, #0]
 800800c:	e002      	b.n	8008014 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	220d      	movs	r2, #13
 8008012:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2205      	movs	r2, #5
 8008018:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008028:	2300      	movs	r3, #0
 800802a:	2200      	movs	r2, #0
 800802c:	f001 fc34 	bl	8009898 <osMessageQueuePut>
#endif
#endif
      break;
 8008030:	e084      	b.n	800813c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008038:	2b00      	cmp	r3, #0
 800803a:	d017      	beq.n	800806c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	4798      	blx	r3
 8008048:	4603      	mov	r3, r0
 800804a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	d103      	bne.n	800805c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	220b      	movs	r2, #11
 8008058:	701a      	strb	r2, [r3, #0]
 800805a:	e00a      	b.n	8008072 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	d106      	bne.n	8008072 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	220d      	movs	r2, #13
 8008068:	701a      	strb	r2, [r3, #0]
 800806a:	e002      	b.n	8008072 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	220d      	movs	r2, #13
 8008070:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2205      	movs	r2, #5
 8008076:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008086:	2300      	movs	r3, #0
 8008088:	2200      	movs	r2, #0
 800808a:	f001 fc05 	bl	8009898 <osMessageQueuePut>
#endif
#endif
      break;
 800808e:	e055      	b.n	800813c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008096:	2b00      	cmp	r3, #0
 8008098:	d04f      	beq.n	800813a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	4798      	blx	r3
      }
      break;
 80080a6:	e048      	b.n	800813a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff fcf7 	bl	8007aa4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d009      	beq.n	80080d4 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d005      	beq.n	80080ea <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080e4:	2105      	movs	r1, #5
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d107      	bne.n	8008106 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7ff fdb0 	bl	8007c64 <USBH_Start>
 8008104:	e002      	b.n	800810c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f004 fab2 	bl	800c670 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008120:	2300      	movs	r3, #0
 8008122:	2200      	movs	r2, #0
 8008124:	f001 fbb8 	bl	8009898 <osMessageQueuePut>
#endif
#endif
      break;
 8008128:	e008      	b.n	800813c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800812a:	bf00      	nop
 800812c:	e006      	b.n	800813c <USBH_Process+0x4b8>
      break;
 800812e:	bf00      	nop
 8008130:	e004      	b.n	800813c <USBH_Process+0x4b8>
      break;
 8008132:	bf00      	nop
 8008134:	e002      	b.n	800813c <USBH_Process+0x4b8>
    break;
 8008136:	bf00      	nop
 8008138:	e000      	b.n	800813c <USBH_Process+0x4b8>
      break;
 800813a:	bf00      	nop
  }
  return USBH_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop

08008148 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af04      	add	r7, sp, #16
 800814e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008150:	2301      	movs	r3, #1
 8008152:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008154:	2301      	movs	r3, #1
 8008156:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	785b      	ldrb	r3, [r3, #1]
 800815c:	2b07      	cmp	r3, #7
 800815e:	f200 8208 	bhi.w	8008572 <USBH_HandleEnum+0x42a>
 8008162:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <USBH_HandleEnum+0x20>)
 8008164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008168:	08008189 	.word	0x08008189
 800816c:	08008247 	.word	0x08008247
 8008170:	080082b1 	.word	0x080082b1
 8008174:	0800833f 	.word	0x0800833f
 8008178:	080083a9 	.word	0x080083a9
 800817c:	08008419 	.word	0x08008419
 8008180:	080084b5 	.word	0x080084b5
 8008184:	08008533 	.word	0x08008533
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008188:	2108      	movs	r1, #8
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 faec 	bl	8008768 <USBH_Get_DevDesc>
 8008190:	4603      	mov	r3, r0
 8008192:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d130      	bne.n	80081fc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	7919      	ldrb	r1, [r3, #4]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081be:	b292      	uxth	r2, r2
 80081c0:	9202      	str	r2, [sp, #8]
 80081c2:	2200      	movs	r2, #0
 80081c4:	9201      	str	r2, [sp, #4]
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	4603      	mov	r3, r0
 80081ca:	2280      	movs	r2, #128	; 0x80
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 f905 	bl	80093dc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	7959      	ldrb	r1, [r3, #5]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081e6:	b292      	uxth	r2, r2
 80081e8:	9202      	str	r2, [sp, #8]
 80081ea:	2200      	movs	r2, #0
 80081ec:	9201      	str	r2, [sp, #4]
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	4603      	mov	r3, r0
 80081f2:	2200      	movs	r2, #0
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 f8f1 	bl	80093dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081fa:	e1bc      	b.n	8008576 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	2b03      	cmp	r3, #3
 8008200:	f040 81b9 	bne.w	8008576 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800820a:	3301      	adds	r3, #1
 800820c:	b2da      	uxtb	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800821a:	2b03      	cmp	r3, #3
 800821c:	d903      	bls.n	8008226 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	220d      	movs	r2, #13
 8008222:	701a      	strb	r2, [r3, #0]
      break;
 8008224:	e1a7      	b.n	8008576 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	795b      	ldrb	r3, [r3, #5]
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f001 f925 	bl	800947c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	791b      	ldrb	r3, [r3, #4]
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 f91f 	bl	800947c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	701a      	strb	r2, [r3, #0]
      break;
 8008244:	e197      	b.n	8008576 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008246:	2112      	movs	r1, #18
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fa8d 	bl	8008768 <USBH_Get_DevDesc>
 800824e:	4603      	mov	r3, r0
 8008250:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d103      	bne.n	8008260 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800825e:	e18c      	b.n	800857a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	2b03      	cmp	r3, #3
 8008264:	f040 8189 	bne.w	800857a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800826e:	3301      	adds	r3, #1
 8008270:	b2da      	uxtb	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800827e:	2b03      	cmp	r3, #3
 8008280:	d903      	bls.n	800828a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	220d      	movs	r2, #13
 8008286:	701a      	strb	r2, [r3, #0]
      break;
 8008288:	e177      	b.n	800857a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	795b      	ldrb	r3, [r3, #5]
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 f8f3 	bl	800947c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	791b      	ldrb	r3, [r3, #4]
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f001 f8ed 	bl	800947c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]
      break;
 80082ae:	e164      	b.n	800857a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80082b0:	2101      	movs	r1, #1
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fb04 	bl	80088c0 <USBH_SetAddress>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d132      	bne.n	8008328 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80082c2:	2002      	movs	r0, #2
 80082c4:	f004 fb39 	bl	800c93a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2203      	movs	r2, #3
 80082d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	7919      	ldrb	r1, [r3, #4]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082ea:	b292      	uxth	r2, r2
 80082ec:	9202      	str	r2, [sp, #8]
 80082ee:	2200      	movs	r2, #0
 80082f0:	9201      	str	r2, [sp, #4]
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	4603      	mov	r3, r0
 80082f6:	2280      	movs	r2, #128	; 0x80
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 f86f 	bl	80093dc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	7959      	ldrb	r1, [r3, #5]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008312:	b292      	uxth	r2, r2
 8008314:	9202      	str	r2, [sp, #8]
 8008316:	2200      	movs	r2, #0
 8008318:	9201      	str	r2, [sp, #4]
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	4603      	mov	r3, r0
 800831e:	2200      	movs	r2, #0
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f001 f85b 	bl	80093dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008326:	e12a      	b.n	800857e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008328:	7bbb      	ldrb	r3, [r7, #14]
 800832a:	2b03      	cmp	r3, #3
 800832c:	f040 8127 	bne.w	800857e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	220d      	movs	r2, #13
 8008334:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	705a      	strb	r2, [r3, #1]
      break;
 800833c:	e11f      	b.n	800857e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800833e:	2109      	movs	r1, #9
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fa39 	bl	80087b8 <USBH_Get_CfgDesc>
 8008346:	4603      	mov	r3, r0
 8008348:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d103      	bne.n	8008358 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2204      	movs	r2, #4
 8008354:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008356:	e114      	b.n	8008582 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	2b03      	cmp	r3, #3
 800835c:	f040 8111 	bne.w	8008582 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008366:	3301      	adds	r3, #1
 8008368:	b2da      	uxtb	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008376:	2b03      	cmp	r3, #3
 8008378:	d903      	bls.n	8008382 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	220d      	movs	r2, #13
 800837e:	701a      	strb	r2, [r3, #0]
      break;
 8008380:	e0ff      	b.n	8008582 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	795b      	ldrb	r3, [r3, #5]
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f001 f877 	bl	800947c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	791b      	ldrb	r3, [r3, #4]
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 f871 	bl	800947c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	701a      	strb	r2, [r3, #0]
      break;
 80083a6:	e0ec      	b.n	8008582 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fa01 	bl	80087b8 <USBH_Get_CfgDesc>
 80083b6:	4603      	mov	r3, r0
 80083b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d103      	bne.n	80083c8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2205      	movs	r2, #5
 80083c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80083c6:	e0de      	b.n	8008586 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	f040 80db 	bne.w	8008586 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083d6:	3301      	adds	r3, #1
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d903      	bls.n	80083f2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	220d      	movs	r2, #13
 80083ee:	701a      	strb	r2, [r3, #0]
      break;
 80083f0:	e0c9      	b.n	8008586 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	795b      	ldrb	r3, [r3, #5]
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f001 f83f 	bl	800947c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	791b      	ldrb	r3, [r3, #4]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 f839 	bl	800947c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	701a      	strb	r2, [r3, #0]
      break;
 8008416:	e0b6      	b.n	8008586 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800841e:	2b00      	cmp	r3, #0
 8008420:	d036      	beq.n	8008490 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800842e:	23ff      	movs	r3, #255	; 0xff
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f9e5 	bl	8008800 <USBH_Get_StringDesc>
 8008436:	4603      	mov	r3, r0
 8008438:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d111      	bne.n	8008464 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2206      	movs	r2, #6
 8008444:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2205      	movs	r2, #5
 800844a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800845a:	2300      	movs	r3, #0
 800845c:	2200      	movs	r2, #0
 800845e:	f001 fa1b 	bl	8009898 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008462:	e092      	b.n	800858a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	2b03      	cmp	r3, #3
 8008468:	f040 808f 	bne.w	800858a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2206      	movs	r2, #6
 8008470:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2205      	movs	r2, #5
 8008476:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008486:	2300      	movs	r3, #0
 8008488:	2200      	movs	r2, #0
 800848a:	f001 fa05 	bl	8009898 <osMessageQueuePut>
      break;
 800848e:	e07c      	b.n	800858a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2206      	movs	r2, #6
 8008494:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2205      	movs	r2, #5
 800849a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80084aa:	2300      	movs	r3, #0
 80084ac:	2200      	movs	r2, #0
 80084ae:	f001 f9f3 	bl	8009898 <osMessageQueuePut>
      break;
 80084b2:	e06a      	b.n	800858a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d027      	beq.n	800850e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80084ca:	23ff      	movs	r3, #255	; 0xff
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f997 	bl	8008800 <USBH_Get_StringDesc>
 80084d2:	4603      	mov	r3, r0
 80084d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d103      	bne.n	80084e4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2207      	movs	r2, #7
 80084e0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80084e2:	e054      	b.n	800858e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d151      	bne.n	800858e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2207      	movs	r2, #7
 80084ee:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2205      	movs	r2, #5
 80084f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008504:	2300      	movs	r3, #0
 8008506:	2200      	movs	r2, #0
 8008508:	f001 f9c6 	bl	8009898 <osMessageQueuePut>
      break;
 800850c:	e03f      	b.n	800858e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2207      	movs	r2, #7
 8008512:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2205      	movs	r2, #5
 8008518:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008528:	2300      	movs	r3, #0
 800852a:	2200      	movs	r2, #0
 800852c:	f001 f9b4 	bl	8009898 <osMessageQueuePut>
      break;
 8008530:	e02d      	b.n	800858e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008538:	2b00      	cmp	r3, #0
 800853a:	d017      	beq.n	800856c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008548:	23ff      	movs	r3, #255	; 0xff
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f958 	bl	8008800 <USBH_Get_StringDesc>
 8008550:	4603      	mov	r3, r0
 8008552:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008554:	7bbb      	ldrb	r3, [r7, #14]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d102      	bne.n	8008560 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800855e:	e018      	b.n	8008592 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	2b03      	cmp	r3, #3
 8008564:	d115      	bne.n	8008592 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	73fb      	strb	r3, [r7, #15]
      break;
 800856a:	e012      	b.n	8008592 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
      break;
 8008570:	e00f      	b.n	8008592 <USBH_HandleEnum+0x44a>

    default:
      break;
 8008572:	bf00      	nop
 8008574:	e00e      	b.n	8008594 <USBH_HandleEnum+0x44c>
      break;
 8008576:	bf00      	nop
 8008578:	e00c      	b.n	8008594 <USBH_HandleEnum+0x44c>
      break;
 800857a:	bf00      	nop
 800857c:	e00a      	b.n	8008594 <USBH_HandleEnum+0x44c>
      break;
 800857e:	bf00      	nop
 8008580:	e008      	b.n	8008594 <USBH_HandleEnum+0x44c>
      break;
 8008582:	bf00      	nop
 8008584:	e006      	b.n	8008594 <USBH_HandleEnum+0x44c>
      break;
 8008586:	bf00      	nop
 8008588:	e004      	b.n	8008594 <USBH_HandleEnum+0x44c>
      break;
 800858a:	bf00      	nop
 800858c:	e002      	b.n	8008594 <USBH_HandleEnum+0x44c>
      break;
 800858e:	bf00      	nop
 8008590:	e000      	b.n	8008594 <USBH_HandleEnum+0x44c>
      break;
 8008592:	bf00      	nop
  }
  return Status;
 8008594:	7bfb      	ldrb	r3, [r7, #15]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop

080085a0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80085b2:	bf00      	nop
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b082      	sub	sp, #8
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f804 	bl	80085e2 <USBH_HandleSof>
}
 80085da:	bf00      	nop
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b082      	sub	sp, #8
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b0b      	cmp	r3, #11
 80085f2:	d10a      	bne.n	800860a <USBH_HandleSof+0x28>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d005      	beq.n	800860a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	4798      	blx	r3
  }
}
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b082      	sub	sp, #8
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008636:	2300      	movs	r3, #0
 8008638:	2200      	movs	r2, #0
 800863a:	f001 f92d 	bl	8009898 <osMessageQueuePut>
#endif
#endif

  return;
 800863e:	bf00      	nop
}
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008656:	bf00      	nop
}
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b082      	sub	sp, #8
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008696:	2300      	movs	r3, #0
 8008698:	2200      	movs	r2, #0
 800869a:	f001 f8fd 	bl	8009898 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f003 ffec 	bl	800c6a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	791b      	ldrb	r3, [r3, #4]
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fed1 	bl	800947c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	795b      	ldrb	r3, [r3, #5]
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fecb 	bl	800947c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80086fa:	2300      	movs	r3, #0
 80086fc:	2200      	movs	r2, #0
 80086fe:	f001 f8cb 	bl	8009898 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008720:	f04f 33ff 	mov.w	r3, #4294967295
 8008724:	2200      	movs	r2, #0
 8008726:	f001 f92b 	bl	8009980 <osMessageQueueGet>
 800872a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1f0      	bne.n	8008714 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff faa6 	bl	8007c84 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008738:	e7ec      	b.n	8008714 <USBH_Process_OS+0x8>

0800873a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b082      	sub	sp, #8
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008756:	2300      	movs	r3, #0
 8008758:	2200      	movs	r2, #0
 800875a:	f001 f89d 	bl	8009898 <osMessageQueuePut>
#endif

  return USBH_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af02      	add	r7, sp, #8
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	b29b      	uxth	r3, r3
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	4613      	mov	r3, r2
 8008782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008786:	2100      	movs	r1, #0
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f864 	bl	8008856 <USBH_GetDescriptor>
 800878e:	4603      	mov	r3, r0
 8008790:	73fb      	strb	r3, [r7, #15]
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10a      	bne.n	80087ae <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80087a4:	78fa      	ldrb	r2, [r7, #3]
 80087a6:	b292      	uxth	r2, r2
 80087a8:	4619      	mov	r1, r3
 80087aa:	f000 f918 	bl	80089de <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af02      	add	r7, sp, #8
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	331c      	adds	r3, #28
 80087c8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80087ca:	887b      	ldrh	r3, [r7, #2]
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087d4:	2100      	movs	r1, #0
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f83d 	bl	8008856 <USBH_GetDescriptor>
 80087dc:	4603      	mov	r3, r0
 80087de:	72fb      	strb	r3, [r7, #11]
 80087e0:	7afb      	ldrb	r3, [r7, #11]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d107      	bne.n	80087f6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80087ec:	887a      	ldrh	r2, [r7, #2]
 80087ee:	68f9      	ldr	r1, [r7, #12]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 f964 	bl	8008abe <USBH_ParseCfgDesc>
  }

  return status;
 80087f6:	7afb      	ldrb	r3, [r7, #11]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af02      	add	r7, sp, #8
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	607a      	str	r2, [r7, #4]
 800880a:	461a      	mov	r2, r3
 800880c:	460b      	mov	r3, r1
 800880e:	72fb      	strb	r3, [r7, #11]
 8008810:	4613      	mov	r3, r2
 8008812:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008814:	7afb      	ldrb	r3, [r7, #11]
 8008816:	b29b      	uxth	r3, r3
 8008818:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800881c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008824:	893b      	ldrh	r3, [r7, #8]
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	460b      	mov	r3, r1
 800882a:	2100      	movs	r1, #0
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 f812 	bl	8008856 <USBH_GetDescriptor>
 8008832:	4603      	mov	r3, r0
 8008834:	75fb      	strb	r3, [r7, #23]
 8008836:	7dfb      	ldrb	r3, [r7, #23]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d107      	bne.n	800884c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008842:	893a      	ldrh	r2, [r7, #8]
 8008844:	6879      	ldr	r1, [r7, #4]
 8008846:	4618      	mov	r0, r3
 8008848:	f000 fa37 	bl	8008cba <USBH_ParseStringDesc>
  }

  return status;
 800884c:	7dfb      	ldrb	r3, [r7, #23]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	607b      	str	r3, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	72fb      	strb	r3, [r7, #11]
 8008864:	4613      	mov	r3, r2
 8008866:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	789b      	ldrb	r3, [r3, #2]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d11c      	bne.n	80088aa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008870:	7afb      	ldrb	r3, [r7, #11]
 8008872:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008876:	b2da      	uxtb	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2206      	movs	r2, #6
 8008880:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	893a      	ldrh	r2, [r7, #8]
 8008886:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008888:	893b      	ldrh	r3, [r7, #8]
 800888a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800888e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008892:	d104      	bne.n	800889e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f240 4209 	movw	r2, #1033	; 0x409
 800889a:	829a      	strh	r2, [r3, #20]
 800889c:	e002      	b.n	80088a4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	8b3a      	ldrh	r2, [r7, #24]
 80088a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80088aa:	8b3b      	ldrh	r3, [r7, #24]
 80088ac:	461a      	mov	r2, r3
 80088ae:	6879      	ldr	r1, [r7, #4]
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 fa50 	bl	8008d56 <USBH_CtlReq>
 80088b6:	4603      	mov	r3, r0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	460b      	mov	r3, r1
 80088ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	789b      	ldrb	r3, [r3, #2]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d10f      	bne.n	80088f4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2205      	movs	r2, #5
 80088de:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80088f4:	2200      	movs	r2, #0
 80088f6:	2100      	movs	r1, #0
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fa2c 	bl	8008d56 <USBH_CtlReq>
 80088fe:	4603      	mov	r3, r0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	789b      	ldrb	r3, [r3, #2]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d10e      	bne.n	800893a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2209      	movs	r2, #9
 8008926:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	887a      	ldrh	r2, [r7, #2]
 800892c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800893a:	2200      	movs	r2, #0
 800893c:	2100      	movs	r1, #0
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fa09 	bl	8008d56 <USBH_CtlReq>
 8008944:	4603      	mov	r3, r0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	460b      	mov	r3, r1
 8008958:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	789b      	ldrb	r3, [r3, #2]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d10f      	bne.n	8008982 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2203      	movs	r2, #3
 800896c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800896e:	78fb      	ldrb	r3, [r7, #3]
 8008970:	b29a      	uxth	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008982:	2200      	movs	r2, #0
 8008984:	2100      	movs	r1, #0
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f9e5 	bl	8008d56 <USBH_CtlReq>
 800898c:	4603      	mov	r3, r0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	460b      	mov	r3, r1
 80089a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	789b      	ldrb	r3, [r3, #2]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d10f      	bne.n	80089ca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2202      	movs	r2, #2
 80089ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80089bc:	78fb      	ldrb	r3, [r7, #3]
 80089be:	b29a      	uxth	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80089ca:	2200      	movs	r2, #0
 80089cc:	2100      	movs	r1, #0
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f9c1 	bl	8008d56 <USBH_CtlReq>
 80089d4:	4603      	mov	r3, r0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80089de:	b480      	push	{r7}
 80089e0:	b085      	sub	sp, #20
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	4613      	mov	r3, r2
 80089ea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	781a      	ldrb	r2, [r3, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	785a      	ldrb	r2, [r3, #1]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	3302      	adds	r3, #2
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	3303      	adds	r3, #3
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	021b      	lsls	r3, r3, #8
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	4313      	orrs	r3, r2
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	791a      	ldrb	r2, [r3, #4]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	795a      	ldrb	r2, [r3, #5]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	799a      	ldrb	r2, [r3, #6]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	79da      	ldrb	r2, [r3, #7]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008a38:	88fb      	ldrh	r3, [r7, #6]
 8008a3a:	2b08      	cmp	r3, #8
 8008a3c:	d939      	bls.n	8008ab2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	3308      	adds	r3, #8
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	3309      	adds	r3, #9
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	021b      	lsls	r3, r3, #8
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	4313      	orrs	r3, r2
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	330a      	adds	r3, #10
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	330b      	adds	r3, #11
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	021b      	lsls	r3, r3, #8
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	330c      	adds	r3, #12
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	330d      	adds	r3, #13
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	021b      	lsls	r3, r3, #8
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	7b9a      	ldrb	r2, [r3, #14]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	7bda      	ldrb	r2, [r3, #15]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	7c1a      	ldrb	r2, [r3, #16]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	7c5a      	ldrb	r2, [r3, #17]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	745a      	strb	r2, [r3, #17]
  }
}
 8008ab2:	bf00      	nop
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b08a      	sub	sp, #40	; 0x28
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	781a      	ldrb	r2, [r3, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	785a      	ldrb	r2, [r3, #1]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	3302      	adds	r3, #2
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	3303      	adds	r3, #3
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	021b      	lsls	r3, r3, #8
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	4313      	orrs	r3, r2
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	791a      	ldrb	r2, [r3, #4]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	795a      	ldrb	r2, [r3, #5]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	799a      	ldrb	r2, [r3, #6]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	79da      	ldrb	r2, [r3, #7]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	7a1a      	ldrb	r2, [r3, #8]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008b34:	88fb      	ldrh	r3, [r7, #6]
 8008b36:	2b09      	cmp	r3, #9
 8008b38:	d95f      	bls.n	8008bfa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008b3a:	2309      	movs	r3, #9
 8008b3c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b42:	e051      	b.n	8008be8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b44:	f107 0316 	add.w	r3, r7, #22
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b4c:	f000 f8e8 	bl	8008d20 <USBH_GetNextDesc>
 8008b50:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	785b      	ldrb	r3, [r3, #1]
 8008b56:	2b04      	cmp	r3, #4
 8008b58:	d146      	bne.n	8008be8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008b5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b5e:	221a      	movs	r2, #26
 8008b60:	fb02 f303 	mul.w	r3, r2, r3
 8008b64:	3308      	adds	r3, #8
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	4413      	add	r3, r2
 8008b6a:	3302      	adds	r3, #2
 8008b6c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b70:	69f8      	ldr	r0, [r7, #28]
 8008b72:	f000 f846 	bl	8008c02 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b80:	e022      	b.n	8008bc8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b82:	f107 0316 	add.w	r3, r7, #22
 8008b86:	4619      	mov	r1, r3
 8008b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b8a:	f000 f8c9 	bl	8008d20 <USBH_GetNextDesc>
 8008b8e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	785b      	ldrb	r3, [r3, #1]
 8008b94:	2b05      	cmp	r3, #5
 8008b96:	d117      	bne.n	8008bc8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b9c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008ba0:	3201      	adds	r2, #1
 8008ba2:	00d2      	lsls	r2, r2, #3
 8008ba4:	211a      	movs	r1, #26
 8008ba6:	fb01 f303 	mul.w	r3, r1, r3
 8008baa:	4413      	add	r3, r2
 8008bac:	3308      	adds	r3, #8
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bb8:	69b8      	ldr	r0, [r7, #24]
 8008bba:	f000 f851 	bl	8008c60 <USBH_ParseEPDesc>
            ep_ix++;
 8008bbe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	791b      	ldrb	r3, [r3, #4]
 8008bcc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d204      	bcs.n	8008bde <USBH_ParseCfgDesc+0x120>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	885a      	ldrh	r2, [r3, #2]
 8008bd8:	8afb      	ldrh	r3, [r7, #22]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d8d1      	bhi.n	8008b82 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008bde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008be2:	3301      	adds	r3, #1
 8008be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d804      	bhi.n	8008bfa <USBH_ParseCfgDesc+0x13c>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	885a      	ldrh	r2, [r3, #2]
 8008bf4:	8afb      	ldrh	r3, [r7, #22]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d8a4      	bhi.n	8008b44 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008bfa:	bf00      	nop
 8008bfc:	3728      	adds	r7, #40	; 0x28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b083      	sub	sp, #12
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	781a      	ldrb	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	785a      	ldrb	r2, [r3, #1]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	789a      	ldrb	r2, [r3, #2]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	78da      	ldrb	r2, [r3, #3]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	791a      	ldrb	r2, [r3, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	795a      	ldrb	r2, [r3, #5]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	799a      	ldrb	r2, [r3, #6]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	79da      	ldrb	r2, [r3, #7]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	7a1a      	ldrb	r2, [r3, #8]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	721a      	strb	r2, [r3, #8]
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781a      	ldrb	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	785a      	ldrb	r2, [r3, #1]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	789a      	ldrb	r2, [r3, #2]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	78da      	ldrb	r2, [r3, #3]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	3305      	adds	r3, #5
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	799a      	ldrb	r2, [r3, #6]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	719a      	strb	r2, [r3, #6]
}
 8008cae:	bf00      	nop
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b087      	sub	sp, #28
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d120      	bne.n	8008d14 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	1e9a      	subs	r2, r3, #2
 8008cd8:	88fb      	ldrh	r3, [r7, #6]
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	bf28      	it	cs
 8008cde:	4613      	movcs	r3, r2
 8008ce0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3302      	adds	r3, #2
 8008ce6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008ce8:	2300      	movs	r3, #0
 8008cea:	82fb      	strh	r3, [r7, #22]
 8008cec:	e00b      	b.n	8008d06 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008cee:	8afb      	ldrh	r3, [r7, #22]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	781a      	ldrb	r2, [r3, #0]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008d00:	8afb      	ldrh	r3, [r7, #22]
 8008d02:	3302      	adds	r3, #2
 8008d04:	82fb      	strh	r3, [r7, #22]
 8008d06:	8afa      	ldrh	r2, [r7, #22]
 8008d08:	8abb      	ldrh	r3, [r7, #20]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d3ef      	bcc.n	8008cee <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	2200      	movs	r2, #0
 8008d12:	701a      	strb	r2, [r3, #0]
  }
}
 8008d14:	bf00      	nop
 8008d16:	371c      	adds	r7, #28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	881a      	ldrh	r2, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	4413      	add	r3, r2
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4413      	add	r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d48:	68fb      	ldr	r3, [r7, #12]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b086      	sub	sp, #24
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	60f8      	str	r0, [r7, #12]
 8008d5e:	60b9      	str	r1, [r7, #8]
 8008d60:	4613      	mov	r3, r2
 8008d62:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008d64:	2301      	movs	r3, #1
 8008d66:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	789b      	ldrb	r3, [r3, #2]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d002      	beq.n	8008d76 <USBH_CtlReq+0x20>
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d01d      	beq.n	8008db0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008d74:	e043      	b.n	8008dfe <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	88fa      	ldrh	r2, [r7, #6]
 8008d80:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2201      	movs	r2, #1
 8008d86:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2203      	movs	r2, #3
 8008d96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008da6:	2300      	movs	r3, #0
 8008da8:	2200      	movs	r2, #0
 8008daa:	f000 fd75 	bl	8009898 <osMessageQueuePut>
      break;
 8008dae:	e026      	b.n	8008dfe <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 f829 	bl	8008e08 <USBH_HandleControl>
 8008db6:	4603      	mov	r3, r0
 8008db8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <USBH_CtlReq+0x70>
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d106      	bne.n	8008dd4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	761a      	strb	r2, [r3, #24]
 8008dd2:	e005      	b.n	8008de0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d102      	bne.n	8008de0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2203      	movs	r2, #3
 8008de4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008df4:	2300      	movs	r3, #0
 8008df6:	2200      	movs	r2, #0
 8008df8:	f000 fd4e 	bl	8009898 <osMessageQueuePut>
      break;
 8008dfc:	bf00      	nop
  }
  return status;
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af02      	add	r7, sp, #8
 8008e0e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e10:	2301      	movs	r3, #1
 8008e12:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e14:	2300      	movs	r3, #0
 8008e16:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	7e1b      	ldrb	r3, [r3, #24]
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	2b0a      	cmp	r3, #10
 8008e20:	f200 822b 	bhi.w	800927a <USBH_HandleControl+0x472>
 8008e24:	a201      	add	r2, pc, #4	; (adr r2, 8008e2c <USBH_HandleControl+0x24>)
 8008e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2a:	bf00      	nop
 8008e2c:	08008e59 	.word	0x08008e59
 8008e30:	08008e73 	.word	0x08008e73
 8008e34:	08008f15 	.word	0x08008f15
 8008e38:	08008f3b 	.word	0x08008f3b
 8008e3c:	08008fc7 	.word	0x08008fc7
 8008e40:	08008ff3 	.word	0x08008ff3
 8008e44:	080090b5 	.word	0x080090b5
 8008e48:	080090d7 	.word	0x080090d7
 8008e4c:	08009169 	.word	0x08009169
 8008e50:	08009191 	.word	0x08009191
 8008e54:	08009223 	.word	0x08009223
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f103 0110 	add.w	r1, r3, #16
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	795b      	ldrb	r3, [r3, #5]
 8008e62:	461a      	mov	r2, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fa19 	bl	800929c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	761a      	strb	r2, [r3, #24]
      break;
 8008e70:	e20e      	b.n	8009290 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	795b      	ldrb	r3, [r3, #5]
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f003 fd01 	bl	800c880 <USBH_LL_GetURBState>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d12c      	bne.n	8008ee2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	7c1b      	ldrb	r3, [r3, #16]
 8008e8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e90:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	8adb      	ldrh	r3, [r3, #22]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008e9a:	7b7b      	ldrb	r3, [r7, #13]
 8008e9c:	2b80      	cmp	r3, #128	; 0x80
 8008e9e:	d103      	bne.n	8008ea8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2203      	movs	r2, #3
 8008ea4:	761a      	strb	r2, [r3, #24]
 8008ea6:	e00d      	b.n	8008ec4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2205      	movs	r2, #5
 8008eac:	761a      	strb	r2, [r3, #24]
 8008eae:	e009      	b.n	8008ec4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008eb0:	7b7b      	ldrb	r3, [r7, #13]
 8008eb2:	2b80      	cmp	r3, #128	; 0x80
 8008eb4:	d103      	bne.n	8008ebe <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2209      	movs	r2, #9
 8008eba:	761a      	strb	r2, [r3, #24]
 8008ebc:	e002      	b.n	8008ec4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2207      	movs	r2, #7
 8008ec2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2203      	movs	r2, #3
 8008ec8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008ed8:	2300      	movs	r3, #0
 8008eda:	2200      	movs	r2, #0
 8008edc:	f000 fcdc 	bl	8009898 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ee0:	e1cd      	b.n	800927e <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008ee2:	7bbb      	ldrb	r3, [r7, #14]
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	d003      	beq.n	8008ef0 <USBH_HandleControl+0xe8>
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	f040 81c7 	bne.w	800927e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	220b      	movs	r2, #11
 8008ef4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2203      	movs	r2, #3
 8008efa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f000 fcc3 	bl	8009898 <osMessageQueuePut>
      break;
 8008f12:	e1b4      	b.n	800927e <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6899      	ldr	r1, [r3, #8]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	899a      	ldrh	r2, [r3, #12]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	791b      	ldrb	r3, [r3, #4]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f9f4 	bl	800931a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2204      	movs	r2, #4
 8008f36:	761a      	strb	r2, [r3, #24]
      break;
 8008f38:	e1aa      	b.n	8009290 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	791b      	ldrb	r3, [r3, #4]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f003 fc9d 	bl	800c880 <USBH_LL_GetURBState>
 8008f46:	4603      	mov	r3, r0
 8008f48:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d110      	bne.n	8008f72 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2209      	movs	r2, #9
 8008f54:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2203      	movs	r2, #3
 8008f5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f000 fc93 	bl	8009898 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
 8008f74:	2b05      	cmp	r3, #5
 8008f76:	d110      	bne.n	8008f9a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2203      	movs	r2, #3
 8008f80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008f90:	2300      	movs	r3, #0
 8008f92:	2200      	movs	r2, #0
 8008f94:	f000 fc80 	bl	8009898 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008f98:	e173      	b.n	8009282 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	f040 8170 	bne.w	8009282 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	220b      	movs	r2, #11
 8008fa6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2203      	movs	r2, #3
 8008fac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f000 fc6a 	bl	8009898 <osMessageQueuePut>
      break;
 8008fc4:	e15d      	b.n	8009282 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6899      	ldr	r1, [r3, #8]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	899a      	ldrh	r2, [r3, #12]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	7958      	ldrb	r0, [r3, #5]
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f979 	bl	80092d0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2206      	movs	r2, #6
 8008fee:	761a      	strb	r2, [r3, #24]
      break;
 8008ff0:	e14e      	b.n	8009290 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	795b      	ldrb	r3, [r3, #5]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f003 fc41 	bl	800c880 <USBH_LL_GetURBState>
 8008ffe:	4603      	mov	r3, r0
 8009000:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d111      	bne.n	800902c <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2207      	movs	r2, #7
 800900c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2203      	movs	r2, #3
 8009012:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009022:	2300      	movs	r3, #0
 8009024:	2200      	movs	r2, #0
 8009026:	f000 fc37 	bl	8009898 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800902a:	e12c      	b.n	8009286 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800902c:	7bbb      	ldrb	r3, [r7, #14]
 800902e:	2b05      	cmp	r3, #5
 8009030:	d113      	bne.n	800905a <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	220c      	movs	r2, #12
 8009036:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009038:	2303      	movs	r3, #3
 800903a:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2203      	movs	r2, #3
 8009040:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009050:	2300      	movs	r3, #0
 8009052:	2200      	movs	r2, #0
 8009054:	f000 fc20 	bl	8009898 <osMessageQueuePut>
      break;
 8009058:	e115      	b.n	8009286 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	2b02      	cmp	r3, #2
 800905e:	d111      	bne.n	8009084 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2205      	movs	r2, #5
 8009064:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2203      	movs	r2, #3
 800906a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800907a:	2300      	movs	r3, #0
 800907c:	2200      	movs	r2, #0
 800907e:	f000 fc0b 	bl	8009898 <osMessageQueuePut>
      break;
 8009082:	e100      	b.n	8009286 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8009084:	7bbb      	ldrb	r3, [r7, #14]
 8009086:	2b04      	cmp	r3, #4
 8009088:	f040 80fd 	bne.w	8009286 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	220b      	movs	r2, #11
 8009090:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009092:	2302      	movs	r3, #2
 8009094:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2203      	movs	r2, #3
 800909a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80090aa:	2300      	movs	r3, #0
 80090ac:	2200      	movs	r2, #0
 80090ae:	f000 fbf3 	bl	8009898 <osMessageQueuePut>
      break;
 80090b2:	e0e8      	b.n	8009286 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	791b      	ldrb	r3, [r3, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	2100      	movs	r1, #0
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f92c 	bl	800931a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2208      	movs	r2, #8
 80090d2:	761a      	strb	r2, [r3, #24]

      break;
 80090d4:	e0dc      	b.n	8009290 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	791b      	ldrb	r3, [r3, #4]
 80090da:	4619      	mov	r1, r3
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f003 fbcf 	bl	800c880 <USBH_LL_GetURBState>
 80090e2:	4603      	mov	r3, r0
 80090e4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80090e6:	7bbb      	ldrb	r3, [r7, #14]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d113      	bne.n	8009114 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	220d      	movs	r2, #13
 80090f0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2203      	movs	r2, #3
 80090fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800910a:	2300      	movs	r3, #0
 800910c:	2200      	movs	r2, #0
 800910e:	f000 fbc3 	bl	8009898 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009112:	e0ba      	b.n	800928a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	2b04      	cmp	r3, #4
 8009118:	d111      	bne.n	800913e <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	220b      	movs	r2, #11
 800911e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2203      	movs	r2, #3
 8009124:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009134:	2300      	movs	r3, #0
 8009136:	2200      	movs	r2, #0
 8009138:	f000 fbae 	bl	8009898 <osMessageQueuePut>
      break;
 800913c:	e0a5      	b.n	800928a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800913e:	7bbb      	ldrb	r3, [r7, #14]
 8009140:	2b05      	cmp	r3, #5
 8009142:	f040 80a2 	bne.w	800928a <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 8009146:	2303      	movs	r3, #3
 8009148:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2203      	movs	r2, #3
 800914e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800915e:	2300      	movs	r3, #0
 8009160:	2200      	movs	r2, #0
 8009162:	f000 fb99 	bl	8009898 <osMessageQueuePut>
      break;
 8009166:	e090      	b.n	800928a <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	795a      	ldrb	r2, [r3, #5]
 800916c:	2301      	movs	r3, #1
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	4613      	mov	r3, r2
 8009172:	2200      	movs	r2, #0
 8009174:	2100      	movs	r1, #0
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f8aa 	bl	80092d0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009182:	b29a      	uxth	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	220a      	movs	r2, #10
 800918c:	761a      	strb	r2, [r3, #24]
      break;
 800918e:	e07f      	b.n	8009290 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	795b      	ldrb	r3, [r3, #5]
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f003 fb72 	bl	800c880 <USBH_LL_GetURBState>
 800919c:	4603      	mov	r3, r0
 800919e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d113      	bne.n	80091ce <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	220d      	movs	r2, #13
 80091ae:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2203      	movs	r2, #3
 80091b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80091c4:	2300      	movs	r3, #0
 80091c6:	2200      	movs	r2, #0
 80091c8:	f000 fb66 	bl	8009898 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80091cc:	e05f      	b.n	800928e <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d111      	bne.n	80091f8 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2209      	movs	r2, #9
 80091d8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2203      	movs	r2, #3
 80091de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80091ee:	2300      	movs	r3, #0
 80091f0:	2200      	movs	r2, #0
 80091f2:	f000 fb51 	bl	8009898 <osMessageQueuePut>
      break;
 80091f6:	e04a      	b.n	800928e <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	d147      	bne.n	800928e <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	220b      	movs	r2, #11
 8009202:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2203      	movs	r2, #3
 8009208:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009218:	2300      	movs	r3, #0
 800921a:	2200      	movs	r2, #0
 800921c:	f000 fb3c 	bl	8009898 <osMessageQueuePut>
      break;
 8009220:	e035      	b.n	800928e <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	7e5b      	ldrb	r3, [r3, #25]
 8009226:	3301      	adds	r3, #1
 8009228:	b2da      	uxtb	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	765a      	strb	r2, [r3, #25]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	7e5b      	ldrb	r3, [r3, #25]
 8009232:	2b02      	cmp	r3, #2
 8009234:	d806      	bhi.n	8009244 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009242:	e025      	b.n	8009290 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800924a:	2106      	movs	r1, #6
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	795b      	ldrb	r3, [r3, #5]
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f90d 	bl	800947c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	791b      	ldrb	r3, [r3, #4]
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f907 	bl	800947c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009274:	2302      	movs	r3, #2
 8009276:	73fb      	strb	r3, [r7, #15]
      break;
 8009278:	e00a      	b.n	8009290 <USBH_HandleControl+0x488>

    default:
      break;
 800927a:	bf00      	nop
 800927c:	e008      	b.n	8009290 <USBH_HandleControl+0x488>
      break;
 800927e:	bf00      	nop
 8009280:	e006      	b.n	8009290 <USBH_HandleControl+0x488>
      break;
 8009282:	bf00      	nop
 8009284:	e004      	b.n	8009290 <USBH_HandleControl+0x488>
      break;
 8009286:	bf00      	nop
 8009288:	e002      	b.n	8009290 <USBH_HandleControl+0x488>
      break;
 800928a:	bf00      	nop
 800928c:	e000      	b.n	8009290 <USBH_HandleControl+0x488>
      break;
 800928e:	bf00      	nop
  }

  return status;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop

0800929c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af04      	add	r7, sp, #16
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	4613      	mov	r3, r2
 80092a8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80092aa:	79f9      	ldrb	r1, [r7, #7]
 80092ac:	2300      	movs	r3, #0
 80092ae:	9303      	str	r3, [sp, #12]
 80092b0:	2308      	movs	r3, #8
 80092b2:	9302      	str	r3, [sp, #8]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	9301      	str	r3, [sp, #4]
 80092b8:	2300      	movs	r3, #0
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	2300      	movs	r3, #0
 80092be:	2200      	movs	r2, #0
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f003 faac 	bl	800c81e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b088      	sub	sp, #32
 80092d4:	af04      	add	r7, sp, #16
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	4611      	mov	r1, r2
 80092dc:	461a      	mov	r2, r3
 80092de:	460b      	mov	r3, r1
 80092e0:	80fb      	strh	r3, [r7, #6]
 80092e2:	4613      	mov	r3, r2
 80092e4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80092f0:	2300      	movs	r3, #0
 80092f2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80092f4:	7979      	ldrb	r1, [r7, #5]
 80092f6:	7e3b      	ldrb	r3, [r7, #24]
 80092f8:	9303      	str	r3, [sp, #12]
 80092fa:	88fb      	ldrh	r3, [r7, #6]
 80092fc:	9302      	str	r3, [sp, #8]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	9301      	str	r3, [sp, #4]
 8009302:	2301      	movs	r3, #1
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	2300      	movs	r3, #0
 8009308:	2200      	movs	r2, #0
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f003 fa87 	bl	800c81e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b088      	sub	sp, #32
 800931e:	af04      	add	r7, sp, #16
 8009320:	60f8      	str	r0, [r7, #12]
 8009322:	60b9      	str	r1, [r7, #8]
 8009324:	4611      	mov	r1, r2
 8009326:	461a      	mov	r2, r3
 8009328:	460b      	mov	r3, r1
 800932a:	80fb      	strh	r3, [r7, #6]
 800932c:	4613      	mov	r3, r2
 800932e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009330:	7979      	ldrb	r1, [r7, #5]
 8009332:	2300      	movs	r3, #0
 8009334:	9303      	str	r3, [sp, #12]
 8009336:	88fb      	ldrh	r3, [r7, #6]
 8009338:	9302      	str	r3, [sp, #8]
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	2301      	movs	r3, #1
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	2300      	movs	r3, #0
 8009344:	2201      	movs	r2, #1
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f003 fa69 	bl	800c81e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800934c:	2300      	movs	r3, #0

}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b088      	sub	sp, #32
 800935a:	af04      	add	r7, sp, #16
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	60b9      	str	r1, [r7, #8]
 8009360:	4611      	mov	r1, r2
 8009362:	461a      	mov	r2, r3
 8009364:	460b      	mov	r3, r1
 8009366:	80fb      	strh	r3, [r7, #6]
 8009368:	4613      	mov	r3, r2
 800936a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009372:	2b00      	cmp	r3, #0
 8009374:	d001      	beq.n	800937a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800937a:	7979      	ldrb	r1, [r7, #5]
 800937c:	7e3b      	ldrb	r3, [r7, #24]
 800937e:	9303      	str	r3, [sp, #12]
 8009380:	88fb      	ldrh	r3, [r7, #6]
 8009382:	9302      	str	r3, [sp, #8]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	2301      	movs	r3, #1
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	2302      	movs	r3, #2
 800938e:	2200      	movs	r2, #0
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f003 fa44 	bl	800c81e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b088      	sub	sp, #32
 80093a4:	af04      	add	r7, sp, #16
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	4611      	mov	r1, r2
 80093ac:	461a      	mov	r2, r3
 80093ae:	460b      	mov	r3, r1
 80093b0:	80fb      	strh	r3, [r7, #6]
 80093b2:	4613      	mov	r3, r2
 80093b4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80093b6:	7979      	ldrb	r1, [r7, #5]
 80093b8:	2300      	movs	r3, #0
 80093ba:	9303      	str	r3, [sp, #12]
 80093bc:	88fb      	ldrh	r3, [r7, #6]
 80093be:	9302      	str	r3, [sp, #8]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	9301      	str	r3, [sp, #4]
 80093c4:	2301      	movs	r3, #1
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	2302      	movs	r3, #2
 80093ca:	2201      	movs	r2, #1
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f003 fa26 	bl	800c81e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af04      	add	r7, sp, #16
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	4608      	mov	r0, r1
 80093e6:	4611      	mov	r1, r2
 80093e8:	461a      	mov	r2, r3
 80093ea:	4603      	mov	r3, r0
 80093ec:	70fb      	strb	r3, [r7, #3]
 80093ee:	460b      	mov	r3, r1
 80093f0:	70bb      	strb	r3, [r7, #2]
 80093f2:	4613      	mov	r3, r2
 80093f4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80093f6:	7878      	ldrb	r0, [r7, #1]
 80093f8:	78ba      	ldrb	r2, [r7, #2]
 80093fa:	78f9      	ldrb	r1, [r7, #3]
 80093fc:	8b3b      	ldrh	r3, [r7, #24]
 80093fe:	9302      	str	r3, [sp, #8]
 8009400:	7d3b      	ldrb	r3, [r7, #20]
 8009402:	9301      	str	r3, [sp, #4]
 8009404:	7c3b      	ldrb	r3, [r7, #16]
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	4603      	mov	r3, r0
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f003 f9b9 	bl	800c782 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b082      	sub	sp, #8
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	460b      	mov	r3, r1
 8009424:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009426:	78fb      	ldrb	r3, [r7, #3]
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f003 f9d8 	bl	800c7e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	460b      	mov	r3, r1
 8009444:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f836 	bl	80094b8 <USBH_GetFreePipe>
 800944c:	4603      	mov	r3, r0
 800944e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009450:	89fb      	ldrh	r3, [r7, #14]
 8009452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009456:	4293      	cmp	r3, r2
 8009458:	d00a      	beq.n	8009470 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800945a:	78fa      	ldrb	r2, [r7, #3]
 800945c:	89fb      	ldrh	r3, [r7, #14]
 800945e:	f003 030f 	and.w	r3, r3, #15
 8009462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	33e0      	adds	r3, #224	; 0xe0
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	440b      	add	r3, r1
 800946e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009470:	89fb      	ldrh	r3, [r7, #14]
 8009472:	b2db      	uxtb	r3, r3
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009488:	78fb      	ldrb	r3, [r7, #3]
 800948a:	2b0a      	cmp	r3, #10
 800948c:	d80d      	bhi.n	80094aa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800948e:	78fb      	ldrb	r3, [r7, #3]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	33e0      	adds	r3, #224	; 0xe0
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	685a      	ldr	r2, [r3, #4]
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	33e0      	adds	r3, #224	; 0xe0
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	440b      	add	r3, r1
 80094a8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80094c4:	2300      	movs	r3, #0
 80094c6:	73fb      	strb	r3, [r7, #15]
 80094c8:	e00f      	b.n	80094ea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	33e0      	adds	r3, #224	; 0xe0
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d102      	bne.n	80094e4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80094de:	7bfb      	ldrb	r3, [r7, #15]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	e007      	b.n	80094f4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	3301      	adds	r3, #1
 80094e8:	73fb      	strb	r3, [r7, #15]
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
 80094ec:	2b0a      	cmp	r3, #10
 80094ee:	d9ec      	bls.n	80094ca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80094f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009500:	b480      	push	{r7}
 8009502:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009504:	bf00      	nop
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
	...

08009510 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009516:	f3ef 8305 	mrs	r3, IPSR
 800951a:	60bb      	str	r3, [r7, #8]
  return(result);
 800951c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10f      	bne.n	8009542 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009522:	f3ef 8310 	mrs	r3, PRIMASK
 8009526:	607b      	str	r3, [r7, #4]
  return(result);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d105      	bne.n	800953a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800952e:	f3ef 8311 	mrs	r3, BASEPRI
 8009532:	603b      	str	r3, [r7, #0]
  return(result);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d007      	beq.n	800954a <osKernelInitialize+0x3a>
 800953a:	4b0e      	ldr	r3, [pc, #56]	; (8009574 <osKernelInitialize+0x64>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b02      	cmp	r3, #2
 8009540:	d103      	bne.n	800954a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009542:	f06f 0305 	mvn.w	r3, #5
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	e00c      	b.n	8009564 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800954a:	4b0a      	ldr	r3, [pc, #40]	; (8009574 <osKernelInitialize+0x64>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d105      	bne.n	800955e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009552:	4b08      	ldr	r3, [pc, #32]	; (8009574 <osKernelInitialize+0x64>)
 8009554:	2201      	movs	r2, #1
 8009556:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009558:	2300      	movs	r3, #0
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	e002      	b.n	8009564 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800955e:	f04f 33ff 	mov.w	r3, #4294967295
 8009562:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009564:	68fb      	ldr	r3, [r7, #12]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	200000b8 	.word	0x200000b8

08009578 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800957e:	f3ef 8305 	mrs	r3, IPSR
 8009582:	60bb      	str	r3, [r7, #8]
  return(result);
 8009584:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10f      	bne.n	80095aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800958a:	f3ef 8310 	mrs	r3, PRIMASK
 800958e:	607b      	str	r3, [r7, #4]
  return(result);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d105      	bne.n	80095a2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009596:	f3ef 8311 	mrs	r3, BASEPRI
 800959a:	603b      	str	r3, [r7, #0]
  return(result);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d007      	beq.n	80095b2 <osKernelStart+0x3a>
 80095a2:	4b0f      	ldr	r3, [pc, #60]	; (80095e0 <osKernelStart+0x68>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d103      	bne.n	80095b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80095aa:	f06f 0305 	mvn.w	r3, #5
 80095ae:	60fb      	str	r3, [r7, #12]
 80095b0:	e010      	b.n	80095d4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80095b2:	4b0b      	ldr	r3, [pc, #44]	; (80095e0 <osKernelStart+0x68>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d109      	bne.n	80095ce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80095ba:	f7ff ffa1 	bl	8009500 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80095be:	4b08      	ldr	r3, [pc, #32]	; (80095e0 <osKernelStart+0x68>)
 80095c0:	2202      	movs	r2, #2
 80095c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80095c4:	f001 fa9a 	bl	800aafc <vTaskStartScheduler>
      stat = osOK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	e002      	b.n	80095d4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80095ce:	f04f 33ff 	mov.w	r3, #4294967295
 80095d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80095d4:	68fb      	ldr	r3, [r7, #12]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	200000b8 	.word	0x200000b8

080095e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b090      	sub	sp, #64	; 0x40
 80095e8:	af04      	add	r7, sp, #16
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80095f0:	2300      	movs	r3, #0
 80095f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095f4:	f3ef 8305 	mrs	r3, IPSR
 80095f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80095fa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f040 808f 	bne.w	8009720 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009602:	f3ef 8310 	mrs	r3, PRIMASK
 8009606:	61bb      	str	r3, [r7, #24]
  return(result);
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d105      	bne.n	800961a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800960e:	f3ef 8311 	mrs	r3, BASEPRI
 8009612:	617b      	str	r3, [r7, #20]
  return(result);
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <osThreadNew+0x3e>
 800961a:	4b44      	ldr	r3, [pc, #272]	; (800972c <osThreadNew+0x148>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b02      	cmp	r3, #2
 8009620:	d07e      	beq.n	8009720 <osThreadNew+0x13c>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d07b      	beq.n	8009720 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009628:	2380      	movs	r3, #128	; 0x80
 800962a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800962c:	2318      	movs	r3, #24
 800962e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009630:	2300      	movs	r3, #0
 8009632:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009634:	f04f 33ff 	mov.w	r3, #4294967295
 8009638:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d045      	beq.n	80096cc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <osThreadNew+0x6a>
        name = attr->name;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d002      	beq.n	800965c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	2b00      	cmp	r3, #0
 8009660:	d008      	beq.n	8009674 <osThreadNew+0x90>
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	2b38      	cmp	r3, #56	; 0x38
 8009666:	d805      	bhi.n	8009674 <osThreadNew+0x90>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <osThreadNew+0x94>
        return (NULL);
 8009674:	2300      	movs	r3, #0
 8009676:	e054      	b.n	8009722 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	695b      	ldr	r3, [r3, #20]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d003      	beq.n	8009688 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	089b      	lsrs	r3, r3, #2
 8009686:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00e      	beq.n	80096ae <osThreadNew+0xca>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	2b5b      	cmp	r3, #91	; 0x5b
 8009696:	d90a      	bls.n	80096ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800969c:	2b00      	cmp	r3, #0
 800969e:	d006      	beq.n	80096ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	695b      	ldr	r3, [r3, #20]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <osThreadNew+0xca>
        mem = 1;
 80096a8:	2301      	movs	r3, #1
 80096aa:	623b      	str	r3, [r7, #32]
 80096ac:	e010      	b.n	80096d0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10c      	bne.n	80096d0 <osThreadNew+0xec>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d108      	bne.n	80096d0 <osThreadNew+0xec>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	691b      	ldr	r3, [r3, #16]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d104      	bne.n	80096d0 <osThreadNew+0xec>
          mem = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	623b      	str	r3, [r7, #32]
 80096ca:	e001      	b.n	80096d0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80096cc:	2300      	movs	r3, #0
 80096ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d110      	bne.n	80096f8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80096de:	9202      	str	r2, [sp, #8]
 80096e0:	9301      	str	r3, [sp, #4]
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f001 f833 	bl	800a758 <xTaskCreateStatic>
 80096f2:	4603      	mov	r3, r0
 80096f4:	613b      	str	r3, [r7, #16]
 80096f6:	e013      	b.n	8009720 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80096f8:	6a3b      	ldr	r3, [r7, #32]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d110      	bne.n	8009720 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	b29a      	uxth	r2, r3
 8009702:	f107 0310 	add.w	r3, r7, #16
 8009706:	9301      	str	r3, [sp, #4]
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f001 f87b 	bl	800a80c <xTaskCreate>
 8009716:	4603      	mov	r3, r0
 8009718:	2b01      	cmp	r3, #1
 800971a:	d001      	beq.n	8009720 <osThreadNew+0x13c>
          hTask = NULL;
 800971c:	2300      	movs	r3, #0
 800971e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009720:	693b      	ldr	r3, [r7, #16]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3730      	adds	r7, #48	; 0x30
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	200000b8 	.word	0x200000b8

08009730 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009738:	f3ef 8305 	mrs	r3, IPSR
 800973c:	613b      	str	r3, [r7, #16]
  return(result);
 800973e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10f      	bne.n	8009764 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009744:	f3ef 8310 	mrs	r3, PRIMASK
 8009748:	60fb      	str	r3, [r7, #12]
  return(result);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d105      	bne.n	800975c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009750:	f3ef 8311 	mrs	r3, BASEPRI
 8009754:	60bb      	str	r3, [r7, #8]
  return(result);
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d007      	beq.n	800976c <osDelay+0x3c>
 800975c:	4b0a      	ldr	r3, [pc, #40]	; (8009788 <osDelay+0x58>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b02      	cmp	r3, #2
 8009762:	d103      	bne.n	800976c <osDelay+0x3c>
    stat = osErrorISR;
 8009764:	f06f 0305 	mvn.w	r3, #5
 8009768:	617b      	str	r3, [r7, #20]
 800976a:	e007      	b.n	800977c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800976c:	2300      	movs	r3, #0
 800976e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d002      	beq.n	800977c <osDelay+0x4c>
      vTaskDelay(ticks);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f001 f98c 	bl	800aa94 <vTaskDelay>
    }
  }

  return (stat);
 800977c:	697b      	ldr	r3, [r7, #20]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	200000b8 	.word	0x200000b8

0800978c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800978c:	b580      	push	{r7, lr}
 800978e:	b08c      	sub	sp, #48	; 0x30
 8009790:	af02      	add	r7, sp, #8
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009798:	2300      	movs	r3, #0
 800979a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800979c:	f3ef 8305 	mrs	r3, IPSR
 80097a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80097a2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d170      	bne.n	800988a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097a8:	f3ef 8310 	mrs	r3, PRIMASK
 80097ac:	617b      	str	r3, [r7, #20]
  return(result);
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d105      	bne.n	80097c0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097b4:	f3ef 8311 	mrs	r3, BASEPRI
 80097b8:	613b      	str	r3, [r7, #16]
  return(result);
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d003      	beq.n	80097c8 <osMessageQueueNew+0x3c>
 80097c0:	4b34      	ldr	r3, [pc, #208]	; (8009894 <osMessageQueueNew+0x108>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d060      	beq.n	800988a <osMessageQueueNew+0xfe>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d05d      	beq.n	800988a <osMessageQueueNew+0xfe>
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d05a      	beq.n	800988a <osMessageQueueNew+0xfe>
    mem = -1;
 80097d4:	f04f 33ff 	mov.w	r3, #4294967295
 80097d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d029      	beq.n	8009834 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d012      	beq.n	800980e <osMessageQueueNew+0x82>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	2b4f      	cmp	r3, #79	; 0x4f
 80097ee:	d90e      	bls.n	800980e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00a      	beq.n	800980e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	695a      	ldr	r2, [r3, #20]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	68b9      	ldr	r1, [r7, #8]
 8009800:	fb01 f303 	mul.w	r3, r1, r3
 8009804:	429a      	cmp	r2, r3
 8009806:	d302      	bcc.n	800980e <osMessageQueueNew+0x82>
        mem = 1;
 8009808:	2301      	movs	r3, #1
 800980a:	623b      	str	r3, [r7, #32]
 800980c:	e014      	b.n	8009838 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d110      	bne.n	8009838 <osMessageQueueNew+0xac>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d10c      	bne.n	8009838 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009822:	2b00      	cmp	r3, #0
 8009824:	d108      	bne.n	8009838 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	695b      	ldr	r3, [r3, #20]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d104      	bne.n	8009838 <osMessageQueueNew+0xac>
          mem = 0;
 800982e:	2300      	movs	r3, #0
 8009830:	623b      	str	r3, [r7, #32]
 8009832:	e001      	b.n	8009838 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d10c      	bne.n	8009858 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	691a      	ldr	r2, [r3, #16]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6899      	ldr	r1, [r3, #8]
 8009846:	2300      	movs	r3, #0
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	460b      	mov	r3, r1
 800984c:	68b9      	ldr	r1, [r7, #8]
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f000 fa58 	bl	8009d04 <xQueueGenericCreateStatic>
 8009854:	6278      	str	r0, [r7, #36]	; 0x24
 8009856:	e008      	b.n	800986a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d105      	bne.n	800986a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800985e:	2200      	movs	r2, #0
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 fac1 	bl	8009dea <xQueueGenericCreate>
 8009868:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00c      	beq.n	800988a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d003      	beq.n	800987e <osMessageQueueNew+0xf2>
        name = attr->name;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	61fb      	str	r3, [r7, #28]
 800987c:	e001      	b.n	8009882 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800987e:	2300      	movs	r3, #0
 8009880:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009882:	69f9      	ldr	r1, [r7, #28]
 8009884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009886:	f000 ff0b 	bl	800a6a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800988c:	4618      	mov	r0, r3
 800988e:	3728      	adds	r7, #40	; 0x28
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	200000b8 	.word	0x200000b8

08009898 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009898:	b580      	push	{r7, lr}
 800989a:	b08a      	sub	sp, #40	; 0x28
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	603b      	str	r3, [r7, #0]
 80098a4:	4613      	mov	r3, r2
 80098a6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098b0:	f3ef 8305 	mrs	r3, IPSR
 80098b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80098b6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d10f      	bne.n	80098dc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098bc:	f3ef 8310 	mrs	r3, PRIMASK
 80098c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d105      	bne.n	80098d4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80098c8:	f3ef 8311 	mrs	r3, BASEPRI
 80098cc:	617b      	str	r3, [r7, #20]
  return(result);
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d02c      	beq.n	800992e <osMessageQueuePut+0x96>
 80098d4:	4b28      	ldr	r3, [pc, #160]	; (8009978 <osMessageQueuePut+0xe0>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d128      	bne.n	800992e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d005      	beq.n	80098ee <osMessageQueuePut+0x56>
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <osMessageQueuePut+0x56>
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80098ee:	f06f 0303 	mvn.w	r3, #3
 80098f2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80098f4:	e039      	b.n	800996a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80098f6:	2300      	movs	r3, #0
 80098f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80098fa:	f107 0210 	add.w	r2, r7, #16
 80098fe:	2300      	movs	r3, #0
 8009900:	68b9      	ldr	r1, [r7, #8]
 8009902:	6a38      	ldr	r0, [r7, #32]
 8009904:	f000 fbce 	bl	800a0a4 <xQueueGenericSendFromISR>
 8009908:	4603      	mov	r3, r0
 800990a:	2b01      	cmp	r3, #1
 800990c:	d003      	beq.n	8009916 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800990e:	f06f 0302 	mvn.w	r3, #2
 8009912:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009914:	e029      	b.n	800996a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d026      	beq.n	800996a <osMessageQueuePut+0xd2>
 800991c:	4b17      	ldr	r3, [pc, #92]	; (800997c <osMessageQueuePut+0xe4>)
 800991e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800992c:	e01d      	b.n	800996a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800992e:	6a3b      	ldr	r3, [r7, #32]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <osMessageQueuePut+0xa2>
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d103      	bne.n	8009942 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800993a:	f06f 0303 	mvn.w	r3, #3
 800993e:	627b      	str	r3, [r7, #36]	; 0x24
 8009940:	e014      	b.n	800996c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009942:	2300      	movs	r3, #0
 8009944:	683a      	ldr	r2, [r7, #0]
 8009946:	68b9      	ldr	r1, [r7, #8]
 8009948:	6a38      	ldr	r0, [r7, #32]
 800994a:	f000 fab1 	bl	8009eb0 <xQueueGenericSend>
 800994e:	4603      	mov	r3, r0
 8009950:	2b01      	cmp	r3, #1
 8009952:	d00b      	beq.n	800996c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800995a:	f06f 0301 	mvn.w	r3, #1
 800995e:	627b      	str	r3, [r7, #36]	; 0x24
 8009960:	e004      	b.n	800996c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8009962:	f06f 0302 	mvn.w	r3, #2
 8009966:	627b      	str	r3, [r7, #36]	; 0x24
 8009968:	e000      	b.n	800996c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800996a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800996e:	4618      	mov	r0, r3
 8009970:	3728      	adds	r7, #40	; 0x28
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	200000b8 	.word	0x200000b8
 800997c:	e000ed04 	.word	0xe000ed04

08009980 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009980:	b580      	push	{r7, lr}
 8009982:	b08a      	sub	sp, #40	; 0x28
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009992:	2300      	movs	r3, #0
 8009994:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009996:	f3ef 8305 	mrs	r3, IPSR
 800999a:	61fb      	str	r3, [r7, #28]
  return(result);
 800999c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10f      	bne.n	80099c2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099a2:	f3ef 8310 	mrs	r3, PRIMASK
 80099a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d105      	bne.n	80099ba <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80099ae:	f3ef 8311 	mrs	r3, BASEPRI
 80099b2:	617b      	str	r3, [r7, #20]
  return(result);
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d02c      	beq.n	8009a14 <osMessageQueueGet+0x94>
 80099ba:	4b28      	ldr	r3, [pc, #160]	; (8009a5c <osMessageQueueGet+0xdc>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d128      	bne.n	8009a14 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d005      	beq.n	80099d4 <osMessageQueueGet+0x54>
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d002      	beq.n	80099d4 <osMessageQueueGet+0x54>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80099d4:	f06f 0303 	mvn.w	r3, #3
 80099d8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099da:	e038      	b.n	8009a4e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80099dc:	2300      	movs	r3, #0
 80099de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80099e0:	f107 0310 	add.w	r3, r7, #16
 80099e4:	461a      	mov	r2, r3
 80099e6:	68b9      	ldr	r1, [r7, #8]
 80099e8:	6a38      	ldr	r0, [r7, #32]
 80099ea:	f000 fccb 	bl	800a384 <xQueueReceiveFromISR>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d003      	beq.n	80099fc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80099f4:	f06f 0302 	mvn.w	r3, #2
 80099f8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099fa:	e028      	b.n	8009a4e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d025      	beq.n	8009a4e <osMessageQueueGet+0xce>
 8009a02:	4b17      	ldr	r3, [pc, #92]	; (8009a60 <osMessageQueueGet+0xe0>)
 8009a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a08:	601a      	str	r2, [r3, #0]
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a12:	e01c      	b.n	8009a4e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <osMessageQueueGet+0xa0>
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d103      	bne.n	8009a28 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009a20:	f06f 0303 	mvn.w	r3, #3
 8009a24:	627b      	str	r3, [r7, #36]	; 0x24
 8009a26:	e013      	b.n	8009a50 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	68b9      	ldr	r1, [r7, #8]
 8009a2c:	6a38      	ldr	r0, [r7, #32]
 8009a2e:	f000 fbcd 	bl	800a1cc <xQueueReceive>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d00b      	beq.n	8009a50 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d003      	beq.n	8009a46 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009a3e:	f06f 0301 	mvn.w	r3, #1
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
 8009a44:	e004      	b.n	8009a50 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009a46:	f06f 0302 	mvn.w	r3, #2
 8009a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a4c:	e000      	b.n	8009a50 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009a4e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3728      	adds	r7, #40	; 0x28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	200000b8 	.word	0x200000b8
 8009a60:	e000ed04 	.word	0xe000ed04

08009a64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4a07      	ldr	r2, [pc, #28]	; (8009a90 <vApplicationGetIdleTaskMemory+0x2c>)
 8009a74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	4a06      	ldr	r2, [pc, #24]	; (8009a94 <vApplicationGetIdleTaskMemory+0x30>)
 8009a7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2280      	movs	r2, #128	; 0x80
 8009a80:	601a      	str	r2, [r3, #0]
}
 8009a82:	bf00      	nop
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	200000bc 	.word	0x200000bc
 8009a94:	20000118 	.word	0x20000118

08009a98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4a07      	ldr	r2, [pc, #28]	; (8009ac4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009aa8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	4a06      	ldr	r2, [pc, #24]	; (8009ac8 <vApplicationGetTimerTaskMemory+0x30>)
 8009aae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ab6:	601a      	str	r2, [r3, #0]
}
 8009ab8:	bf00      	nop
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	20000318 	.word	0x20000318
 8009ac8:	20000374 	.word	0x20000374

08009acc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f103 0208 	add.w	r2, r3, #8
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f103 0208 	add.w	r2, r3, #8
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f103 0208 	add.w	r2, r3, #8
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b1a:	bf00      	nop
 8009b1c:	370c      	adds	r7, #12
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b26:	b480      	push	{r7}
 8009b28:	b085      	sub	sp, #20
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	689a      	ldr	r2, [r3, #8]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	1c5a      	adds	r2, r3, #1
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	601a      	str	r2, [r3, #0]
}
 8009b62:	bf00      	nop
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b085      	sub	sp, #20
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b84:	d103      	bne.n	8009b8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	60fb      	str	r3, [r7, #12]
 8009b8c:	e00c      	b.n	8009ba8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	3308      	adds	r3, #8
 8009b92:	60fb      	str	r3, [r7, #12]
 8009b94:	e002      	b.n	8009b9c <vListInsert+0x2e>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	60fb      	str	r3, [r7, #12]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d2f6      	bcs.n	8009b96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	685a      	ldr	r2, [r3, #4]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	683a      	ldr	r2, [r7, #0]
 8009bb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	683a      	ldr	r2, [r7, #0]
 8009bc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	1c5a      	adds	r2, r3, #1
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	601a      	str	r2, [r3, #0]
}
 8009bd4:	bf00      	nop
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	6892      	ldr	r2, [r2, #8]
 8009bf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	6852      	ldr	r2, [r2, #4]
 8009c00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d103      	bne.n	8009c14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	689a      	ldr	r2, [r3, #8]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	1e5a      	subs	r2, r3, #1
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d109      	bne.n	8009c5c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4c:	f383 8811 	msr	BASEPRI, r3
 8009c50:	f3bf 8f6f 	isb	sy
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	60bb      	str	r3, [r7, #8]
 8009c5a:	e7fe      	b.n	8009c5a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009c5c:	f002 f8ce 	bl	800bdfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c68:	68f9      	ldr	r1, [r7, #12]
 8009c6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c6c:	fb01 f303 	mul.w	r3, r1, r3
 8009c70:	441a      	add	r2, r3
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	68f9      	ldr	r1, [r7, #12]
 8009c90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c92:	fb01 f303 	mul.w	r3, r1, r3
 8009c96:	441a      	add	r2, r3
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	22ff      	movs	r2, #255	; 0xff
 8009ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	22ff      	movs	r2, #255	; 0xff
 8009ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d114      	bne.n	8009cdc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d01a      	beq.n	8009cf0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3310      	adds	r3, #16
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f001 f99c 	bl	800affc <xTaskRemoveFromEventList>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d012      	beq.n	8009cf0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009cca:	4b0d      	ldr	r3, [pc, #52]	; (8009d00 <xQueueGenericReset+0xcc>)
 8009ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd0:	601a      	str	r2, [r3, #0]
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	e009      	b.n	8009cf0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	3310      	adds	r3, #16
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7ff fef3 	bl	8009acc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3324      	adds	r3, #36	; 0x24
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7ff feee 	bl	8009acc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009cf0:	f002 f8b2 	bl	800be58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009cf4:	2301      	movs	r3, #1
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	e000ed04 	.word	0xe000ed04

08009d04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b08e      	sub	sp, #56	; 0x38
 8009d08:	af02      	add	r7, sp, #8
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
 8009d10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d109      	bne.n	8009d2c <xQueueGenericCreateStatic+0x28>
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d2a:	e7fe      	b.n	8009d2a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d109      	bne.n	8009d46 <xQueueGenericCreateStatic+0x42>
 8009d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	627b      	str	r3, [r7, #36]	; 0x24
 8009d44:	e7fe      	b.n	8009d44 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d002      	beq.n	8009d52 <xQueueGenericCreateStatic+0x4e>
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <xQueueGenericCreateStatic+0x52>
 8009d52:	2301      	movs	r3, #1
 8009d54:	e000      	b.n	8009d58 <xQueueGenericCreateStatic+0x54>
 8009d56:	2300      	movs	r3, #0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d109      	bne.n	8009d70 <xQueueGenericCreateStatic+0x6c>
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	623b      	str	r3, [r7, #32]
 8009d6e:	e7fe      	b.n	8009d6e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d102      	bne.n	8009d7c <xQueueGenericCreateStatic+0x78>
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <xQueueGenericCreateStatic+0x7c>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e000      	b.n	8009d82 <xQueueGenericCreateStatic+0x7e>
 8009d80:	2300      	movs	r3, #0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d109      	bne.n	8009d9a <xQueueGenericCreateStatic+0x96>
 8009d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	61fb      	str	r3, [r7, #28]
 8009d98:	e7fe      	b.n	8009d98 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d9a:	2350      	movs	r3, #80	; 0x50
 8009d9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	2b50      	cmp	r3, #80	; 0x50
 8009da2:	d009      	beq.n	8009db8 <xQueueGenericCreateStatic+0xb4>
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	61bb      	str	r3, [r7, #24]
 8009db6:	e7fe      	b.n	8009db6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009db8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00d      	beq.n	8009de0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009dcc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	68b9      	ldr	r1, [r7, #8]
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 f844 	bl	8009e68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3730      	adds	r7, #48	; 0x30
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b08a      	sub	sp, #40	; 0x28
 8009dee:	af02      	add	r7, sp, #8
 8009df0:	60f8      	str	r0, [r7, #12]
 8009df2:	60b9      	str	r1, [r7, #8]
 8009df4:	4613      	mov	r3, r2
 8009df6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d109      	bne.n	8009e12 <xQueueGenericCreate+0x28>
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	613b      	str	r3, [r7, #16]
 8009e10:	e7fe      	b.n	8009e10 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d102      	bne.n	8009e1e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	61fb      	str	r3, [r7, #28]
 8009e1c:	e004      	b.n	8009e28 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	fb02 f303 	mul.w	r3, r2, r3
 8009e26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	3350      	adds	r3, #80	; 0x50
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f002 f8ff 	bl	800c030 <pvPortMalloc>
 8009e32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d011      	beq.n	8009e5e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	3350      	adds	r3, #80	; 0x50
 8009e42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e4c:	79fa      	ldrb	r2, [r7, #7]
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	4613      	mov	r3, r2
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	68b9      	ldr	r1, [r7, #8]
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 f805 	bl	8009e68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e5e:	69bb      	ldr	r3, [r7, #24]
	}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3720      	adds	r7, #32
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d103      	bne.n	8009e84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	69ba      	ldr	r2, [r7, #24]
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	e002      	b.n	8009e8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009e96:	2101      	movs	r1, #1
 8009e98:	69b8      	ldr	r0, [r7, #24]
 8009e9a:	f7ff fecb 	bl	8009c34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	78fa      	ldrb	r2, [r7, #3]
 8009ea2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ea6:	bf00      	nop
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
	...

08009eb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08e      	sub	sp, #56	; 0x38
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d109      	bne.n	8009ee0 <xQueueGenericSend+0x30>
 8009ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed0:	f383 8811 	msr	BASEPRI, r3
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ede:	e7fe      	b.n	8009ede <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d103      	bne.n	8009eee <xQueueGenericSend+0x3e>
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <xQueueGenericSend+0x42>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e000      	b.n	8009ef4 <xQueueGenericSend+0x44>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d109      	bne.n	8009f0c <xQueueGenericSend+0x5c>
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	627b      	str	r3, [r7, #36]	; 0x24
 8009f0a:	e7fe      	b.n	8009f0a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d103      	bne.n	8009f1a <xQueueGenericSend+0x6a>
 8009f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d101      	bne.n	8009f1e <xQueueGenericSend+0x6e>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e000      	b.n	8009f20 <xQueueGenericSend+0x70>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d109      	bne.n	8009f38 <xQueueGenericSend+0x88>
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	623b      	str	r3, [r7, #32]
 8009f36:	e7fe      	b.n	8009f36 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f38:	f001 fa16 	bl	800b368 <xTaskGetSchedulerState>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d102      	bne.n	8009f48 <xQueueGenericSend+0x98>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d101      	bne.n	8009f4c <xQueueGenericSend+0x9c>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e000      	b.n	8009f4e <xQueueGenericSend+0x9e>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d109      	bne.n	8009f66 <xQueueGenericSend+0xb6>
 8009f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f56:	f383 8811 	msr	BASEPRI, r3
 8009f5a:	f3bf 8f6f 	isb	sy
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	61fb      	str	r3, [r7, #28]
 8009f64:	e7fe      	b.n	8009f64 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f66:	f001 ff49 	bl	800bdfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d302      	bcc.n	8009f7c <xQueueGenericSend+0xcc>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d129      	bne.n	8009fd0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	68b9      	ldr	r1, [r7, #8]
 8009f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f82:	f000 fa7c 	bl	800a47e <prvCopyDataToQueue>
 8009f86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d010      	beq.n	8009fb2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f92:	3324      	adds	r3, #36	; 0x24
 8009f94:	4618      	mov	r0, r3
 8009f96:	f001 f831 	bl	800affc <xTaskRemoveFromEventList>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d013      	beq.n	8009fc8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009fa0:	4b3f      	ldr	r3, [pc, #252]	; (800a0a0 <xQueueGenericSend+0x1f0>)
 8009fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	e00a      	b.n	8009fc8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d007      	beq.n	8009fc8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009fb8:	4b39      	ldr	r3, [pc, #228]	; (800a0a0 <xQueueGenericSend+0x1f0>)
 8009fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fbe:	601a      	str	r2, [r3, #0]
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009fc8:	f001 ff46 	bl	800be58 <vPortExitCritical>
				return pdPASS;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e063      	b.n	800a098 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d103      	bne.n	8009fde <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009fd6:	f001 ff3f 	bl	800be58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	e05c      	b.n	800a098 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d106      	bne.n	8009ff2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fe4:	f107 0314 	add.w	r3, r7, #20
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f001 f869 	bl	800b0c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ff2:	f001 ff31 	bl	800be58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ff6:	f000 fde5 	bl	800abc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ffa:	f001 feff 	bl	800bdfc <vPortEnterCritical>
 8009ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a004:	b25b      	sxtb	r3, r3
 800a006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00a:	d103      	bne.n	800a014 <xQueueGenericSend+0x164>
 800a00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a01a:	b25b      	sxtb	r3, r3
 800a01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a020:	d103      	bne.n	800a02a <xQueueGenericSend+0x17a>
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a02a:	f001 ff15 	bl	800be58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a02e:	1d3a      	adds	r2, r7, #4
 800a030:	f107 0314 	add.w	r3, r7, #20
 800a034:	4611      	mov	r1, r2
 800a036:	4618      	mov	r0, r3
 800a038:	f001 f858 	bl	800b0ec <xTaskCheckForTimeOut>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d124      	bne.n	800a08c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a042:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a044:	f000 fb13 	bl	800a66e <prvIsQueueFull>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d018      	beq.n	800a080 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a050:	3310      	adds	r3, #16
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	4611      	mov	r1, r2
 800a056:	4618      	mov	r0, r3
 800a058:	f000 ff82 	bl	800af60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a05c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a05e:	f000 fa9e 	bl	800a59e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a062:	f000 fdbd 	bl	800abe0 <xTaskResumeAll>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f47f af7c 	bne.w	8009f66 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a06e:	4b0c      	ldr	r3, [pc, #48]	; (800a0a0 <xQueueGenericSend+0x1f0>)
 800a070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a074:	601a      	str	r2, [r3, #0]
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	e772      	b.n	8009f66 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a082:	f000 fa8c 	bl	800a59e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a086:	f000 fdab 	bl	800abe0 <xTaskResumeAll>
 800a08a:	e76c      	b.n	8009f66 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a08c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a08e:	f000 fa86 	bl	800a59e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a092:	f000 fda5 	bl	800abe0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a096:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3738      	adds	r7, #56	; 0x38
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	e000ed04 	.word	0xe000ed04

0800a0a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08e      	sub	sp, #56	; 0x38
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
 800a0b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d109      	bne.n	800a0d0 <xQueueGenericSendFromISR+0x2c>
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ce:	e7fe      	b.n	800a0ce <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d103      	bne.n	800a0de <xQueueGenericSendFromISR+0x3a>
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <xQueueGenericSendFromISR+0x3e>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e000      	b.n	800a0e4 <xQueueGenericSendFromISR+0x40>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d109      	bne.n	800a0fc <xQueueGenericSendFromISR+0x58>
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	623b      	str	r3, [r7, #32]
 800a0fa:	e7fe      	b.n	800a0fa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d103      	bne.n	800a10a <xQueueGenericSendFromISR+0x66>
 800a102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a106:	2b01      	cmp	r3, #1
 800a108:	d101      	bne.n	800a10e <xQueueGenericSendFromISR+0x6a>
 800a10a:	2301      	movs	r3, #1
 800a10c:	e000      	b.n	800a110 <xQueueGenericSendFromISR+0x6c>
 800a10e:	2300      	movs	r3, #0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d109      	bne.n	800a128 <xQueueGenericSendFromISR+0x84>
 800a114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	61fb      	str	r3, [r7, #28]
 800a126:	e7fe      	b.n	800a126 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a128:	f001 ff44 	bl	800bfb4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a12c:	f3ef 8211 	mrs	r2, BASEPRI
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	61ba      	str	r2, [r7, #24]
 800a142:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a144:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a146:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a150:	429a      	cmp	r2, r3
 800a152:	d302      	bcc.n	800a15a <xQueueGenericSendFromISR+0xb6>
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	2b02      	cmp	r3, #2
 800a158:	d12c      	bne.n	800a1b4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	68b9      	ldr	r1, [r7, #8]
 800a168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a16a:	f000 f988 	bl	800a47e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a16e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a176:	d112      	bne.n	800a19e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d016      	beq.n	800a1ae <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a182:	3324      	adds	r3, #36	; 0x24
 800a184:	4618      	mov	r0, r3
 800a186:	f000 ff39 	bl	800affc <xTaskRemoveFromEventList>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00e      	beq.n	800a1ae <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00b      	beq.n	800a1ae <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	e007      	b.n	800a1ae <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a19e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	b25a      	sxtb	r2, r3
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a1b2:	e001      	b.n	800a1b8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3738      	adds	r7, #56	; 0x38
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b08c      	sub	sp, #48	; 0x30
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d109      	bne.n	800a1fa <xQueueReceive+0x2e>
	__asm volatile
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	f383 8811 	msr	BASEPRI, r3
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	623b      	str	r3, [r7, #32]
 800a1f8:	e7fe      	b.n	800a1f8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d103      	bne.n	800a208 <xQueueReceive+0x3c>
 800a200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <xQueueReceive+0x40>
 800a208:	2301      	movs	r3, #1
 800a20a:	e000      	b.n	800a20e <xQueueReceive+0x42>
 800a20c:	2300      	movs	r3, #0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d109      	bne.n	800a226 <xQueueReceive+0x5a>
 800a212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	61fb      	str	r3, [r7, #28]
 800a224:	e7fe      	b.n	800a224 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a226:	f001 f89f 	bl	800b368 <xTaskGetSchedulerState>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d102      	bne.n	800a236 <xQueueReceive+0x6a>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d101      	bne.n	800a23a <xQueueReceive+0x6e>
 800a236:	2301      	movs	r3, #1
 800a238:	e000      	b.n	800a23c <xQueueReceive+0x70>
 800a23a:	2300      	movs	r3, #0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d109      	bne.n	800a254 <xQueueReceive+0x88>
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	61bb      	str	r3, [r7, #24]
 800a252:	e7fe      	b.n	800a252 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a254:	f001 fdd2 	bl	800bdfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a260:	2b00      	cmp	r3, #0
 800a262:	d01f      	beq.n	800a2a4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a264:	68b9      	ldr	r1, [r7, #8]
 800a266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a268:	f000 f973 	bl	800a552 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	1e5a      	subs	r2, r3, #1
 800a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a272:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00f      	beq.n	800a29c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27e:	3310      	adds	r3, #16
 800a280:	4618      	mov	r0, r3
 800a282:	f000 febb 	bl	800affc <xTaskRemoveFromEventList>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d007      	beq.n	800a29c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a28c:	4b3c      	ldr	r3, [pc, #240]	; (800a380 <xQueueReceive+0x1b4>)
 800a28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a29c:	f001 fddc 	bl	800be58 <vPortExitCritical>
				return pdPASS;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e069      	b.n	800a378 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d103      	bne.n	800a2b2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2aa:	f001 fdd5 	bl	800be58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e062      	b.n	800a378 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d106      	bne.n	800a2c6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2b8:	f107 0310 	add.w	r3, r7, #16
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f000 feff 	bl	800b0c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2c6:	f001 fdc7 	bl	800be58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2ca:	f000 fc7b 	bl	800abc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2ce:	f001 fd95 	bl	800bdfc <vPortEnterCritical>
 800a2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2d8:	b25b      	sxtb	r3, r3
 800a2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2de:	d103      	bne.n	800a2e8 <xQueueReceive+0x11c>
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2ee:	b25b      	sxtb	r3, r3
 800a2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f4:	d103      	bne.n	800a2fe <xQueueReceive+0x132>
 800a2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2fe:	f001 fdab 	bl	800be58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a302:	1d3a      	adds	r2, r7, #4
 800a304:	f107 0310 	add.w	r3, r7, #16
 800a308:	4611      	mov	r1, r2
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 feee 	bl	800b0ec <xTaskCheckForTimeOut>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d123      	bne.n	800a35e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a318:	f000 f993 	bl	800a642 <prvIsQueueEmpty>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d017      	beq.n	800a352 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a324:	3324      	adds	r3, #36	; 0x24
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	4611      	mov	r1, r2
 800a32a:	4618      	mov	r0, r3
 800a32c:	f000 fe18 	bl	800af60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a332:	f000 f934 	bl	800a59e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a336:	f000 fc53 	bl	800abe0 <xTaskResumeAll>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d189      	bne.n	800a254 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a340:	4b0f      	ldr	r3, [pc, #60]	; (800a380 <xQueueReceive+0x1b4>)
 800a342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	e780      	b.n	800a254 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a354:	f000 f923 	bl	800a59e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a358:	f000 fc42 	bl	800abe0 <xTaskResumeAll>
 800a35c:	e77a      	b.n	800a254 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a35e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a360:	f000 f91d 	bl	800a59e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a364:	f000 fc3c 	bl	800abe0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a36a:	f000 f96a 	bl	800a642 <prvIsQueueEmpty>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	f43f af6f 	beq.w	800a254 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a376:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3730      	adds	r7, #48	; 0x30
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	e000ed04 	.word	0xe000ed04

0800a384 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b08e      	sub	sp, #56	; 0x38
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a396:	2b00      	cmp	r3, #0
 800a398:	d109      	bne.n	800a3ae <xQueueReceiveFromISR+0x2a>
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	623b      	str	r3, [r7, #32]
 800a3ac:	e7fe      	b.n	800a3ac <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d103      	bne.n	800a3bc <xQueueReceiveFromISR+0x38>
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d101      	bne.n	800a3c0 <xQueueReceiveFromISR+0x3c>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e000      	b.n	800a3c2 <xQueueReceiveFromISR+0x3e>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d109      	bne.n	800a3da <xQueueReceiveFromISR+0x56>
 800a3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ca:	f383 8811 	msr	BASEPRI, r3
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	61fb      	str	r3, [r7, #28]
 800a3d8:	e7fe      	b.n	800a3d8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3da:	f001 fdeb 	bl	800bfb4 <vPortValidateInterruptPriority>
	__asm volatile
 800a3de:	f3ef 8211 	mrs	r2, BASEPRI
 800a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	61ba      	str	r2, [r7, #24]
 800a3f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a3f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a402:	2b00      	cmp	r3, #0
 800a404:	d02f      	beq.n	800a466 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a40c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a410:	68b9      	ldr	r1, [r7, #8]
 800a412:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a414:	f000 f89d 	bl	800a552 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41a:	1e5a      	subs	r2, r3, #1
 800a41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a420:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a428:	d112      	bne.n	800a450 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d016      	beq.n	800a460 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	3310      	adds	r3, #16
 800a436:	4618      	mov	r0, r3
 800a438:	f000 fde0 	bl	800affc <xTaskRemoveFromEventList>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00e      	beq.n	800a460 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00b      	beq.n	800a460 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	e007      	b.n	800a460 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a454:	3301      	adds	r3, #1
 800a456:	b2db      	uxtb	r3, r3
 800a458:	b25a      	sxtb	r2, r3
 800a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a460:	2301      	movs	r3, #1
 800a462:	637b      	str	r3, [r7, #52]	; 0x34
 800a464:	e001      	b.n	800a46a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800a466:	2300      	movs	r3, #0
 800a468:	637b      	str	r3, [r7, #52]	; 0x34
 800a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a476:	4618      	mov	r0, r3
 800a478:	3738      	adds	r7, #56	; 0x38
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b086      	sub	sp, #24
 800a482:	af00      	add	r7, sp, #0
 800a484:	60f8      	str	r0, [r7, #12]
 800a486:	60b9      	str	r1, [r7, #8]
 800a488:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a48a:	2300      	movs	r3, #0
 800a48c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a492:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10d      	bne.n	800a4b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d14d      	bne.n	800a540 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f000 ff7b 	bl	800b3a4 <xTaskPriorityDisinherit>
 800a4ae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	609a      	str	r2, [r3, #8]
 800a4b6:	e043      	b.n	800a540 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d119      	bne.n	800a4f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6858      	ldr	r0, [r3, #4]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	f002 fac3 	bl	800ca54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	685a      	ldr	r2, [r3, #4]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d6:	441a      	add	r2, r3
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	685a      	ldr	r2, [r3, #4]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d32b      	bcc.n	800a540 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	605a      	str	r2, [r3, #4]
 800a4f0:	e026      	b.n	800a540 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	68d8      	ldr	r0, [r3, #12]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	68b9      	ldr	r1, [r7, #8]
 800a4fe:	f002 faa9 	bl	800ca54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	68da      	ldr	r2, [r3, #12]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50a:	425b      	negs	r3, r3
 800a50c:	441a      	add	r2, r3
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	68da      	ldr	r2, [r3, #12]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d207      	bcs.n	800a52e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	689a      	ldr	r2, [r3, #8]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a526:	425b      	negs	r3, r3
 800a528:	441a      	add	r2, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b02      	cmp	r3, #2
 800a532:	d105      	bne.n	800a540 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d002      	beq.n	800a540 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	3b01      	subs	r3, #1
 800a53e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	1c5a      	adds	r2, r3, #1
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a548:	697b      	ldr	r3, [r7, #20]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3718      	adds	r7, #24
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a560:	2b00      	cmp	r3, #0
 800a562:	d018      	beq.n	800a596 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68da      	ldr	r2, [r3, #12]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56c:	441a      	add	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	68da      	ldr	r2, [r3, #12]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d303      	bcc.n	800a586 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68d9      	ldr	r1, [r3, #12]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58e:	461a      	mov	r2, r3
 800a590:	6838      	ldr	r0, [r7, #0]
 800a592:	f002 fa5f 	bl	800ca54 <memcpy>
	}
}
 800a596:	bf00      	nop
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a5a6:	f001 fc29 	bl	800bdfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5b2:	e011      	b.n	800a5d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d012      	beq.n	800a5e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	3324      	adds	r3, #36	; 0x24
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 fd1b 	bl	800affc <xTaskRemoveFromEventList>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a5cc:	f000 fdee 	bl	800b1ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	dce9      	bgt.n	800a5b4 <prvUnlockQueue+0x16>
 800a5e0:	e000      	b.n	800a5e4 <prvUnlockQueue+0x46>
					break;
 800a5e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	22ff      	movs	r2, #255	; 0xff
 800a5e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a5ec:	f001 fc34 	bl	800be58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a5f0:	f001 fc04 	bl	800bdfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5fc:	e011      	b.n	800a622 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d012      	beq.n	800a62c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	3310      	adds	r3, #16
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 fcf6 	bl	800affc <xTaskRemoveFromEventList>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a616:	f000 fdc9 	bl	800b1ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
 800a61c:	3b01      	subs	r3, #1
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a622:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a626:	2b00      	cmp	r3, #0
 800a628:	dce9      	bgt.n	800a5fe <prvUnlockQueue+0x60>
 800a62a:	e000      	b.n	800a62e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a62c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	22ff      	movs	r2, #255	; 0xff
 800a632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a636:	f001 fc0f 	bl	800be58 <vPortExitCritical>
}
 800a63a:	bf00      	nop
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a64a:	f001 fbd7 	bl	800bdfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a652:	2b00      	cmp	r3, #0
 800a654:	d102      	bne.n	800a65c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a656:	2301      	movs	r3, #1
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	e001      	b.n	800a660 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a65c:	2300      	movs	r3, #0
 800a65e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a660:	f001 fbfa 	bl	800be58 <vPortExitCritical>

	return xReturn;
 800a664:	68fb      	ldr	r3, [r7, #12]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b084      	sub	sp, #16
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a676:	f001 fbc1 	bl	800bdfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a682:	429a      	cmp	r2, r3
 800a684:	d102      	bne.n	800a68c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a686:	2301      	movs	r3, #1
 800a688:	60fb      	str	r3, [r7, #12]
 800a68a:	e001      	b.n	800a690 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a68c:	2300      	movs	r3, #0
 800a68e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a690:	f001 fbe2 	bl	800be58 <vPortExitCritical>

	return xReturn;
 800a694:	68fb      	ldr	r3, [r7, #12]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
	...

0800a6a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	e014      	b.n	800a6da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a6b0:	4a0e      	ldr	r2, [pc, #56]	; (800a6ec <vQueueAddToRegistry+0x4c>)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10b      	bne.n	800a6d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a6bc:	490b      	ldr	r1, [pc, #44]	; (800a6ec <vQueueAddToRegistry+0x4c>)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a6c6:	4a09      	ldr	r2, [pc, #36]	; (800a6ec <vQueueAddToRegistry+0x4c>)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	4413      	add	r3, r2
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a6d2:	e005      	b.n	800a6e0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	60fb      	str	r3, [r7, #12]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2b07      	cmp	r3, #7
 800a6de:	d9e7      	bls.n	800a6b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a6e0:	bf00      	nop
 800a6e2:	3714      	adds	r7, #20
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr
 800a6ec:	20004bf4 	.word	0x20004bf4

0800a6f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a700:	f001 fb7c 	bl	800bdfc <vPortEnterCritical>
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a70a:	b25b      	sxtb	r3, r3
 800a70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a710:	d103      	bne.n	800a71a <vQueueWaitForMessageRestricted+0x2a>
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a720:	b25b      	sxtb	r3, r3
 800a722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a726:	d103      	bne.n	800a730 <vQueueWaitForMessageRestricted+0x40>
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a730:	f001 fb92 	bl	800be58 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d106      	bne.n	800a74a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	3324      	adds	r3, #36	; 0x24
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	68b9      	ldr	r1, [r7, #8]
 800a744:	4618      	mov	r0, r3
 800a746:	f000 fc2f 	bl	800afa8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a74a:	6978      	ldr	r0, [r7, #20]
 800a74c:	f7ff ff27 	bl	800a59e <prvUnlockQueue>
	}
 800a750:	bf00      	nop
 800a752:	3718      	adds	r7, #24
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b08e      	sub	sp, #56	; 0x38
 800a75c:	af04      	add	r7, sp, #16
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
 800a764:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d109      	bne.n	800a780 <xTaskCreateStatic+0x28>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	623b      	str	r3, [r7, #32]
 800a77e:	e7fe      	b.n	800a77e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a782:	2b00      	cmp	r3, #0
 800a784:	d109      	bne.n	800a79a <xTaskCreateStatic+0x42>
 800a786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	61fb      	str	r3, [r7, #28]
 800a798:	e7fe      	b.n	800a798 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a79a:	235c      	movs	r3, #92	; 0x5c
 800a79c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	2b5c      	cmp	r3, #92	; 0x5c
 800a7a2:	d009      	beq.n	800a7b8 <xTaskCreateStatic+0x60>
 800a7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	61bb      	str	r3, [r7, #24]
 800a7b6:	e7fe      	b.n	800a7b6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a7b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d01e      	beq.n	800a7fe <xTaskCreateStatic+0xa6>
 800a7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d01b      	beq.n	800a7fe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d2:	2202      	movs	r2, #2
 800a7d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a7d8:	2300      	movs	r3, #0
 800a7da:	9303      	str	r3, [sp, #12]
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7de:	9302      	str	r3, [sp, #8]
 800a7e0:	f107 0314 	add.w	r3, r7, #20
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	68b9      	ldr	r1, [r7, #8]
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f000 f850 	bl	800a896 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7f8:	f000 f8dc 	bl	800a9b4 <prvAddNewTaskToReadyList>
 800a7fc:	e001      	b.n	800a802 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a7fe:	2300      	movs	r3, #0
 800a800:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a802:	697b      	ldr	r3, [r7, #20]
	}
 800a804:	4618      	mov	r0, r3
 800a806:	3728      	adds	r7, #40	; 0x28
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08c      	sub	sp, #48	; 0x30
 800a810:	af04      	add	r7, sp, #16
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	603b      	str	r3, [r7, #0]
 800a818:	4613      	mov	r3, r2
 800a81a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a81c:	88fb      	ldrh	r3, [r7, #6]
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4618      	mov	r0, r3
 800a822:	f001 fc05 	bl	800c030 <pvPortMalloc>
 800a826:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00e      	beq.n	800a84c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a82e:	205c      	movs	r0, #92	; 0x5c
 800a830:	f001 fbfe 	bl	800c030 <pvPortMalloc>
 800a834:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d003      	beq.n	800a844 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	631a      	str	r2, [r3, #48]	; 0x30
 800a842:	e005      	b.n	800a850 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a844:	6978      	ldr	r0, [r7, #20]
 800a846:	f001 fcb5 	bl	800c1b4 <vPortFree>
 800a84a:	e001      	b.n	800a850 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a84c:	2300      	movs	r3, #0
 800a84e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d017      	beq.n	800a886 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a85e:	88fa      	ldrh	r2, [r7, #6]
 800a860:	2300      	movs	r3, #0
 800a862:	9303      	str	r3, [sp, #12]
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	9302      	str	r3, [sp, #8]
 800a868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86a:	9301      	str	r3, [sp, #4]
 800a86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	68b9      	ldr	r1, [r7, #8]
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f000 f80e 	bl	800a896 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a87a:	69f8      	ldr	r0, [r7, #28]
 800a87c:	f000 f89a 	bl	800a9b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a880:	2301      	movs	r3, #1
 800a882:	61bb      	str	r3, [r7, #24]
 800a884:	e002      	b.n	800a88c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a886:	f04f 33ff 	mov.w	r3, #4294967295
 800a88a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a88c:	69bb      	ldr	r3, [r7, #24]
	}
 800a88e:	4618      	mov	r0, r3
 800a890:	3720      	adds	r7, #32
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b088      	sub	sp, #32
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	60f8      	str	r0, [r7, #12]
 800a89e:	60b9      	str	r1, [r7, #8]
 800a8a0:	607a      	str	r2, [r7, #4]
 800a8a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	21a5      	movs	r1, #165	; 0xa5
 800a8b0:	f002 f8db 	bl	800ca6a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	4413      	add	r3, r2
 800a8c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	f023 0307 	bic.w	r3, r3, #7
 800a8cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	f003 0307 	and.w	r3, r3, #7
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d009      	beq.n	800a8ec <prvInitialiseNewTask+0x56>
 800a8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	617b      	str	r3, [r7, #20]
 800a8ea:	e7fe      	b.n	800a8ea <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d01f      	beq.n	800a932 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	61fb      	str	r3, [r7, #28]
 800a8f6:	e012      	b.n	800a91e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	7819      	ldrb	r1, [r3, #0]
 800a900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	4413      	add	r3, r2
 800a906:	3334      	adds	r3, #52	; 0x34
 800a908:	460a      	mov	r2, r1
 800a90a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	4413      	add	r3, r2
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d006      	beq.n	800a926 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	3301      	adds	r3, #1
 800a91c:	61fb      	str	r3, [r7, #28]
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	2b0f      	cmp	r3, #15
 800a922:	d9e9      	bls.n	800a8f8 <prvInitialiseNewTask+0x62>
 800a924:	e000      	b.n	800a928 <prvInitialiseNewTask+0x92>
			{
				break;
 800a926:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a930:	e003      	b.n	800a93a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a934:	2200      	movs	r2, #0
 800a936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93c:	2b37      	cmp	r3, #55	; 0x37
 800a93e:	d901      	bls.n	800a944 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a940:	2337      	movs	r3, #55	; 0x37
 800a942:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a948:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a94e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a952:	2200      	movs	r2, #0
 800a954:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a958:	3304      	adds	r3, #4
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff f8d6 	bl	8009b0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a962:	3318      	adds	r3, #24
 800a964:	4618      	mov	r0, r3
 800a966:	f7ff f8d1 	bl	8009b0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a96e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a972:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a978:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a97e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a982:	2200      	movs	r2, #0
 800a984:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a98e:	683a      	ldr	r2, [r7, #0]
 800a990:	68f9      	ldr	r1, [r7, #12]
 800a992:	69b8      	ldr	r0, [r7, #24]
 800a994:	f001 f90c 	bl	800bbb0 <pxPortInitialiseStack>
 800a998:	4602      	mov	r2, r0
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d002      	beq.n	800a9aa <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9aa:	bf00      	nop
 800a9ac:	3720      	adds	r7, #32
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
	...

0800a9b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a9bc:	f001 fa1e 	bl	800bdfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a9c0:	4b2d      	ldr	r3, [pc, #180]	; (800aa78 <prvAddNewTaskToReadyList+0xc4>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	4a2c      	ldr	r2, [pc, #176]	; (800aa78 <prvAddNewTaskToReadyList+0xc4>)
 800a9c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a9ca:	4b2c      	ldr	r3, [pc, #176]	; (800aa7c <prvAddNewTaskToReadyList+0xc8>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d109      	bne.n	800a9e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a9d2:	4a2a      	ldr	r2, [pc, #168]	; (800aa7c <prvAddNewTaskToReadyList+0xc8>)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a9d8:	4b27      	ldr	r3, [pc, #156]	; (800aa78 <prvAddNewTaskToReadyList+0xc4>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d110      	bne.n	800aa02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a9e0:	f000 fc08 	bl	800b1f4 <prvInitialiseTaskLists>
 800a9e4:	e00d      	b.n	800aa02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a9e6:	4b26      	ldr	r3, [pc, #152]	; (800aa80 <prvAddNewTaskToReadyList+0xcc>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d109      	bne.n	800aa02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a9ee:	4b23      	ldr	r3, [pc, #140]	; (800aa7c <prvAddNewTaskToReadyList+0xc8>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d802      	bhi.n	800aa02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a9fc:	4a1f      	ldr	r2, [pc, #124]	; (800aa7c <prvAddNewTaskToReadyList+0xc8>)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa02:	4b20      	ldr	r3, [pc, #128]	; (800aa84 <prvAddNewTaskToReadyList+0xd0>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	3301      	adds	r3, #1
 800aa08:	4a1e      	ldr	r2, [pc, #120]	; (800aa84 <prvAddNewTaskToReadyList+0xd0>)
 800aa0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aa0c:	4b1d      	ldr	r3, [pc, #116]	; (800aa84 <prvAddNewTaskToReadyList+0xd0>)
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa18:	4b1b      	ldr	r3, [pc, #108]	; (800aa88 <prvAddNewTaskToReadyList+0xd4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d903      	bls.n	800aa28 <prvAddNewTaskToReadyList+0x74>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa24:	4a18      	ldr	r2, [pc, #96]	; (800aa88 <prvAddNewTaskToReadyList+0xd4>)
 800aa26:	6013      	str	r3, [r2, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4a15      	ldr	r2, [pc, #84]	; (800aa8c <prvAddNewTaskToReadyList+0xd8>)
 800aa36:	441a      	add	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4610      	mov	r0, r2
 800aa40:	f7ff f871 	bl	8009b26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa44:	f001 fa08 	bl	800be58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aa48:	4b0d      	ldr	r3, [pc, #52]	; (800aa80 <prvAddNewTaskToReadyList+0xcc>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00e      	beq.n	800aa6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa50:	4b0a      	ldr	r3, [pc, #40]	; (800aa7c <prvAddNewTaskToReadyList+0xc8>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d207      	bcs.n	800aa6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa5e:	4b0c      	ldr	r3, [pc, #48]	; (800aa90 <prvAddNewTaskToReadyList+0xdc>)
 800aa60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa64:	601a      	str	r2, [r3, #0]
 800aa66:	f3bf 8f4f 	dsb	sy
 800aa6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa6e:	bf00      	nop
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	20000c48 	.word	0x20000c48
 800aa7c:	20000774 	.word	0x20000774
 800aa80:	20000c54 	.word	0x20000c54
 800aa84:	20000c64 	.word	0x20000c64
 800aa88:	20000c50 	.word	0x20000c50
 800aa8c:	20000778 	.word	0x20000778
 800aa90:	e000ed04 	.word	0xe000ed04

0800aa94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d016      	beq.n	800aad4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aaa6:	4b13      	ldr	r3, [pc, #76]	; (800aaf4 <vTaskDelay+0x60>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d009      	beq.n	800aac2 <vTaskDelay+0x2e>
 800aaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	60bb      	str	r3, [r7, #8]
 800aac0:	e7fe      	b.n	800aac0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800aac2:	f000 f87f 	bl	800abc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aac6:	2100      	movs	r1, #0
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fcd7 	bl	800b47c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aace:	f000 f887 	bl	800abe0 <xTaskResumeAll>
 800aad2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d107      	bne.n	800aaea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800aada:	4b07      	ldr	r3, [pc, #28]	; (800aaf8 <vTaskDelay+0x64>)
 800aadc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aae0:	601a      	str	r2, [r3, #0]
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aaea:	bf00      	nop
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20000c70 	.word	0x20000c70
 800aaf8:	e000ed04 	.word	0xe000ed04

0800aafc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b08a      	sub	sp, #40	; 0x28
 800ab00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab02:	2300      	movs	r3, #0
 800ab04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab06:	2300      	movs	r3, #0
 800ab08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab0a:	463a      	mov	r2, r7
 800ab0c:	1d39      	adds	r1, r7, #4
 800ab0e:	f107 0308 	add.w	r3, r7, #8
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fe ffa6 	bl	8009a64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	68ba      	ldr	r2, [r7, #8]
 800ab1e:	9202      	str	r2, [sp, #8]
 800ab20:	9301      	str	r3, [sp, #4]
 800ab22:	2300      	movs	r3, #0
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	2300      	movs	r3, #0
 800ab28:	460a      	mov	r2, r1
 800ab2a:	4920      	ldr	r1, [pc, #128]	; (800abac <vTaskStartScheduler+0xb0>)
 800ab2c:	4820      	ldr	r0, [pc, #128]	; (800abb0 <vTaskStartScheduler+0xb4>)
 800ab2e:	f7ff fe13 	bl	800a758 <xTaskCreateStatic>
 800ab32:	4602      	mov	r2, r0
 800ab34:	4b1f      	ldr	r3, [pc, #124]	; (800abb4 <vTaskStartScheduler+0xb8>)
 800ab36:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab38:	4b1e      	ldr	r3, [pc, #120]	; (800abb4 <vTaskStartScheduler+0xb8>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ab40:	2301      	movs	r3, #1
 800ab42:	617b      	str	r3, [r7, #20]
 800ab44:	e001      	b.n	800ab4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ab46:	2300      	movs	r3, #0
 800ab48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d102      	bne.n	800ab56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ab50:	f000 fce8 	bl	800b524 <xTimerCreateTimerTask>
 800ab54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d115      	bne.n	800ab88 <vTaskStartScheduler+0x8c>
 800ab5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab60:	f383 8811 	msr	BASEPRI, r3
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab6e:	4b12      	ldr	r3, [pc, #72]	; (800abb8 <vTaskStartScheduler+0xbc>)
 800ab70:	f04f 32ff 	mov.w	r2, #4294967295
 800ab74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab76:	4b11      	ldr	r3, [pc, #68]	; (800abbc <vTaskStartScheduler+0xc0>)
 800ab78:	2201      	movs	r2, #1
 800ab7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ab7c:	4b10      	ldr	r3, [pc, #64]	; (800abc0 <vTaskStartScheduler+0xc4>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab82:	f001 f89d 	bl	800bcc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab86:	e00d      	b.n	800aba4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8e:	d109      	bne.n	800aba4 <vTaskStartScheduler+0xa8>
 800ab90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	60fb      	str	r3, [r7, #12]
 800aba2:	e7fe      	b.n	800aba2 <vTaskStartScheduler+0xa6>
}
 800aba4:	bf00      	nop
 800aba6:	3718      	adds	r7, #24
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	0800ccac 	.word	0x0800ccac
 800abb0:	0800b1c5 	.word	0x0800b1c5
 800abb4:	20000c6c 	.word	0x20000c6c
 800abb8:	20000c68 	.word	0x20000c68
 800abbc:	20000c54 	.word	0x20000c54
 800abc0:	20000c4c 	.word	0x20000c4c

0800abc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800abc4:	b480      	push	{r7}
 800abc6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800abc8:	4b04      	ldr	r3, [pc, #16]	; (800abdc <vTaskSuspendAll+0x18>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3301      	adds	r3, #1
 800abce:	4a03      	ldr	r2, [pc, #12]	; (800abdc <vTaskSuspendAll+0x18>)
 800abd0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800abd2:	bf00      	nop
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr
 800abdc:	20000c70 	.word	0x20000c70

0800abe0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800abe6:	2300      	movs	r3, #0
 800abe8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800abea:	2300      	movs	r3, #0
 800abec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abee:	4b41      	ldr	r3, [pc, #260]	; (800acf4 <xTaskResumeAll+0x114>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d109      	bne.n	800ac0a <xTaskResumeAll+0x2a>
 800abf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfa:	f383 8811 	msr	BASEPRI, r3
 800abfe:	f3bf 8f6f 	isb	sy
 800ac02:	f3bf 8f4f 	dsb	sy
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	e7fe      	b.n	800ac08 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac0a:	f001 f8f7 	bl	800bdfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac0e:	4b39      	ldr	r3, [pc, #228]	; (800acf4 <xTaskResumeAll+0x114>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	3b01      	subs	r3, #1
 800ac14:	4a37      	ldr	r2, [pc, #220]	; (800acf4 <xTaskResumeAll+0x114>)
 800ac16:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac18:	4b36      	ldr	r3, [pc, #216]	; (800acf4 <xTaskResumeAll+0x114>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d162      	bne.n	800ace6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac20:	4b35      	ldr	r3, [pc, #212]	; (800acf8 <xTaskResumeAll+0x118>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d05e      	beq.n	800ace6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac28:	e02f      	b.n	800ac8a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac2a:	4b34      	ldr	r3, [pc, #208]	; (800acfc <xTaskResumeAll+0x11c>)
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	3318      	adds	r3, #24
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fe ffd2 	bl	8009be0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	3304      	adds	r3, #4
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fe ffcd 	bl	8009be0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac4a:	4b2d      	ldr	r3, [pc, #180]	; (800ad00 <xTaskResumeAll+0x120>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d903      	bls.n	800ac5a <xTaskResumeAll+0x7a>
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac56:	4a2a      	ldr	r2, [pc, #168]	; (800ad00 <xTaskResumeAll+0x120>)
 800ac58:	6013      	str	r3, [r2, #0]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac5e:	4613      	mov	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4413      	add	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4a27      	ldr	r2, [pc, #156]	; (800ad04 <xTaskResumeAll+0x124>)
 800ac68:	441a      	add	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	4619      	mov	r1, r3
 800ac70:	4610      	mov	r0, r2
 800ac72:	f7fe ff58 	bl	8009b26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac7a:	4b23      	ldr	r3, [pc, #140]	; (800ad08 <xTaskResumeAll+0x128>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d302      	bcc.n	800ac8a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ac84:	4b21      	ldr	r3, [pc, #132]	; (800ad0c <xTaskResumeAll+0x12c>)
 800ac86:	2201      	movs	r2, #1
 800ac88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac8a:	4b1c      	ldr	r3, [pc, #112]	; (800acfc <xTaskResumeAll+0x11c>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1cb      	bne.n	800ac2a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d001      	beq.n	800ac9c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ac98:	f000 fb46 	bl	800b328 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ac9c:	4b1c      	ldr	r3, [pc, #112]	; (800ad10 <xTaskResumeAll+0x130>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d010      	beq.n	800acca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aca8:	f000 f846 	bl	800ad38 <xTaskIncrementTick>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d002      	beq.n	800acb8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800acb2:	4b16      	ldr	r3, [pc, #88]	; (800ad0c <xTaskResumeAll+0x12c>)
 800acb4:	2201      	movs	r2, #1
 800acb6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	3b01      	subs	r3, #1
 800acbc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d1f1      	bne.n	800aca8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800acc4:	4b12      	ldr	r3, [pc, #72]	; (800ad10 <xTaskResumeAll+0x130>)
 800acc6:	2200      	movs	r2, #0
 800acc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800acca:	4b10      	ldr	r3, [pc, #64]	; (800ad0c <xTaskResumeAll+0x12c>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d009      	beq.n	800ace6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800acd2:	2301      	movs	r3, #1
 800acd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800acd6:	4b0f      	ldr	r3, [pc, #60]	; (800ad14 <xTaskResumeAll+0x134>)
 800acd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ace6:	f001 f8b7 	bl	800be58 <vPortExitCritical>

	return xAlreadyYielded;
 800acea:	68bb      	ldr	r3, [r7, #8]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	20000c70 	.word	0x20000c70
 800acf8:	20000c48 	.word	0x20000c48
 800acfc:	20000c08 	.word	0x20000c08
 800ad00:	20000c50 	.word	0x20000c50
 800ad04:	20000778 	.word	0x20000778
 800ad08:	20000774 	.word	0x20000774
 800ad0c:	20000c5c 	.word	0x20000c5c
 800ad10:	20000c58 	.word	0x20000c58
 800ad14:	e000ed04 	.word	0xe000ed04

0800ad18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ad1e:	4b05      	ldr	r3, [pc, #20]	; (800ad34 <xTaskGetTickCount+0x1c>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ad24:	687b      	ldr	r3, [r7, #4]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	20000c4c 	.word	0x20000c4c

0800ad38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad42:	4b4e      	ldr	r3, [pc, #312]	; (800ae7c <xTaskIncrementTick+0x144>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f040 8088 	bne.w	800ae5c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad4c:	4b4c      	ldr	r3, [pc, #304]	; (800ae80 <xTaskIncrementTick+0x148>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	3301      	adds	r3, #1
 800ad52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad54:	4a4a      	ldr	r2, [pc, #296]	; (800ae80 <xTaskIncrementTick+0x148>)
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d11f      	bne.n	800ada0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad60:	4b48      	ldr	r3, [pc, #288]	; (800ae84 <xTaskIncrementTick+0x14c>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d009      	beq.n	800ad7e <xTaskIncrementTick+0x46>
 800ad6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6e:	f383 8811 	msr	BASEPRI, r3
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	603b      	str	r3, [r7, #0]
 800ad7c:	e7fe      	b.n	800ad7c <xTaskIncrementTick+0x44>
 800ad7e:	4b41      	ldr	r3, [pc, #260]	; (800ae84 <xTaskIncrementTick+0x14c>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	60fb      	str	r3, [r7, #12]
 800ad84:	4b40      	ldr	r3, [pc, #256]	; (800ae88 <xTaskIncrementTick+0x150>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a3e      	ldr	r2, [pc, #248]	; (800ae84 <xTaskIncrementTick+0x14c>)
 800ad8a:	6013      	str	r3, [r2, #0]
 800ad8c:	4a3e      	ldr	r2, [pc, #248]	; (800ae88 <xTaskIncrementTick+0x150>)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	6013      	str	r3, [r2, #0]
 800ad92:	4b3e      	ldr	r3, [pc, #248]	; (800ae8c <xTaskIncrementTick+0x154>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	3301      	adds	r3, #1
 800ad98:	4a3c      	ldr	r2, [pc, #240]	; (800ae8c <xTaskIncrementTick+0x154>)
 800ad9a:	6013      	str	r3, [r2, #0]
 800ad9c:	f000 fac4 	bl	800b328 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ada0:	4b3b      	ldr	r3, [pc, #236]	; (800ae90 <xTaskIncrementTick+0x158>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d349      	bcc.n	800ae3e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adaa:	4b36      	ldr	r3, [pc, #216]	; (800ae84 <xTaskIncrementTick+0x14c>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d104      	bne.n	800adbe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adb4:	4b36      	ldr	r3, [pc, #216]	; (800ae90 <xTaskIncrementTick+0x158>)
 800adb6:	f04f 32ff 	mov.w	r2, #4294967295
 800adba:	601a      	str	r2, [r3, #0]
					break;
 800adbc:	e03f      	b.n	800ae3e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adbe:	4b31      	ldr	r3, [pc, #196]	; (800ae84 <xTaskIncrementTick+0x14c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800adce:	693a      	ldr	r2, [r7, #16]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	429a      	cmp	r2, r3
 800add4:	d203      	bcs.n	800adde <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800add6:	4a2e      	ldr	r2, [pc, #184]	; (800ae90 <xTaskIncrementTick+0x158>)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800addc:	e02f      	b.n	800ae3e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	3304      	adds	r3, #4
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fe fefc 	bl	8009be0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adec:	2b00      	cmp	r3, #0
 800adee:	d004      	beq.n	800adfa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	3318      	adds	r3, #24
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fe fef3 	bl	8009be0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adfe:	4b25      	ldr	r3, [pc, #148]	; (800ae94 <xTaskIncrementTick+0x15c>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d903      	bls.n	800ae0e <xTaskIncrementTick+0xd6>
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0a:	4a22      	ldr	r2, [pc, #136]	; (800ae94 <xTaskIncrementTick+0x15c>)
 800ae0c:	6013      	str	r3, [r2, #0]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae12:	4613      	mov	r3, r2
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	4413      	add	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4a1f      	ldr	r2, [pc, #124]	; (800ae98 <xTaskIncrementTick+0x160>)
 800ae1c:	441a      	add	r2, r3
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	3304      	adds	r3, #4
 800ae22:	4619      	mov	r1, r3
 800ae24:	4610      	mov	r0, r2
 800ae26:	f7fe fe7e 	bl	8009b26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae2e:	4b1b      	ldr	r3, [pc, #108]	; (800ae9c <xTaskIncrementTick+0x164>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d3b8      	bcc.n	800adaa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae3c:	e7b5      	b.n	800adaa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae3e:	4b17      	ldr	r3, [pc, #92]	; (800ae9c <xTaskIncrementTick+0x164>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae44:	4914      	ldr	r1, [pc, #80]	; (800ae98 <xTaskIncrementTick+0x160>)
 800ae46:	4613      	mov	r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4413      	add	r3, r2
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	440b      	add	r3, r1
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d907      	bls.n	800ae66 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800ae56:	2301      	movs	r3, #1
 800ae58:	617b      	str	r3, [r7, #20]
 800ae5a:	e004      	b.n	800ae66 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ae5c:	4b10      	ldr	r3, [pc, #64]	; (800aea0 <xTaskIncrementTick+0x168>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3301      	adds	r3, #1
 800ae62:	4a0f      	ldr	r2, [pc, #60]	; (800aea0 <xTaskIncrementTick+0x168>)
 800ae64:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ae66:	4b0f      	ldr	r3, [pc, #60]	; (800aea4 <xTaskIncrementTick+0x16c>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d001      	beq.n	800ae72 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ae72:	697b      	ldr	r3, [r7, #20]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3718      	adds	r7, #24
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	20000c70 	.word	0x20000c70
 800ae80:	20000c4c 	.word	0x20000c4c
 800ae84:	20000c00 	.word	0x20000c00
 800ae88:	20000c04 	.word	0x20000c04
 800ae8c:	20000c60 	.word	0x20000c60
 800ae90:	20000c68 	.word	0x20000c68
 800ae94:	20000c50 	.word	0x20000c50
 800ae98:	20000778 	.word	0x20000778
 800ae9c:	20000774 	.word	0x20000774
 800aea0:	20000c58 	.word	0x20000c58
 800aea4:	20000c5c 	.word	0x20000c5c

0800aea8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aeae:	4b27      	ldr	r3, [pc, #156]	; (800af4c <vTaskSwitchContext+0xa4>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d003      	beq.n	800aebe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aeb6:	4b26      	ldr	r3, [pc, #152]	; (800af50 <vTaskSwitchContext+0xa8>)
 800aeb8:	2201      	movs	r2, #1
 800aeba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aebc:	e040      	b.n	800af40 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800aebe:	4b24      	ldr	r3, [pc, #144]	; (800af50 <vTaskSwitchContext+0xa8>)
 800aec0:	2200      	movs	r2, #0
 800aec2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aec4:	4b23      	ldr	r3, [pc, #140]	; (800af54 <vTaskSwitchContext+0xac>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	60fb      	str	r3, [r7, #12]
 800aeca:	e00f      	b.n	800aeec <vTaskSwitchContext+0x44>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d109      	bne.n	800aee6 <vTaskSwitchContext+0x3e>
 800aed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	607b      	str	r3, [r7, #4]
 800aee4:	e7fe      	b.n	800aee4 <vTaskSwitchContext+0x3c>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	491a      	ldr	r1, [pc, #104]	; (800af58 <vTaskSwitchContext+0xb0>)
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	4613      	mov	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	440b      	add	r3, r1
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d0e5      	beq.n	800aecc <vTaskSwitchContext+0x24>
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	4613      	mov	r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	4413      	add	r3, r2
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	4a13      	ldr	r2, [pc, #76]	; (800af58 <vTaskSwitchContext+0xb0>)
 800af0c:	4413      	add	r3, r2
 800af0e:	60bb      	str	r3, [r7, #8]
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	685a      	ldr	r2, [r3, #4]
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	605a      	str	r2, [r3, #4]
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	685a      	ldr	r2, [r3, #4]
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	3308      	adds	r3, #8
 800af22:	429a      	cmp	r2, r3
 800af24:	d104      	bne.n	800af30 <vTaskSwitchContext+0x88>
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	685a      	ldr	r2, [r3, #4]
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	605a      	str	r2, [r3, #4]
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	4a09      	ldr	r2, [pc, #36]	; (800af5c <vTaskSwitchContext+0xb4>)
 800af38:	6013      	str	r3, [r2, #0]
 800af3a:	4a06      	ldr	r2, [pc, #24]	; (800af54 <vTaskSwitchContext+0xac>)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6013      	str	r3, [r2, #0]
}
 800af40:	bf00      	nop
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr
 800af4c:	20000c70 	.word	0x20000c70
 800af50:	20000c5c 	.word	0x20000c5c
 800af54:	20000c50 	.word	0x20000c50
 800af58:	20000778 	.word	0x20000778
 800af5c:	20000774 	.word	0x20000774

0800af60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d109      	bne.n	800af84 <vTaskPlaceOnEventList+0x24>
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	60fb      	str	r3, [r7, #12]
 800af82:	e7fe      	b.n	800af82 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af84:	4b07      	ldr	r3, [pc, #28]	; (800afa4 <vTaskPlaceOnEventList+0x44>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3318      	adds	r3, #24
 800af8a:	4619      	mov	r1, r3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f7fe fdee 	bl	8009b6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800af92:	2101      	movs	r1, #1
 800af94:	6838      	ldr	r0, [r7, #0]
 800af96:	f000 fa71 	bl	800b47c <prvAddCurrentTaskToDelayedList>
}
 800af9a:	bf00      	nop
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	20000774 	.word	0x20000774

0800afa8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b086      	sub	sp, #24
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d109      	bne.n	800afce <vTaskPlaceOnEventListRestricted+0x26>
 800afba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	617b      	str	r3, [r7, #20]
 800afcc:	e7fe      	b.n	800afcc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800afce:	4b0a      	ldr	r3, [pc, #40]	; (800aff8 <vTaskPlaceOnEventListRestricted+0x50>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	3318      	adds	r3, #24
 800afd4:	4619      	mov	r1, r3
 800afd6:	68f8      	ldr	r0, [r7, #12]
 800afd8:	f7fe fda5 	bl	8009b26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d002      	beq.n	800afe8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800afe2:	f04f 33ff 	mov.w	r3, #4294967295
 800afe6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800afe8:	6879      	ldr	r1, [r7, #4]
 800afea:	68b8      	ldr	r0, [r7, #8]
 800afec:	f000 fa46 	bl	800b47c <prvAddCurrentTaskToDelayedList>
	}
 800aff0:	bf00      	nop
 800aff2:	3718      	adds	r7, #24
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	20000774 	.word	0x20000774

0800affc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d109      	bne.n	800b026 <xTaskRemoveFromEventList+0x2a>
 800b012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b016:	f383 8811 	msr	BASEPRI, r3
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	f3bf 8f4f 	dsb	sy
 800b022:	60fb      	str	r3, [r7, #12]
 800b024:	e7fe      	b.n	800b024 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	3318      	adds	r3, #24
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fe fdd8 	bl	8009be0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b030:	4b1d      	ldr	r3, [pc, #116]	; (800b0a8 <xTaskRemoveFromEventList+0xac>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d11d      	bne.n	800b074 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	3304      	adds	r3, #4
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7fe fdcf 	bl	8009be0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b046:	4b19      	ldr	r3, [pc, #100]	; (800b0ac <xTaskRemoveFromEventList+0xb0>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d903      	bls.n	800b056 <xTaskRemoveFromEventList+0x5a>
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b052:	4a16      	ldr	r2, [pc, #88]	; (800b0ac <xTaskRemoveFromEventList+0xb0>)
 800b054:	6013      	str	r3, [r2, #0]
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b05a:	4613      	mov	r3, r2
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	4413      	add	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4a13      	ldr	r2, [pc, #76]	; (800b0b0 <xTaskRemoveFromEventList+0xb4>)
 800b064:	441a      	add	r2, r3
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	3304      	adds	r3, #4
 800b06a:	4619      	mov	r1, r3
 800b06c:	4610      	mov	r0, r2
 800b06e:	f7fe fd5a 	bl	8009b26 <vListInsertEnd>
 800b072:	e005      	b.n	800b080 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	3318      	adds	r3, #24
 800b078:	4619      	mov	r1, r3
 800b07a:	480e      	ldr	r0, [pc, #56]	; (800b0b4 <xTaskRemoveFromEventList+0xb8>)
 800b07c:	f7fe fd53 	bl	8009b26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b084:	4b0c      	ldr	r3, [pc, #48]	; (800b0b8 <xTaskRemoveFromEventList+0xbc>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d905      	bls.n	800b09a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b08e:	2301      	movs	r3, #1
 800b090:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b092:	4b0a      	ldr	r3, [pc, #40]	; (800b0bc <xTaskRemoveFromEventList+0xc0>)
 800b094:	2201      	movs	r2, #1
 800b096:	601a      	str	r2, [r3, #0]
 800b098:	e001      	b.n	800b09e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b09a:	2300      	movs	r3, #0
 800b09c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b09e:	697b      	ldr	r3, [r7, #20]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	20000c70 	.word	0x20000c70
 800b0ac:	20000c50 	.word	0x20000c50
 800b0b0:	20000778 	.word	0x20000778
 800b0b4:	20000c08 	.word	0x20000c08
 800b0b8:	20000774 	.word	0x20000774
 800b0bc:	20000c5c 	.word	0x20000c5c

0800b0c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b0c8:	4b06      	ldr	r3, [pc, #24]	; (800b0e4 <vTaskInternalSetTimeOutState+0x24>)
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b0d0:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <vTaskInternalSetTimeOutState+0x28>)
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	605a      	str	r2, [r3, #4]
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	20000c60 	.word	0x20000c60
 800b0e8:	20000c4c 	.word	0x20000c4c

0800b0ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b088      	sub	sp, #32
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d109      	bne.n	800b110 <xTaskCheckForTimeOut+0x24>
 800b0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	613b      	str	r3, [r7, #16]
 800b10e:	e7fe      	b.n	800b10e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d109      	bne.n	800b12a <xTaskCheckForTimeOut+0x3e>
 800b116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11a:	f383 8811 	msr	BASEPRI, r3
 800b11e:	f3bf 8f6f 	isb	sy
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	60fb      	str	r3, [r7, #12]
 800b128:	e7fe      	b.n	800b128 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b12a:	f000 fe67 	bl	800bdfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b12e:	4b1d      	ldr	r3, [pc, #116]	; (800b1a4 <xTaskCheckForTimeOut+0xb8>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	69ba      	ldr	r2, [r7, #24]
 800b13a:	1ad3      	subs	r3, r2, r3
 800b13c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b146:	d102      	bne.n	800b14e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b148:	2300      	movs	r3, #0
 800b14a:	61fb      	str	r3, [r7, #28]
 800b14c:	e023      	b.n	800b196 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	4b15      	ldr	r3, [pc, #84]	; (800b1a8 <xTaskCheckForTimeOut+0xbc>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	429a      	cmp	r2, r3
 800b158:	d007      	beq.n	800b16a <xTaskCheckForTimeOut+0x7e>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	69ba      	ldr	r2, [r7, #24]
 800b160:	429a      	cmp	r2, r3
 800b162:	d302      	bcc.n	800b16a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b164:	2301      	movs	r3, #1
 800b166:	61fb      	str	r3, [r7, #28]
 800b168:	e015      	b.n	800b196 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	697a      	ldr	r2, [r7, #20]
 800b170:	429a      	cmp	r2, r3
 800b172:	d20b      	bcs.n	800b18c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	1ad2      	subs	r2, r2, r3
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f7ff ff9d 	bl	800b0c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b186:	2300      	movs	r3, #0
 800b188:	61fb      	str	r3, [r7, #28]
 800b18a:	e004      	b.n	800b196 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	2200      	movs	r2, #0
 800b190:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b192:	2301      	movs	r3, #1
 800b194:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b196:	f000 fe5f 	bl	800be58 <vPortExitCritical>

	return xReturn;
 800b19a:	69fb      	ldr	r3, [r7, #28]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3720      	adds	r7, #32
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	20000c4c 	.word	0x20000c4c
 800b1a8:	20000c60 	.word	0x20000c60

0800b1ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b1b0:	4b03      	ldr	r3, [pc, #12]	; (800b1c0 <vTaskMissedYield+0x14>)
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	601a      	str	r2, [r3, #0]
}
 800b1b6:	bf00      	nop
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	20000c5c 	.word	0x20000c5c

0800b1c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b1cc:	f000 f852 	bl	800b274 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b1d0:	4b06      	ldr	r3, [pc, #24]	; (800b1ec <prvIdleTask+0x28>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d9f9      	bls.n	800b1cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b1d8:	4b05      	ldr	r3, [pc, #20]	; (800b1f0 <prvIdleTask+0x2c>)
 800b1da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1de:	601a      	str	r2, [r3, #0]
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b1e8:	e7f0      	b.n	800b1cc <prvIdleTask+0x8>
 800b1ea:	bf00      	nop
 800b1ec:	20000778 	.word	0x20000778
 800b1f0:	e000ed04 	.word	0xe000ed04

0800b1f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	607b      	str	r3, [r7, #4]
 800b1fe:	e00c      	b.n	800b21a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	4613      	mov	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	4a12      	ldr	r2, [pc, #72]	; (800b254 <prvInitialiseTaskLists+0x60>)
 800b20c:	4413      	add	r3, r2
 800b20e:	4618      	mov	r0, r3
 800b210:	f7fe fc5c 	bl	8009acc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	3301      	adds	r3, #1
 800b218:	607b      	str	r3, [r7, #4]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b37      	cmp	r3, #55	; 0x37
 800b21e:	d9ef      	bls.n	800b200 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b220:	480d      	ldr	r0, [pc, #52]	; (800b258 <prvInitialiseTaskLists+0x64>)
 800b222:	f7fe fc53 	bl	8009acc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b226:	480d      	ldr	r0, [pc, #52]	; (800b25c <prvInitialiseTaskLists+0x68>)
 800b228:	f7fe fc50 	bl	8009acc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b22c:	480c      	ldr	r0, [pc, #48]	; (800b260 <prvInitialiseTaskLists+0x6c>)
 800b22e:	f7fe fc4d 	bl	8009acc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b232:	480c      	ldr	r0, [pc, #48]	; (800b264 <prvInitialiseTaskLists+0x70>)
 800b234:	f7fe fc4a 	bl	8009acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b238:	480b      	ldr	r0, [pc, #44]	; (800b268 <prvInitialiseTaskLists+0x74>)
 800b23a:	f7fe fc47 	bl	8009acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b23e:	4b0b      	ldr	r3, [pc, #44]	; (800b26c <prvInitialiseTaskLists+0x78>)
 800b240:	4a05      	ldr	r2, [pc, #20]	; (800b258 <prvInitialiseTaskLists+0x64>)
 800b242:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b244:	4b0a      	ldr	r3, [pc, #40]	; (800b270 <prvInitialiseTaskLists+0x7c>)
 800b246:	4a05      	ldr	r2, [pc, #20]	; (800b25c <prvInitialiseTaskLists+0x68>)
 800b248:	601a      	str	r2, [r3, #0]
}
 800b24a:	bf00      	nop
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	20000778 	.word	0x20000778
 800b258:	20000bd8 	.word	0x20000bd8
 800b25c:	20000bec 	.word	0x20000bec
 800b260:	20000c08 	.word	0x20000c08
 800b264:	20000c1c 	.word	0x20000c1c
 800b268:	20000c34 	.word	0x20000c34
 800b26c:	20000c00 	.word	0x20000c00
 800b270:	20000c04 	.word	0x20000c04

0800b274 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b27a:	e019      	b.n	800b2b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b27c:	f000 fdbe 	bl	800bdfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b280:	4b0f      	ldr	r3, [pc, #60]	; (800b2c0 <prvCheckTasksWaitingTermination+0x4c>)
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	3304      	adds	r3, #4
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7fe fca7 	bl	8009be0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b292:	4b0c      	ldr	r3, [pc, #48]	; (800b2c4 <prvCheckTasksWaitingTermination+0x50>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	3b01      	subs	r3, #1
 800b298:	4a0a      	ldr	r2, [pc, #40]	; (800b2c4 <prvCheckTasksWaitingTermination+0x50>)
 800b29a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b29c:	4b0a      	ldr	r3, [pc, #40]	; (800b2c8 <prvCheckTasksWaitingTermination+0x54>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	4a09      	ldr	r2, [pc, #36]	; (800b2c8 <prvCheckTasksWaitingTermination+0x54>)
 800b2a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b2a6:	f000 fdd7 	bl	800be58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f80e 	bl	800b2cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2b0:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <prvCheckTasksWaitingTermination+0x54>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1e1      	bne.n	800b27c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b2b8:	bf00      	nop
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	20000c1c 	.word	0x20000c1c
 800b2c4:	20000c48 	.word	0x20000c48
 800b2c8:	20000c30 	.word	0x20000c30

0800b2cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d108      	bne.n	800b2f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f000 ff66 	bl	800c1b4 <vPortFree>
				vPortFree( pxTCB );
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 ff63 	bl	800c1b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b2ee:	e017      	b.n	800b320 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d103      	bne.n	800b302 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 ff5a 	bl	800c1b4 <vPortFree>
	}
 800b300:	e00e      	b.n	800b320 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d009      	beq.n	800b320 <prvDeleteTCB+0x54>
 800b30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b310:	f383 8811 	msr	BASEPRI, r3
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	60fb      	str	r3, [r7, #12]
 800b31e:	e7fe      	b.n	800b31e <prvDeleteTCB+0x52>
	}
 800b320:	bf00      	nop
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b32e:	4b0c      	ldr	r3, [pc, #48]	; (800b360 <prvResetNextTaskUnblockTime+0x38>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d104      	bne.n	800b342 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b338:	4b0a      	ldr	r3, [pc, #40]	; (800b364 <prvResetNextTaskUnblockTime+0x3c>)
 800b33a:	f04f 32ff 	mov.w	r2, #4294967295
 800b33e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b340:	e008      	b.n	800b354 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b342:	4b07      	ldr	r3, [pc, #28]	; (800b360 <prvResetNextTaskUnblockTime+0x38>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	4a04      	ldr	r2, [pc, #16]	; (800b364 <prvResetNextTaskUnblockTime+0x3c>)
 800b352:	6013      	str	r3, [r2, #0]
}
 800b354:	bf00      	nop
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr
 800b360:	20000c00 	.word	0x20000c00
 800b364:	20000c68 	.word	0x20000c68

0800b368 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b36e:	4b0b      	ldr	r3, [pc, #44]	; (800b39c <xTaskGetSchedulerState+0x34>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d102      	bne.n	800b37c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b376:	2301      	movs	r3, #1
 800b378:	607b      	str	r3, [r7, #4]
 800b37a:	e008      	b.n	800b38e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b37c:	4b08      	ldr	r3, [pc, #32]	; (800b3a0 <xTaskGetSchedulerState+0x38>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d102      	bne.n	800b38a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b384:	2302      	movs	r3, #2
 800b386:	607b      	str	r3, [r7, #4]
 800b388:	e001      	b.n	800b38e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b38a:	2300      	movs	r3, #0
 800b38c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b38e:	687b      	ldr	r3, [r7, #4]
	}
 800b390:	4618      	mov	r0, r3
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	20000c54 	.word	0x20000c54
 800b3a0:	20000c70 	.word	0x20000c70

0800b3a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d054      	beq.n	800b464 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b3ba:	4b2d      	ldr	r3, [pc, #180]	; (800b470 <xTaskPriorityDisinherit+0xcc>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d009      	beq.n	800b3d8 <xTaskPriorityDisinherit+0x34>
 800b3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c8:	f383 8811 	msr	BASEPRI, r3
 800b3cc:	f3bf 8f6f 	isb	sy
 800b3d0:	f3bf 8f4f 	dsb	sy
 800b3d4:	60fb      	str	r3, [r7, #12]
 800b3d6:	e7fe      	b.n	800b3d6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d109      	bne.n	800b3f4 <xTaskPriorityDisinherit+0x50>
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	60bb      	str	r3, [r7, #8]
 800b3f2:	e7fe      	b.n	800b3f2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3f8:	1e5a      	subs	r2, r3, #1
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b406:	429a      	cmp	r2, r3
 800b408:	d02c      	beq.n	800b464 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d128      	bne.n	800b464 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	3304      	adds	r3, #4
 800b416:	4618      	mov	r0, r3
 800b418:	f7fe fbe2 	bl	8009be0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b428:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b434:	4b0f      	ldr	r3, [pc, #60]	; (800b474 <xTaskPriorityDisinherit+0xd0>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d903      	bls.n	800b444 <xTaskPriorityDisinherit+0xa0>
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b440:	4a0c      	ldr	r2, [pc, #48]	; (800b474 <xTaskPriorityDisinherit+0xd0>)
 800b442:	6013      	str	r3, [r2, #0]
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b448:	4613      	mov	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	4413      	add	r3, r2
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	4a09      	ldr	r2, [pc, #36]	; (800b478 <xTaskPriorityDisinherit+0xd4>)
 800b452:	441a      	add	r2, r3
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	3304      	adds	r3, #4
 800b458:	4619      	mov	r1, r3
 800b45a:	4610      	mov	r0, r2
 800b45c:	f7fe fb63 	bl	8009b26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b460:	2301      	movs	r3, #1
 800b462:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b464:	697b      	ldr	r3, [r7, #20]
	}
 800b466:	4618      	mov	r0, r3
 800b468:	3718      	adds	r7, #24
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20000774 	.word	0x20000774
 800b474:	20000c50 	.word	0x20000c50
 800b478:	20000778 	.word	0x20000778

0800b47c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b486:	4b21      	ldr	r3, [pc, #132]	; (800b50c <prvAddCurrentTaskToDelayedList+0x90>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b48c:	4b20      	ldr	r3, [pc, #128]	; (800b510 <prvAddCurrentTaskToDelayedList+0x94>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	3304      	adds	r3, #4
 800b492:	4618      	mov	r0, r3
 800b494:	f7fe fba4 	bl	8009be0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b49e:	d10a      	bne.n	800b4b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d007      	beq.n	800b4b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4a6:	4b1a      	ldr	r3, [pc, #104]	; (800b510 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	4819      	ldr	r0, [pc, #100]	; (800b514 <prvAddCurrentTaskToDelayedList+0x98>)
 800b4b0:	f7fe fb39 	bl	8009b26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4b4:	e026      	b.n	800b504 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4be:	4b14      	ldr	r3, [pc, #80]	; (800b510 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4c6:	68ba      	ldr	r2, [r7, #8]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d209      	bcs.n	800b4e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4ce:	4b12      	ldr	r3, [pc, #72]	; (800b518 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	4b0f      	ldr	r3, [pc, #60]	; (800b510 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	f7fe fb47 	bl	8009b6e <vListInsert>
}
 800b4e0:	e010      	b.n	800b504 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4e2:	4b0e      	ldr	r3, [pc, #56]	; (800b51c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	4b0a      	ldr	r3, [pc, #40]	; (800b510 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	3304      	adds	r3, #4
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	f7fe fb3d 	bl	8009b6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4f4:	4b0a      	ldr	r3, [pc, #40]	; (800b520 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68ba      	ldr	r2, [r7, #8]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d202      	bcs.n	800b504 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b4fe:	4a08      	ldr	r2, [pc, #32]	; (800b520 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	6013      	str	r3, [r2, #0]
}
 800b504:	bf00      	nop
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	20000c4c 	.word	0x20000c4c
 800b510:	20000774 	.word	0x20000774
 800b514:	20000c34 	.word	0x20000c34
 800b518:	20000c04 	.word	0x20000c04
 800b51c:	20000c00 	.word	0x20000c00
 800b520:	20000c68 	.word	0x20000c68

0800b524 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b08a      	sub	sp, #40	; 0x28
 800b528:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b52a:	2300      	movs	r3, #0
 800b52c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b52e:	f000 faff 	bl	800bb30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b532:	4b1c      	ldr	r3, [pc, #112]	; (800b5a4 <xTimerCreateTimerTask+0x80>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d021      	beq.n	800b57e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b53a:	2300      	movs	r3, #0
 800b53c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b53e:	2300      	movs	r3, #0
 800b540:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b542:	1d3a      	adds	r2, r7, #4
 800b544:	f107 0108 	add.w	r1, r7, #8
 800b548:	f107 030c 	add.w	r3, r7, #12
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fe faa3 	bl	8009a98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b552:	6879      	ldr	r1, [r7, #4]
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	68fa      	ldr	r2, [r7, #12]
 800b558:	9202      	str	r2, [sp, #8]
 800b55a:	9301      	str	r3, [sp, #4]
 800b55c:	2302      	movs	r3, #2
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	2300      	movs	r3, #0
 800b562:	460a      	mov	r2, r1
 800b564:	4910      	ldr	r1, [pc, #64]	; (800b5a8 <xTimerCreateTimerTask+0x84>)
 800b566:	4811      	ldr	r0, [pc, #68]	; (800b5ac <xTimerCreateTimerTask+0x88>)
 800b568:	f7ff f8f6 	bl	800a758 <xTaskCreateStatic>
 800b56c:	4602      	mov	r2, r0
 800b56e:	4b10      	ldr	r3, [pc, #64]	; (800b5b0 <xTimerCreateTimerTask+0x8c>)
 800b570:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b572:	4b0f      	ldr	r3, [pc, #60]	; (800b5b0 <xTimerCreateTimerTask+0x8c>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b57a:	2301      	movs	r3, #1
 800b57c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d109      	bne.n	800b598 <xTimerCreateTimerTask+0x74>
 800b584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b588:	f383 8811 	msr	BASEPRI, r3
 800b58c:	f3bf 8f6f 	isb	sy
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	613b      	str	r3, [r7, #16]
 800b596:	e7fe      	b.n	800b596 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800b598:	697b      	ldr	r3, [r7, #20]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3718      	adds	r7, #24
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20000ca4 	.word	0x20000ca4
 800b5a8:	0800ccb4 	.word	0x0800ccb4
 800b5ac:	0800b6e5 	.word	0x0800b6e5
 800b5b0:	20000ca8 	.word	0x20000ca8

0800b5b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b08a      	sub	sp, #40	; 0x28
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
 800b5c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d109      	bne.n	800b5e0 <xTimerGenericCommand+0x2c>
 800b5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d0:	f383 8811 	msr	BASEPRI, r3
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	623b      	str	r3, [r7, #32]
 800b5de:	e7fe      	b.n	800b5de <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b5e0:	4b19      	ldr	r3, [pc, #100]	; (800b648 <xTimerGenericCommand+0x94>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d02a      	beq.n	800b63e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	2b05      	cmp	r3, #5
 800b5f8:	dc18      	bgt.n	800b62c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b5fa:	f7ff feb5 	bl	800b368 <xTaskGetSchedulerState>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b02      	cmp	r3, #2
 800b602:	d109      	bne.n	800b618 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b604:	4b10      	ldr	r3, [pc, #64]	; (800b648 <xTimerGenericCommand+0x94>)
 800b606:	6818      	ldr	r0, [r3, #0]
 800b608:	f107 0110 	add.w	r1, r7, #16
 800b60c:	2300      	movs	r3, #0
 800b60e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b610:	f7fe fc4e 	bl	8009eb0 <xQueueGenericSend>
 800b614:	6278      	str	r0, [r7, #36]	; 0x24
 800b616:	e012      	b.n	800b63e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b618:	4b0b      	ldr	r3, [pc, #44]	; (800b648 <xTimerGenericCommand+0x94>)
 800b61a:	6818      	ldr	r0, [r3, #0]
 800b61c:	f107 0110 	add.w	r1, r7, #16
 800b620:	2300      	movs	r3, #0
 800b622:	2200      	movs	r2, #0
 800b624:	f7fe fc44 	bl	8009eb0 <xQueueGenericSend>
 800b628:	6278      	str	r0, [r7, #36]	; 0x24
 800b62a:	e008      	b.n	800b63e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b62c:	4b06      	ldr	r3, [pc, #24]	; (800b648 <xTimerGenericCommand+0x94>)
 800b62e:	6818      	ldr	r0, [r3, #0]
 800b630:	f107 0110 	add.w	r1, r7, #16
 800b634:	2300      	movs	r3, #0
 800b636:	683a      	ldr	r2, [r7, #0]
 800b638:	f7fe fd34 	bl	800a0a4 <xQueueGenericSendFromISR>
 800b63c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b640:	4618      	mov	r0, r3
 800b642:	3728      	adds	r7, #40	; 0x28
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	20000ca4 	.word	0x20000ca4

0800b64c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b088      	sub	sp, #32
 800b650:	af02      	add	r7, sp, #8
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b656:	4b22      	ldr	r3, [pc, #136]	; (800b6e0 <prvProcessExpiredTimer+0x94>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	3304      	adds	r3, #4
 800b664:	4618      	mov	r0, r3
 800b666:	f7fe fabb 	bl	8009be0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b670:	f003 0304 	and.w	r3, r3, #4
 800b674:	2b00      	cmp	r3, #0
 800b676:	d021      	beq.n	800b6bc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	699a      	ldr	r2, [r3, #24]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	18d1      	adds	r1, r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	6978      	ldr	r0, [r7, #20]
 800b686:	f000 f8d1 	bl	800b82c <prvInsertTimerInActiveList>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d01e      	beq.n	800b6ce <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b690:	2300      	movs	r3, #0
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	2300      	movs	r3, #0
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	2100      	movs	r1, #0
 800b69a:	6978      	ldr	r0, [r7, #20]
 800b69c:	f7ff ff8a 	bl	800b5b4 <xTimerGenericCommand>
 800b6a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d112      	bne.n	800b6ce <prvProcessExpiredTimer+0x82>
 800b6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ac:	f383 8811 	msr	BASEPRI, r3
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	60fb      	str	r3, [r7, #12]
 800b6ba:	e7fe      	b.n	800b6ba <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6c2:	f023 0301 	bic.w	r3, r3, #1
 800b6c6:	b2da      	uxtb	r2, r3
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	6a1b      	ldr	r3, [r3, #32]
 800b6d2:	6978      	ldr	r0, [r7, #20]
 800b6d4:	4798      	blx	r3
}
 800b6d6:	bf00      	nop
 800b6d8:	3718      	adds	r7, #24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	20000c9c 	.word	0x20000c9c

0800b6e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6ec:	f107 0308 	add.w	r3, r7, #8
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 f857 	bl	800b7a4 <prvGetNextExpireTime>
 800b6f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f000 f803 	bl	800b708 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b702:	f000 f8d5 	bl	800b8b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b706:	e7f1      	b.n	800b6ec <prvTimerTask+0x8>

0800b708 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b712:	f7ff fa57 	bl	800abc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b716:	f107 0308 	add.w	r3, r7, #8
 800b71a:	4618      	mov	r0, r3
 800b71c:	f000 f866 	bl	800b7ec <prvSampleTimeNow>
 800b720:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d130      	bne.n	800b78a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d10a      	bne.n	800b744 <prvProcessTimerOrBlockTask+0x3c>
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	429a      	cmp	r2, r3
 800b734:	d806      	bhi.n	800b744 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b736:	f7ff fa53 	bl	800abe0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b73a:	68f9      	ldr	r1, [r7, #12]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f7ff ff85 	bl	800b64c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b742:	e024      	b.n	800b78e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d008      	beq.n	800b75c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b74a:	4b13      	ldr	r3, [pc, #76]	; (800b798 <prvProcessTimerOrBlockTask+0x90>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d101      	bne.n	800b758 <prvProcessTimerOrBlockTask+0x50>
 800b754:	2301      	movs	r3, #1
 800b756:	e000      	b.n	800b75a <prvProcessTimerOrBlockTask+0x52>
 800b758:	2300      	movs	r3, #0
 800b75a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b75c:	4b0f      	ldr	r3, [pc, #60]	; (800b79c <prvProcessTimerOrBlockTask+0x94>)
 800b75e:	6818      	ldr	r0, [r3, #0]
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	4619      	mov	r1, r3
 800b76a:	f7fe ffc1 	bl	800a6f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b76e:	f7ff fa37 	bl	800abe0 <xTaskResumeAll>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10a      	bne.n	800b78e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b778:	4b09      	ldr	r3, [pc, #36]	; (800b7a0 <prvProcessTimerOrBlockTask+0x98>)
 800b77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b77e:	601a      	str	r2, [r3, #0]
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	f3bf 8f6f 	isb	sy
}
 800b788:	e001      	b.n	800b78e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b78a:	f7ff fa29 	bl	800abe0 <xTaskResumeAll>
}
 800b78e:	bf00      	nop
 800b790:	3710      	adds	r7, #16
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	20000ca0 	.word	0x20000ca0
 800b79c:	20000ca4 	.word	0x20000ca4
 800b7a0:	e000ed04 	.word	0xe000ed04

0800b7a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7ac:	4b0e      	ldr	r3, [pc, #56]	; (800b7e8 <prvGetNextExpireTime+0x44>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d101      	bne.n	800b7ba <prvGetNextExpireTime+0x16>
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	e000      	b.n	800b7bc <prvGetNextExpireTime+0x18>
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d105      	bne.n	800b7d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7c8:	4b07      	ldr	r3, [pc, #28]	; (800b7e8 <prvGetNextExpireTime+0x44>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	60fb      	str	r3, [r7, #12]
 800b7d2:	e001      	b.n	800b7d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3714      	adds	r7, #20
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	20000c9c 	.word	0x20000c9c

0800b7ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b7f4:	f7ff fa90 	bl	800ad18 <xTaskGetTickCount>
 800b7f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b7fa:	4b0b      	ldr	r3, [pc, #44]	; (800b828 <prvSampleTimeNow+0x3c>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	429a      	cmp	r2, r3
 800b802:	d205      	bcs.n	800b810 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b804:	f000 f930 	bl	800ba68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	601a      	str	r2, [r3, #0]
 800b80e:	e002      	b.n	800b816 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b816:	4a04      	ldr	r2, [pc, #16]	; (800b828 <prvSampleTimeNow+0x3c>)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b81c:	68fb      	ldr	r3, [r7, #12]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	20000cac 	.word	0x20000cac

0800b82c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b086      	sub	sp, #24
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
 800b838:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b83a:	2300      	movs	r3, #0
 800b83c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d812      	bhi.n	800b878 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	1ad2      	subs	r2, r2, r3
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d302      	bcc.n	800b866 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b860:	2301      	movs	r3, #1
 800b862:	617b      	str	r3, [r7, #20]
 800b864:	e01b      	b.n	800b89e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b866:	4b10      	ldr	r3, [pc, #64]	; (800b8a8 <prvInsertTimerInActiveList+0x7c>)
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	3304      	adds	r3, #4
 800b86e:	4619      	mov	r1, r3
 800b870:	4610      	mov	r0, r2
 800b872:	f7fe f97c 	bl	8009b6e <vListInsert>
 800b876:	e012      	b.n	800b89e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d206      	bcs.n	800b88e <prvInsertTimerInActiveList+0x62>
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	429a      	cmp	r2, r3
 800b886:	d302      	bcc.n	800b88e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b888:	2301      	movs	r3, #1
 800b88a:	617b      	str	r3, [r7, #20]
 800b88c:	e007      	b.n	800b89e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b88e:	4b07      	ldr	r3, [pc, #28]	; (800b8ac <prvInsertTimerInActiveList+0x80>)
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	3304      	adds	r3, #4
 800b896:	4619      	mov	r1, r3
 800b898:	4610      	mov	r0, r2
 800b89a:	f7fe f968 	bl	8009b6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b89e:	697b      	ldr	r3, [r7, #20]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3718      	adds	r7, #24
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	20000ca0 	.word	0x20000ca0
 800b8ac:	20000c9c 	.word	0x20000c9c

0800b8b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b08e      	sub	sp, #56	; 0x38
 800b8b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8b6:	e0c6      	b.n	800ba46 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	da17      	bge.n	800b8ee <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b8be:	1d3b      	adds	r3, r7, #4
 800b8c0:	3304      	adds	r3, #4
 800b8c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d109      	bne.n	800b8de <prvProcessReceivedCommands+0x2e>
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	61fb      	str	r3, [r7, #28]
 800b8dc:	e7fe      	b.n	800b8dc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8e4:	6850      	ldr	r0, [r2, #4]
 800b8e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8e8:	6892      	ldr	r2, [r2, #8]
 800b8ea:	4611      	mov	r1, r2
 800b8ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f2c0 80a7 	blt.w	800ba44 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fc:	695b      	ldr	r3, [r3, #20]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d004      	beq.n	800b90c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b904:	3304      	adds	r3, #4
 800b906:	4618      	mov	r0, r3
 800b908:	f7fe f96a 	bl	8009be0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b90c:	463b      	mov	r3, r7
 800b90e:	4618      	mov	r0, r3
 800b910:	f7ff ff6c 	bl	800b7ec <prvSampleTimeNow>
 800b914:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b09      	cmp	r3, #9
 800b91a:	f200 8094 	bhi.w	800ba46 <prvProcessReceivedCommands+0x196>
 800b91e:	a201      	add	r2, pc, #4	; (adr r2, 800b924 <prvProcessReceivedCommands+0x74>)
 800b920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b924:	0800b94d 	.word	0x0800b94d
 800b928:	0800b94d 	.word	0x0800b94d
 800b92c:	0800b94d 	.word	0x0800b94d
 800b930:	0800b9bf 	.word	0x0800b9bf
 800b934:	0800b9d3 	.word	0x0800b9d3
 800b938:	0800ba1b 	.word	0x0800ba1b
 800b93c:	0800b94d 	.word	0x0800b94d
 800b940:	0800b94d 	.word	0x0800b94d
 800b944:	0800b9bf 	.word	0x0800b9bf
 800b948:	0800b9d3 	.word	0x0800b9d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b952:	f043 0301 	orr.w	r3, r3, #1
 800b956:	b2da      	uxtb	r2, r3
 800b958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b962:	699b      	ldr	r3, [r3, #24]
 800b964:	18d1      	adds	r1, r2, r3
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b96a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b96c:	f7ff ff5e 	bl	800b82c <prvInsertTimerInActiveList>
 800b970:	4603      	mov	r3, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d067      	beq.n	800ba46 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b97c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b984:	f003 0304 	and.w	r3, r3, #4
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d05c      	beq.n	800ba46 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	441a      	add	r2, r3
 800b994:	2300      	movs	r3, #0
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	2300      	movs	r3, #0
 800b99a:	2100      	movs	r1, #0
 800b99c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b99e:	f7ff fe09 	bl	800b5b4 <xTimerGenericCommand>
 800b9a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d14d      	bne.n	800ba46 <prvProcessReceivedCommands+0x196>
 800b9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	61bb      	str	r3, [r7, #24]
 800b9bc:	e7fe      	b.n	800b9bc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9c4:	f023 0301 	bic.w	r3, r3, #1
 800b9c8:	b2da      	uxtb	r2, r3
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b9d0:	e039      	b.n	800ba46 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9d8:	f043 0301 	orr.w	r3, r3, #1
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ec:	699b      	ldr	r3, [r3, #24]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d109      	bne.n	800ba06 <prvProcessReceivedCommands+0x156>
 800b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	617b      	str	r3, [r7, #20]
 800ba04:	e7fe      	b.n	800ba04 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ba06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba08:	699a      	ldr	r2, [r3, #24]
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0c:	18d1      	adds	r1, r2, r3
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba14:	f7ff ff0a 	bl	800b82c <prvInsertTimerInActiveList>
					break;
 800ba18:	e015      	b.n	800ba46 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba20:	f003 0302 	and.w	r3, r3, #2
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d103      	bne.n	800ba30 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800ba28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba2a:	f000 fbc3 	bl	800c1b4 <vPortFree>
 800ba2e:	e00a      	b.n	800ba46 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba36:	f023 0301 	bic.w	r3, r3, #1
 800ba3a:	b2da      	uxtb	r2, r3
 800ba3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba42:	e000      	b.n	800ba46 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ba44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba46:	4b07      	ldr	r3, [pc, #28]	; (800ba64 <prvProcessReceivedCommands+0x1b4>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	1d39      	adds	r1, r7, #4
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fe fbbc 	bl	800a1cc <xQueueReceive>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f47f af2e 	bne.w	800b8b8 <prvProcessReceivedCommands+0x8>
	}
}
 800ba5c:	bf00      	nop
 800ba5e:	3730      	adds	r7, #48	; 0x30
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	20000ca4 	.word	0x20000ca4

0800ba68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b088      	sub	sp, #32
 800ba6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba6e:	e047      	b.n	800bb00 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba70:	4b2d      	ldr	r3, [pc, #180]	; (800bb28 <prvSwitchTimerLists+0xc0>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba7a:	4b2b      	ldr	r3, [pc, #172]	; (800bb28 <prvSwitchTimerLists+0xc0>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	3304      	adds	r3, #4
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fe f8a9 	bl	8009be0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6a1b      	ldr	r3, [r3, #32]
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba9c:	f003 0304 	and.w	r3, r3, #4
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d02d      	beq.n	800bb00 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	699b      	ldr	r3, [r3, #24]
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	4413      	add	r3, r2
 800baac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d90e      	bls.n	800bad4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	68ba      	ldr	r2, [r7, #8]
 800baba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bac2:	4b19      	ldr	r3, [pc, #100]	; (800bb28 <prvSwitchTimerLists+0xc0>)
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	3304      	adds	r3, #4
 800baca:	4619      	mov	r1, r3
 800bacc:	4610      	mov	r0, r2
 800bace:	f7fe f84e 	bl	8009b6e <vListInsert>
 800bad2:	e015      	b.n	800bb00 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bad4:	2300      	movs	r3, #0
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	2300      	movs	r3, #0
 800bada:	693a      	ldr	r2, [r7, #16]
 800badc:	2100      	movs	r1, #0
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f7ff fd68 	bl	800b5b4 <xTimerGenericCommand>
 800bae4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d109      	bne.n	800bb00 <prvSwitchTimerLists+0x98>
 800baec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf0:	f383 8811 	msr	BASEPRI, r3
 800baf4:	f3bf 8f6f 	isb	sy
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	603b      	str	r3, [r7, #0]
 800bafe:	e7fe      	b.n	800bafe <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb00:	4b09      	ldr	r3, [pc, #36]	; (800bb28 <prvSwitchTimerLists+0xc0>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1b2      	bne.n	800ba70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bb0a:	4b07      	ldr	r3, [pc, #28]	; (800bb28 <prvSwitchTimerLists+0xc0>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb10:	4b06      	ldr	r3, [pc, #24]	; (800bb2c <prvSwitchTimerLists+0xc4>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a04      	ldr	r2, [pc, #16]	; (800bb28 <prvSwitchTimerLists+0xc0>)
 800bb16:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb18:	4a04      	ldr	r2, [pc, #16]	; (800bb2c <prvSwitchTimerLists+0xc4>)
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	6013      	str	r3, [r2, #0]
}
 800bb1e:	bf00      	nop
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	20000c9c 	.word	0x20000c9c
 800bb2c:	20000ca0 	.word	0x20000ca0

0800bb30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb36:	f000 f961 	bl	800bdfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb3a:	4b15      	ldr	r3, [pc, #84]	; (800bb90 <prvCheckForValidListAndQueue+0x60>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d120      	bne.n	800bb84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb42:	4814      	ldr	r0, [pc, #80]	; (800bb94 <prvCheckForValidListAndQueue+0x64>)
 800bb44:	f7fd ffc2 	bl	8009acc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb48:	4813      	ldr	r0, [pc, #76]	; (800bb98 <prvCheckForValidListAndQueue+0x68>)
 800bb4a:	f7fd ffbf 	bl	8009acc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb4e:	4b13      	ldr	r3, [pc, #76]	; (800bb9c <prvCheckForValidListAndQueue+0x6c>)
 800bb50:	4a10      	ldr	r2, [pc, #64]	; (800bb94 <prvCheckForValidListAndQueue+0x64>)
 800bb52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb54:	4b12      	ldr	r3, [pc, #72]	; (800bba0 <prvCheckForValidListAndQueue+0x70>)
 800bb56:	4a10      	ldr	r2, [pc, #64]	; (800bb98 <prvCheckForValidListAndQueue+0x68>)
 800bb58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	4b11      	ldr	r3, [pc, #68]	; (800bba4 <prvCheckForValidListAndQueue+0x74>)
 800bb60:	4a11      	ldr	r2, [pc, #68]	; (800bba8 <prvCheckForValidListAndQueue+0x78>)
 800bb62:	2110      	movs	r1, #16
 800bb64:	200a      	movs	r0, #10
 800bb66:	f7fe f8cd 	bl	8009d04 <xQueueGenericCreateStatic>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	4b08      	ldr	r3, [pc, #32]	; (800bb90 <prvCheckForValidListAndQueue+0x60>)
 800bb6e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb70:	4b07      	ldr	r3, [pc, #28]	; (800bb90 <prvCheckForValidListAndQueue+0x60>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d005      	beq.n	800bb84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb78:	4b05      	ldr	r3, [pc, #20]	; (800bb90 <prvCheckForValidListAndQueue+0x60>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	490b      	ldr	r1, [pc, #44]	; (800bbac <prvCheckForValidListAndQueue+0x7c>)
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fe fd8e 	bl	800a6a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb84:	f000 f968 	bl	800be58 <vPortExitCritical>
}
 800bb88:	bf00      	nop
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	20000ca4 	.word	0x20000ca4
 800bb94:	20000c74 	.word	0x20000c74
 800bb98:	20000c88 	.word	0x20000c88
 800bb9c:	20000c9c 	.word	0x20000c9c
 800bba0:	20000ca0 	.word	0x20000ca0
 800bba4:	20000d50 	.word	0x20000d50
 800bba8:	20000cb0 	.word	0x20000cb0
 800bbac:	0800ccbc 	.word	0x0800ccbc

0800bbb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	3b04      	subs	r3, #4
 800bbc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bbc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	3b04      	subs	r3, #4
 800bbce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	f023 0201 	bic.w	r2, r3, #1
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	3b04      	subs	r3, #4
 800bbde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bbe0:	4a0c      	ldr	r2, [pc, #48]	; (800bc14 <pxPortInitialiseStack+0x64>)
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3b14      	subs	r3, #20
 800bbea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	3b04      	subs	r3, #4
 800bbf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f06f 0202 	mvn.w	r2, #2
 800bbfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	3b20      	subs	r3, #32
 800bc04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc06:	68fb      	ldr	r3, [r7, #12]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3714      	adds	r7, #20
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr
 800bc14:	0800bc19 	.word	0x0800bc19

0800bc18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc22:	4b11      	ldr	r3, [pc, #68]	; (800bc68 <prvTaskExitError+0x50>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc2a:	d009      	beq.n	800bc40 <prvTaskExitError+0x28>
 800bc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc30:	f383 8811 	msr	BASEPRI, r3
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	60fb      	str	r3, [r7, #12]
 800bc3e:	e7fe      	b.n	800bc3e <prvTaskExitError+0x26>
 800bc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc52:	bf00      	nop
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d0fc      	beq.n	800bc54 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc5a:	bf00      	nop
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	2000002c 	.word	0x2000002c
 800bc6c:	00000000 	.word	0x00000000

0800bc70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc70:	4b07      	ldr	r3, [pc, #28]	; (800bc90 <pxCurrentTCBConst2>)
 800bc72:	6819      	ldr	r1, [r3, #0]
 800bc74:	6808      	ldr	r0, [r1, #0]
 800bc76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc7a:	f380 8809 	msr	PSP, r0
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f04f 0000 	mov.w	r0, #0
 800bc86:	f380 8811 	msr	BASEPRI, r0
 800bc8a:	4770      	bx	lr
 800bc8c:	f3af 8000 	nop.w

0800bc90 <pxCurrentTCBConst2>:
 800bc90:	20000774 	.word	0x20000774
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc94:	bf00      	nop
 800bc96:	bf00      	nop

0800bc98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc98:	4808      	ldr	r0, [pc, #32]	; (800bcbc <prvPortStartFirstTask+0x24>)
 800bc9a:	6800      	ldr	r0, [r0, #0]
 800bc9c:	6800      	ldr	r0, [r0, #0]
 800bc9e:	f380 8808 	msr	MSP, r0
 800bca2:	f04f 0000 	mov.w	r0, #0
 800bca6:	f380 8814 	msr	CONTROL, r0
 800bcaa:	b662      	cpsie	i
 800bcac:	b661      	cpsie	f
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	df00      	svc	0
 800bcb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcba:	bf00      	nop
 800bcbc:	e000ed08 	.word	0xe000ed08

0800bcc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bcc6:	4b44      	ldr	r3, [pc, #272]	; (800bdd8 <xPortStartScheduler+0x118>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a44      	ldr	r2, [pc, #272]	; (800bddc <xPortStartScheduler+0x11c>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d109      	bne.n	800bce4 <xPortStartScheduler+0x24>
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	613b      	str	r3, [r7, #16]
 800bce2:	e7fe      	b.n	800bce2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bce4:	4b3c      	ldr	r3, [pc, #240]	; (800bdd8 <xPortStartScheduler+0x118>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a3d      	ldr	r2, [pc, #244]	; (800bde0 <xPortStartScheduler+0x120>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d109      	bne.n	800bd02 <xPortStartScheduler+0x42>
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	60fb      	str	r3, [r7, #12]
 800bd00:	e7fe      	b.n	800bd00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd02:	4b38      	ldr	r3, [pc, #224]	; (800bde4 <xPortStartScheduler+0x124>)
 800bd04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	22ff      	movs	r2, #255	; 0xff
 800bd12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd1c:	78fb      	ldrb	r3, [r7, #3]
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bd24:	b2da      	uxtb	r2, r3
 800bd26:	4b30      	ldr	r3, [pc, #192]	; (800bde8 <xPortStartScheduler+0x128>)
 800bd28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd2a:	4b30      	ldr	r3, [pc, #192]	; (800bdec <xPortStartScheduler+0x12c>)
 800bd2c:	2207      	movs	r2, #7
 800bd2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd30:	e009      	b.n	800bd46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800bd32:	4b2e      	ldr	r3, [pc, #184]	; (800bdec <xPortStartScheduler+0x12c>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	4a2c      	ldr	r2, [pc, #176]	; (800bdec <xPortStartScheduler+0x12c>)
 800bd3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd3c:	78fb      	ldrb	r3, [r7, #3]
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	005b      	lsls	r3, r3, #1
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd46:	78fb      	ldrb	r3, [r7, #3]
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd4e:	2b80      	cmp	r3, #128	; 0x80
 800bd50:	d0ef      	beq.n	800bd32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd52:	4b26      	ldr	r3, [pc, #152]	; (800bdec <xPortStartScheduler+0x12c>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f1c3 0307 	rsb	r3, r3, #7
 800bd5a:	2b04      	cmp	r3, #4
 800bd5c:	d009      	beq.n	800bd72 <xPortStartScheduler+0xb2>
 800bd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd62:	f383 8811 	msr	BASEPRI, r3
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	f3bf 8f4f 	dsb	sy
 800bd6e:	60bb      	str	r3, [r7, #8]
 800bd70:	e7fe      	b.n	800bd70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd72:	4b1e      	ldr	r3, [pc, #120]	; (800bdec <xPortStartScheduler+0x12c>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	021b      	lsls	r3, r3, #8
 800bd78:	4a1c      	ldr	r2, [pc, #112]	; (800bdec <xPortStartScheduler+0x12c>)
 800bd7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd7c:	4b1b      	ldr	r3, [pc, #108]	; (800bdec <xPortStartScheduler+0x12c>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd84:	4a19      	ldr	r2, [pc, #100]	; (800bdec <xPortStartScheduler+0x12c>)
 800bd86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	b2da      	uxtb	r2, r3
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd90:	4b17      	ldr	r3, [pc, #92]	; (800bdf0 <xPortStartScheduler+0x130>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a16      	ldr	r2, [pc, #88]	; (800bdf0 <xPortStartScheduler+0x130>)
 800bd96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd9c:	4b14      	ldr	r3, [pc, #80]	; (800bdf0 <xPortStartScheduler+0x130>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a13      	ldr	r2, [pc, #76]	; (800bdf0 <xPortStartScheduler+0x130>)
 800bda2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bda6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bda8:	f000 f8d6 	bl	800bf58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bdac:	4b11      	ldr	r3, [pc, #68]	; (800bdf4 <xPortStartScheduler+0x134>)
 800bdae:	2200      	movs	r2, #0
 800bdb0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bdb2:	f000 f8f5 	bl	800bfa0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bdb6:	4b10      	ldr	r3, [pc, #64]	; (800bdf8 <xPortStartScheduler+0x138>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a0f      	ldr	r2, [pc, #60]	; (800bdf8 <xPortStartScheduler+0x138>)
 800bdbc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bdc0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bdc2:	f7ff ff69 	bl	800bc98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bdc6:	f7ff f86f 	bl	800aea8 <vTaskSwitchContext>
	prvTaskExitError();
 800bdca:	f7ff ff25 	bl	800bc18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3718      	adds	r7, #24
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	e000ed00 	.word	0xe000ed00
 800bddc:	410fc271 	.word	0x410fc271
 800bde0:	410fc270 	.word	0x410fc270
 800bde4:	e000e400 	.word	0xe000e400
 800bde8:	20000da0 	.word	0x20000da0
 800bdec:	20000da4 	.word	0x20000da4
 800bdf0:	e000ed20 	.word	0xe000ed20
 800bdf4:	2000002c 	.word	0x2000002c
 800bdf8:	e000ef34 	.word	0xe000ef34

0800bdfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be06:	f383 8811 	msr	BASEPRI, r3
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	f3bf 8f4f 	dsb	sy
 800be12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be14:	4b0e      	ldr	r3, [pc, #56]	; (800be50 <vPortEnterCritical+0x54>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	3301      	adds	r3, #1
 800be1a:	4a0d      	ldr	r2, [pc, #52]	; (800be50 <vPortEnterCritical+0x54>)
 800be1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be1e:	4b0c      	ldr	r3, [pc, #48]	; (800be50 <vPortEnterCritical+0x54>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2b01      	cmp	r3, #1
 800be24:	d10e      	bne.n	800be44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be26:	4b0b      	ldr	r3, [pc, #44]	; (800be54 <vPortEnterCritical+0x58>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d009      	beq.n	800be44 <vPortEnterCritical+0x48>
 800be30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be34:	f383 8811 	msr	BASEPRI, r3
 800be38:	f3bf 8f6f 	isb	sy
 800be3c:	f3bf 8f4f 	dsb	sy
 800be40:	603b      	str	r3, [r7, #0]
 800be42:	e7fe      	b.n	800be42 <vPortEnterCritical+0x46>
	}
}
 800be44:	bf00      	nop
 800be46:	370c      	adds	r7, #12
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr
 800be50:	2000002c 	.word	0x2000002c
 800be54:	e000ed04 	.word	0xe000ed04

0800be58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be5e:	4b11      	ldr	r3, [pc, #68]	; (800bea4 <vPortExitCritical+0x4c>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d109      	bne.n	800be7a <vPortExitCritical+0x22>
 800be66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6a:	f383 8811 	msr	BASEPRI, r3
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	607b      	str	r3, [r7, #4]
 800be78:	e7fe      	b.n	800be78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800be7a:	4b0a      	ldr	r3, [pc, #40]	; (800bea4 <vPortExitCritical+0x4c>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	3b01      	subs	r3, #1
 800be80:	4a08      	ldr	r2, [pc, #32]	; (800bea4 <vPortExitCritical+0x4c>)
 800be82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be84:	4b07      	ldr	r3, [pc, #28]	; (800bea4 <vPortExitCritical+0x4c>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d104      	bne.n	800be96 <vPortExitCritical+0x3e>
 800be8c:	2300      	movs	r3, #0
 800be8e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800be96:	bf00      	nop
 800be98:	370c      	adds	r7, #12
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	2000002c 	.word	0x2000002c
	...

0800beb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800beb0:	f3ef 8009 	mrs	r0, PSP
 800beb4:	f3bf 8f6f 	isb	sy
 800beb8:	4b15      	ldr	r3, [pc, #84]	; (800bf10 <pxCurrentTCBConst>)
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	f01e 0f10 	tst.w	lr, #16
 800bec0:	bf08      	it	eq
 800bec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beca:	6010      	str	r0, [r2, #0]
 800becc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bed4:	f380 8811 	msr	BASEPRI, r0
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	f7fe ffe2 	bl	800aea8 <vTaskSwitchContext>
 800bee4:	f04f 0000 	mov.w	r0, #0
 800bee8:	f380 8811 	msr	BASEPRI, r0
 800beec:	bc09      	pop	{r0, r3}
 800beee:	6819      	ldr	r1, [r3, #0]
 800bef0:	6808      	ldr	r0, [r1, #0]
 800bef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef6:	f01e 0f10 	tst.w	lr, #16
 800befa:	bf08      	it	eq
 800befc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf00:	f380 8809 	msr	PSP, r0
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	f3af 8000 	nop.w

0800bf10 <pxCurrentTCBConst>:
 800bf10:	20000774 	.word	0x20000774
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf14:	bf00      	nop
 800bf16:	bf00      	nop

0800bf18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf30:	f7fe ff02 	bl	800ad38 <xTaskIncrementTick>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d003      	beq.n	800bf42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf3a:	4b06      	ldr	r3, [pc, #24]	; (800bf54 <SysTick_Handler+0x3c>)
 800bf3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	2300      	movs	r3, #0
 800bf44:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf4c:	bf00      	nop
 800bf4e:	3708      	adds	r7, #8
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	e000ed04 	.word	0xe000ed04

0800bf58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf58:	b480      	push	{r7}
 800bf5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf5c:	4b0b      	ldr	r3, [pc, #44]	; (800bf8c <vPortSetupTimerInterrupt+0x34>)
 800bf5e:	2200      	movs	r2, #0
 800bf60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf62:	4b0b      	ldr	r3, [pc, #44]	; (800bf90 <vPortSetupTimerInterrupt+0x38>)
 800bf64:	2200      	movs	r2, #0
 800bf66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf68:	4b0a      	ldr	r3, [pc, #40]	; (800bf94 <vPortSetupTimerInterrupt+0x3c>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a0a      	ldr	r2, [pc, #40]	; (800bf98 <vPortSetupTimerInterrupt+0x40>)
 800bf6e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf72:	099b      	lsrs	r3, r3, #6
 800bf74:	4a09      	ldr	r2, [pc, #36]	; (800bf9c <vPortSetupTimerInterrupt+0x44>)
 800bf76:	3b01      	subs	r3, #1
 800bf78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf7a:	4b04      	ldr	r3, [pc, #16]	; (800bf8c <vPortSetupTimerInterrupt+0x34>)
 800bf7c:	2207      	movs	r2, #7
 800bf7e:	601a      	str	r2, [r3, #0]
}
 800bf80:	bf00      	nop
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	e000e010 	.word	0xe000e010
 800bf90:	e000e018 	.word	0xe000e018
 800bf94:	20000000 	.word	0x20000000
 800bf98:	10624dd3 	.word	0x10624dd3
 800bf9c:	e000e014 	.word	0xe000e014

0800bfa0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfa0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bfb0 <vPortEnableVFP+0x10>
 800bfa4:	6801      	ldr	r1, [r0, #0]
 800bfa6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bfaa:	6001      	str	r1, [r0, #0]
 800bfac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bfae:	bf00      	nop
 800bfb0:	e000ed88 	.word	0xe000ed88

0800bfb4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bfba:	f3ef 8305 	mrs	r3, IPSR
 800bfbe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b0f      	cmp	r3, #15
 800bfc4:	d913      	bls.n	800bfee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bfc6:	4a16      	ldr	r2, [pc, #88]	; (800c020 <vPortValidateInterruptPriority+0x6c>)
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	4413      	add	r3, r2
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bfd0:	4b14      	ldr	r3, [pc, #80]	; (800c024 <vPortValidateInterruptPriority+0x70>)
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	7afa      	ldrb	r2, [r7, #11]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d209      	bcs.n	800bfee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800bfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfde:	f383 8811 	msr	BASEPRI, r3
 800bfe2:	f3bf 8f6f 	isb	sy
 800bfe6:	f3bf 8f4f 	dsb	sy
 800bfea:	607b      	str	r3, [r7, #4]
 800bfec:	e7fe      	b.n	800bfec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bfee:	4b0e      	ldr	r3, [pc, #56]	; (800c028 <vPortValidateInterruptPriority+0x74>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bff6:	4b0d      	ldr	r3, [pc, #52]	; (800c02c <vPortValidateInterruptPriority+0x78>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d909      	bls.n	800c012 <vPortValidateInterruptPriority+0x5e>
 800bffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	603b      	str	r3, [r7, #0]
 800c010:	e7fe      	b.n	800c010 <vPortValidateInterruptPriority+0x5c>
	}
 800c012:	bf00      	nop
 800c014:	3714      	adds	r7, #20
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	e000e3f0 	.word	0xe000e3f0
 800c024:	20000da0 	.word	0x20000da0
 800c028:	e000ed0c 	.word	0xe000ed0c
 800c02c:	20000da4 	.word	0x20000da4

0800c030 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b08a      	sub	sp, #40	; 0x28
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c038:	2300      	movs	r3, #0
 800c03a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c03c:	f7fe fdc2 	bl	800abc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c040:	4b57      	ldr	r3, [pc, #348]	; (800c1a0 <pvPortMalloc+0x170>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d101      	bne.n	800c04c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c048:	f000 f90c 	bl	800c264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c04c:	4b55      	ldr	r3, [pc, #340]	; (800c1a4 <pvPortMalloc+0x174>)
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4013      	ands	r3, r2
 800c054:	2b00      	cmp	r3, #0
 800c056:	f040 808c 	bne.w	800c172 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d01c      	beq.n	800c09a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c060:	2208      	movs	r2, #8
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4413      	add	r3, r2
 800c066:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f003 0307 	and.w	r3, r3, #7
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d013      	beq.n	800c09a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f023 0307 	bic.w	r3, r3, #7
 800c078:	3308      	adds	r3, #8
 800c07a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f003 0307 	and.w	r3, r3, #7
 800c082:	2b00      	cmp	r3, #0
 800c084:	d009      	beq.n	800c09a <pvPortMalloc+0x6a>
 800c086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	617b      	str	r3, [r7, #20]
 800c098:	e7fe      	b.n	800c098 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d068      	beq.n	800c172 <pvPortMalloc+0x142>
 800c0a0:	4b41      	ldr	r3, [pc, #260]	; (800c1a8 <pvPortMalloc+0x178>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	687a      	ldr	r2, [r7, #4]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d863      	bhi.n	800c172 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c0aa:	4b40      	ldr	r3, [pc, #256]	; (800c1ac <pvPortMalloc+0x17c>)
 800c0ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c0ae:	4b3f      	ldr	r3, [pc, #252]	; (800c1ac <pvPortMalloc+0x17c>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0b4:	e004      	b.n	800c0c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d903      	bls.n	800c0d2 <pvPortMalloc+0xa2>
 800c0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d1f1      	bne.n	800c0b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c0d2:	4b33      	ldr	r3, [pc, #204]	; (800c1a0 <pvPortMalloc+0x170>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d04a      	beq.n	800c172 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c0dc:	6a3b      	ldr	r3, [r7, #32]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2208      	movs	r2, #8
 800c0e2:	4413      	add	r3, r2
 800c0e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	6a3b      	ldr	r3, [r7, #32]
 800c0ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f0:	685a      	ldr	r2, [r3, #4]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	1ad2      	subs	r2, r2, r3
 800c0f6:	2308      	movs	r3, #8
 800c0f8:	005b      	lsls	r3, r3, #1
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d91e      	bls.n	800c13c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4413      	add	r3, r2
 800c104:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	f003 0307 	and.w	r3, r3, #7
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d009      	beq.n	800c124 <pvPortMalloc+0xf4>
 800c110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	613b      	str	r3, [r7, #16]
 800c122:	e7fe      	b.n	800c122 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c126:	685a      	ldr	r2, [r3, #4]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	1ad2      	subs	r2, r2, r3
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c136:	69b8      	ldr	r0, [r7, #24]
 800c138:	f000 f8f6 	bl	800c328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c13c:	4b1a      	ldr	r3, [pc, #104]	; (800c1a8 <pvPortMalloc+0x178>)
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	1ad3      	subs	r3, r2, r3
 800c146:	4a18      	ldr	r2, [pc, #96]	; (800c1a8 <pvPortMalloc+0x178>)
 800c148:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c14a:	4b17      	ldr	r3, [pc, #92]	; (800c1a8 <pvPortMalloc+0x178>)
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	4b18      	ldr	r3, [pc, #96]	; (800c1b0 <pvPortMalloc+0x180>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	429a      	cmp	r2, r3
 800c154:	d203      	bcs.n	800c15e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c156:	4b14      	ldr	r3, [pc, #80]	; (800c1a8 <pvPortMalloc+0x178>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a15      	ldr	r2, [pc, #84]	; (800c1b0 <pvPortMalloc+0x180>)
 800c15c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c160:	685a      	ldr	r2, [r3, #4]
 800c162:	4b10      	ldr	r3, [pc, #64]	; (800c1a4 <pvPortMalloc+0x174>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	431a      	orrs	r2, r3
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	2200      	movs	r2, #0
 800c170:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c172:	f7fe fd35 	bl	800abe0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	f003 0307 	and.w	r3, r3, #7
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d009      	beq.n	800c194 <pvPortMalloc+0x164>
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	60fb      	str	r3, [r7, #12]
 800c192:	e7fe      	b.n	800c192 <pvPortMalloc+0x162>
	return pvReturn;
 800c194:	69fb      	ldr	r3, [r7, #28]
}
 800c196:	4618      	mov	r0, r3
 800c198:	3728      	adds	r7, #40	; 0x28
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	200049b0 	.word	0x200049b0
 800c1a4:	200049bc 	.word	0x200049bc
 800c1a8:	200049b4 	.word	0x200049b4
 800c1ac:	200049a8 	.word	0x200049a8
 800c1b0:	200049b8 	.word	0x200049b8

0800c1b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b086      	sub	sp, #24
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d046      	beq.n	800c254 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c1c6:	2308      	movs	r3, #8
 800c1c8:	425b      	negs	r3, r3
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	685a      	ldr	r2, [r3, #4]
 800c1d8:	4b20      	ldr	r3, [pc, #128]	; (800c25c <vPortFree+0xa8>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4013      	ands	r3, r2
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d109      	bne.n	800c1f6 <vPortFree+0x42>
 800c1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e6:	f383 8811 	msr	BASEPRI, r3
 800c1ea:	f3bf 8f6f 	isb	sy
 800c1ee:	f3bf 8f4f 	dsb	sy
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	e7fe      	b.n	800c1f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d009      	beq.n	800c212 <vPortFree+0x5e>
 800c1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	60bb      	str	r3, [r7, #8]
 800c210:	e7fe      	b.n	800c210 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	685a      	ldr	r2, [r3, #4]
 800c216:	4b11      	ldr	r3, [pc, #68]	; (800c25c <vPortFree+0xa8>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4013      	ands	r3, r2
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d019      	beq.n	800c254 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d115      	bne.n	800c254 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	4b0b      	ldr	r3, [pc, #44]	; (800c25c <vPortFree+0xa8>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	43db      	mvns	r3, r3
 800c232:	401a      	ands	r2, r3
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c238:	f7fe fcc4 	bl	800abc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	685a      	ldr	r2, [r3, #4]
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <vPortFree+0xac>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4413      	add	r3, r2
 800c246:	4a06      	ldr	r2, [pc, #24]	; (800c260 <vPortFree+0xac>)
 800c248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c24a:	6938      	ldr	r0, [r7, #16]
 800c24c:	f000 f86c 	bl	800c328 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c250:	f7fe fcc6 	bl	800abe0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c254:	bf00      	nop
 800c256:	3718      	adds	r7, #24
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	200049bc 	.word	0x200049bc
 800c260:	200049b4 	.word	0x200049b4

0800c264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c26a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c26e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c270:	4b27      	ldr	r3, [pc, #156]	; (800c310 <prvHeapInit+0xac>)
 800c272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f003 0307 	and.w	r3, r3, #7
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00c      	beq.n	800c298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	3307      	adds	r3, #7
 800c282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f023 0307 	bic.w	r3, r3, #7
 800c28a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	1ad3      	subs	r3, r2, r3
 800c292:	4a1f      	ldr	r2, [pc, #124]	; (800c310 <prvHeapInit+0xac>)
 800c294:	4413      	add	r3, r2
 800c296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c29c:	4a1d      	ldr	r2, [pc, #116]	; (800c314 <prvHeapInit+0xb0>)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2a2:	4b1c      	ldr	r3, [pc, #112]	; (800c314 <prvHeapInit+0xb0>)
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	68ba      	ldr	r2, [r7, #8]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c2b0:	2208      	movs	r2, #8
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	1a9b      	subs	r3, r3, r2
 800c2b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f023 0307 	bic.w	r3, r3, #7
 800c2be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	4a15      	ldr	r2, [pc, #84]	; (800c318 <prvHeapInit+0xb4>)
 800c2c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c2c6:	4b14      	ldr	r3, [pc, #80]	; (800c318 <prvHeapInit+0xb4>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c2ce:	4b12      	ldr	r3, [pc, #72]	; (800c318 <prvHeapInit+0xb4>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	1ad2      	subs	r2, r2, r3
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2e4:	4b0c      	ldr	r3, [pc, #48]	; (800c318 <prvHeapInit+0xb4>)
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	4a0a      	ldr	r2, [pc, #40]	; (800c31c <prvHeapInit+0xb8>)
 800c2f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	4a09      	ldr	r2, [pc, #36]	; (800c320 <prvHeapInit+0xbc>)
 800c2fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c2fc:	4b09      	ldr	r3, [pc, #36]	; (800c324 <prvHeapInit+0xc0>)
 800c2fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c302:	601a      	str	r2, [r3, #0]
}
 800c304:	bf00      	nop
 800c306:	3714      	adds	r7, #20
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr
 800c310:	20000da8 	.word	0x20000da8
 800c314:	200049a8 	.word	0x200049a8
 800c318:	200049b0 	.word	0x200049b0
 800c31c:	200049b8 	.word	0x200049b8
 800c320:	200049b4 	.word	0x200049b4
 800c324:	200049bc 	.word	0x200049bc

0800c328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c330:	4b28      	ldr	r3, [pc, #160]	; (800c3d4 <prvInsertBlockIntoFreeList+0xac>)
 800c332:	60fb      	str	r3, [r7, #12]
 800c334:	e002      	b.n	800c33c <prvInsertBlockIntoFreeList+0x14>
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	60fb      	str	r3, [r7, #12]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	429a      	cmp	r2, r3
 800c344:	d8f7      	bhi.n	800c336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	68ba      	ldr	r2, [r7, #8]
 800c350:	4413      	add	r3, r2
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	429a      	cmp	r2, r3
 800c356:	d108      	bne.n	800c36a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	685a      	ldr	r2, [r3, #4]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	441a      	add	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	441a      	add	r2, r3
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d118      	bne.n	800c3b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	4b15      	ldr	r3, [pc, #84]	; (800c3d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	429a      	cmp	r2, r3
 800c388:	d00d      	beq.n	800c3a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	685a      	ldr	r2, [r3, #4]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	441a      	add	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	e008      	b.n	800c3b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c3a6:	4b0c      	ldr	r3, [pc, #48]	; (800c3d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	601a      	str	r2, [r3, #0]
 800c3ae:	e003      	b.n	800c3b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d002      	beq.n	800c3c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3c6:	bf00      	nop
 800c3c8:	3714      	adds	r7, #20
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	200049a8 	.word	0x200049a8
 800c3d8:	200049b0 	.word	0x200049b0

0800c3dc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	490e      	ldr	r1, [pc, #56]	; (800c41c <MX_USB_HOST_Init+0x40>)
 800c3e4:	480e      	ldr	r0, [pc, #56]	; (800c420 <MX_USB_HOST_Init+0x44>)
 800c3e6:	f7fb fb01 	bl	80079ec <USBH_Init>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c3f0:	f7f4 fc88 	bl	8000d04 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c3f4:	490b      	ldr	r1, [pc, #44]	; (800c424 <MX_USB_HOST_Init+0x48>)
 800c3f6:	480a      	ldr	r0, [pc, #40]	; (800c420 <MX_USB_HOST_Init+0x44>)
 800c3f8:	f7fb fba8 	bl	8007b4c <USBH_RegisterClass>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d001      	beq.n	800c406 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c402:	f7f4 fc7f 	bl	8000d04 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c406:	4806      	ldr	r0, [pc, #24]	; (800c420 <MX_USB_HOST_Init+0x44>)
 800c408:	f7fb fc2c 	bl	8007c64 <USBH_Start>
 800c40c:	4603      	mov	r3, r0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d001      	beq.n	800c416 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c412:	f7f4 fc77 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c416:	bf00      	nop
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	0800c429 	.word	0x0800c429
 800c420:	20004c34 	.word	0x20004c34
 800c424:	2000000c 	.word	0x2000000c

0800c428 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	460b      	mov	r3, r1
 800c432:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c434:	78fb      	ldrb	r3, [r7, #3]
 800c436:	3b01      	subs	r3, #1
 800c438:	2b04      	cmp	r3, #4
 800c43a:	d819      	bhi.n	800c470 <USBH_UserProcess+0x48>
 800c43c:	a201      	add	r2, pc, #4	; (adr r2, 800c444 <USBH_UserProcess+0x1c>)
 800c43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c442:	bf00      	nop
 800c444:	0800c471 	.word	0x0800c471
 800c448:	0800c461 	.word	0x0800c461
 800c44c:	0800c471 	.word	0x0800c471
 800c450:	0800c469 	.word	0x0800c469
 800c454:	0800c459 	.word	0x0800c459
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c458:	4b09      	ldr	r3, [pc, #36]	; (800c480 <USBH_UserProcess+0x58>)
 800c45a:	2203      	movs	r2, #3
 800c45c:	701a      	strb	r2, [r3, #0]
  break;
 800c45e:	e008      	b.n	800c472 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c460:	4b07      	ldr	r3, [pc, #28]	; (800c480 <USBH_UserProcess+0x58>)
 800c462:	2202      	movs	r2, #2
 800c464:	701a      	strb	r2, [r3, #0]
  break;
 800c466:	e004      	b.n	800c472 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c468:	4b05      	ldr	r3, [pc, #20]	; (800c480 <USBH_UserProcess+0x58>)
 800c46a:	2201      	movs	r2, #1
 800c46c:	701a      	strb	r2, [r3, #0]
  break;
 800c46e:	e000      	b.n	800c472 <USBH_UserProcess+0x4a>

  default:
  break;
 800c470:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c472:	bf00      	nop
 800c474:	370c      	adds	r7, #12
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop
 800c480:	200049c0 	.word	0x200049c0

0800c484 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b08a      	sub	sp, #40	; 0x28
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c48c:	f107 0314 	add.w	r3, r7, #20
 800c490:	2200      	movs	r2, #0
 800c492:	601a      	str	r2, [r3, #0]
 800c494:	605a      	str	r2, [r3, #4]
 800c496:	609a      	str	r2, [r3, #8]
 800c498:	60da      	str	r2, [r3, #12]
 800c49a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c4a4:	d147      	bne.n	800c536 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	613b      	str	r3, [r7, #16]
 800c4aa:	4b25      	ldr	r3, [pc, #148]	; (800c540 <HAL_HCD_MspInit+0xbc>)
 800c4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ae:	4a24      	ldr	r2, [pc, #144]	; (800c540 <HAL_HCD_MspInit+0xbc>)
 800c4b0:	f043 0301 	orr.w	r3, r3, #1
 800c4b4:	6313      	str	r3, [r2, #48]	; 0x30
 800c4b6:	4b22      	ldr	r3, [pc, #136]	; (800c540 <HAL_HCD_MspInit+0xbc>)
 800c4b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ba:	f003 0301 	and.w	r3, r3, #1
 800c4be:	613b      	str	r3, [r7, #16]
 800c4c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c4c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c4d0:	f107 0314 	add.w	r3, r7, #20
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	481b      	ldr	r0, [pc, #108]	; (800c544 <HAL_HCD_MspInit+0xc0>)
 800c4d8:	f7f5 fc6a 	bl	8001db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c4dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c4e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4e2:	2302      	movs	r3, #2
 800c4e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c4ee:	230a      	movs	r3, #10
 800c4f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4f2:	f107 0314 	add.w	r3, r7, #20
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	4812      	ldr	r0, [pc, #72]	; (800c544 <HAL_HCD_MspInit+0xc0>)
 800c4fa:	f7f5 fc59 	bl	8001db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c4fe:	4b10      	ldr	r3, [pc, #64]	; (800c540 <HAL_HCD_MspInit+0xbc>)
 800c500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c502:	4a0f      	ldr	r2, [pc, #60]	; (800c540 <HAL_HCD_MspInit+0xbc>)
 800c504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c508:	6353      	str	r3, [r2, #52]	; 0x34
 800c50a:	2300      	movs	r3, #0
 800c50c:	60fb      	str	r3, [r7, #12]
 800c50e:	4b0c      	ldr	r3, [pc, #48]	; (800c540 <HAL_HCD_MspInit+0xbc>)
 800c510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c512:	4a0b      	ldr	r2, [pc, #44]	; (800c540 <HAL_HCD_MspInit+0xbc>)
 800c514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c518:	6453      	str	r3, [r2, #68]	; 0x44
 800c51a:	4b09      	ldr	r3, [pc, #36]	; (800c540 <HAL_HCD_MspInit+0xbc>)
 800c51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c51e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c522:	60fb      	str	r3, [r7, #12]
 800c524:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c526:	2200      	movs	r2, #0
 800c528:	2105      	movs	r1, #5
 800c52a:	2043      	movs	r0, #67	; 0x43
 800c52c:	f7f5 fc16 	bl	8001d5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c530:	2043      	movs	r0, #67	; 0x43
 800c532:	f7f5 fc2f 	bl	8001d94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c536:	bf00      	nop
 800c538:	3728      	adds	r7, #40	; 0x28
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	40023800 	.word	0x40023800
 800c544:	40020000 	.word	0x40020000

0800c548 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c556:	4618      	mov	r0, r3
 800c558:	f7fc f831 	bl	80085be <USBH_LL_IncTimer>
}
 800c55c:	bf00      	nop
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c572:	4618      	mov	r0, r3
 800c574:	f7fc f875 	bl	8008662 <USBH_LL_Connect>
}
 800c578:	bf00      	nop
 800c57a:	3708      	adds	r7, #8
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fc f88a 	bl	80086a8 <USBH_LL_Disconnect>
}
 800c594:	bf00      	nop
 800c596:	3708      	adds	r7, #8
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	70fb      	strb	r3, [r7, #3]
 800c5a8:	4613      	mov	r3, r2
 800c5aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fc f8c1 	bl	800873a <USBH_LL_NotifyURBChange>
#endif
}
 800c5b8:	bf00      	nop
 800c5ba:	3708      	adds	r7, #8
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7fc f81f 	bl	8008612 <USBH_LL_PortEnabled>
}
 800c5d4:	bf00      	nop
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fc f82b 	bl	8008646 <USBH_LL_PortDisabled>
}
 800c5f0:	bf00      	nop
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c606:	2b01      	cmp	r3, #1
 800c608:	d12a      	bne.n	800c660 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c60a:	4a18      	ldr	r2, [pc, #96]	; (800c66c <USBH_LL_Init+0x74>)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4a15      	ldr	r2, [pc, #84]	; (800c66c <USBH_LL_Init+0x74>)
 800c616:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c61a:	4b14      	ldr	r3, [pc, #80]	; (800c66c <USBH_LL_Init+0x74>)
 800c61c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c620:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c622:	4b12      	ldr	r3, [pc, #72]	; (800c66c <USBH_LL_Init+0x74>)
 800c624:	2208      	movs	r2, #8
 800c626:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c628:	4b10      	ldr	r3, [pc, #64]	; (800c66c <USBH_LL_Init+0x74>)
 800c62a:	2201      	movs	r2, #1
 800c62c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c62e:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <USBH_LL_Init+0x74>)
 800c630:	2200      	movs	r2, #0
 800c632:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c634:	4b0d      	ldr	r3, [pc, #52]	; (800c66c <USBH_LL_Init+0x74>)
 800c636:	2202      	movs	r2, #2
 800c638:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c63a:	4b0c      	ldr	r3, [pc, #48]	; (800c66c <USBH_LL_Init+0x74>)
 800c63c:	2200      	movs	r2, #0
 800c63e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c640:	480a      	ldr	r0, [pc, #40]	; (800c66c <USBH_LL_Init+0x74>)
 800c642:	f7f5 fd68 	bl	8002116 <HAL_HCD_Init>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d001      	beq.n	800c650 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c64c:	f7f4 fb5a 	bl	8000d04 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c650:	4806      	ldr	r0, [pc, #24]	; (800c66c <USBH_LL_Init+0x74>)
 800c652:	f7f6 f96b 	bl	800292c <HAL_HCD_GetCurrentFrame>
 800c656:	4603      	mov	r3, r0
 800c658:	4619      	mov	r1, r3
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7fb ffa0 	bl	80085a0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	20005018 	.word	0x20005018

0800c670 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c678:	2300      	movs	r3, #0
 800c67a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c67c:	2300      	movs	r3, #0
 800c67e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c686:	4618      	mov	r0, r3
 800c688:	f7f6 f8d8 	bl	800283c <HAL_HCD_Start>
 800c68c:	4603      	mov	r3, r0
 800c68e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c690:	7bfb      	ldrb	r3, [r7, #15]
 800c692:	4618      	mov	r0, r3
 800c694:	f000 f95c 	bl	800c950 <USBH_Get_USB_Status>
 800c698:	4603      	mov	r3, r0
 800c69a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c69c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}

0800c6a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b084      	sub	sp, #16
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7f6 f8e0 	bl	8002882 <HAL_HCD_Stop>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f000 f941 	bl	800c950 <USBH_Get_USB_Status>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7f6 f92a 	bl	8002948 <HAL_HCD_GetCurrentSpeed>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d007      	beq.n	800c70a <USBH_LL_GetSpeed+0x2e>
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d302      	bcc.n	800c704 <USBH_LL_GetSpeed+0x28>
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	d006      	beq.n	800c710 <USBH_LL_GetSpeed+0x34>
 800c702:	e008      	b.n	800c716 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c704:	2300      	movs	r3, #0
 800c706:	73fb      	strb	r3, [r7, #15]
    break;
 800c708:	e008      	b.n	800c71c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c70a:	2301      	movs	r3, #1
 800c70c:	73fb      	strb	r3, [r7, #15]
    break;
 800c70e:	e005      	b.n	800c71c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c710:	2302      	movs	r3, #2
 800c712:	73fb      	strb	r3, [r7, #15]
    break;
 800c714:	e002      	b.n	800c71c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c716:	2301      	movs	r3, #1
 800c718:	73fb      	strb	r3, [r7, #15]
    break;
 800c71a:	bf00      	nop
  }
  return  speed;
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b084      	sub	sp, #16
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c72e:	2300      	movs	r3, #0
 800c730:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c732:	2300      	movs	r3, #0
 800c734:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7f6 f8bd 	bl	80028bc <HAL_HCD_ResetPort>
 800c742:	4603      	mov	r3, r0
 800c744:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c746:	7bfb      	ldrb	r3, [r7, #15]
 800c748:	4618      	mov	r0, r3
 800c74a:	f000 f901 	bl	800c950 <USBH_Get_USB_Status>
 800c74e:	4603      	mov	r3, r0
 800c750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c752:	7bbb      	ldrb	r3, [r7, #14]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	460b      	mov	r3, r1
 800c766:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c76e:	78fa      	ldrb	r2, [r7, #3]
 800c770:	4611      	mov	r1, r2
 800c772:	4618      	mov	r0, r3
 800c774:	f7f6 f8c5 	bl	8002902 <HAL_HCD_HC_GetXferCount>
 800c778:	4603      	mov	r3, r0
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c782:	b590      	push	{r4, r7, lr}
 800c784:	b089      	sub	sp, #36	; 0x24
 800c786:	af04      	add	r7, sp, #16
 800c788:	6078      	str	r0, [r7, #4]
 800c78a:	4608      	mov	r0, r1
 800c78c:	4611      	mov	r1, r2
 800c78e:	461a      	mov	r2, r3
 800c790:	4603      	mov	r3, r0
 800c792:	70fb      	strb	r3, [r7, #3]
 800c794:	460b      	mov	r3, r1
 800c796:	70bb      	strb	r3, [r7, #2]
 800c798:	4613      	mov	r3, r2
 800c79a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c79c:	2300      	movs	r3, #0
 800c79e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c7aa:	787c      	ldrb	r4, [r7, #1]
 800c7ac:	78ba      	ldrb	r2, [r7, #2]
 800c7ae:	78f9      	ldrb	r1, [r7, #3]
 800c7b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c7b2:	9302      	str	r3, [sp, #8]
 800c7b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c7b8:	9301      	str	r3, [sp, #4]
 800c7ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	4623      	mov	r3, r4
 800c7c2:	f7f5 fd0a 	bl	80021da <HAL_HCD_HC_Init>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c7ca:	7bfb      	ldrb	r3, [r7, #15]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f000 f8bf 	bl	800c950 <USBH_Get_USB_Status>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd90      	pop	{r4, r7, pc}

0800c7e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c7fa:	78fa      	ldrb	r2, [r7, #3]
 800c7fc:	4611      	mov	r1, r2
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7f5 fd83 	bl	800230a <HAL_HCD_HC_Halt>
 800c804:	4603      	mov	r3, r0
 800c806:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c808:	7bfb      	ldrb	r3, [r7, #15]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f000 f8a0 	bl	800c950 <USBH_Get_USB_Status>
 800c810:	4603      	mov	r3, r0
 800c812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c814:	7bbb      	ldrb	r3, [r7, #14]
}
 800c816:	4618      	mov	r0, r3
 800c818:	3710      	adds	r7, #16
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}

0800c81e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c81e:	b590      	push	{r4, r7, lr}
 800c820:	b089      	sub	sp, #36	; 0x24
 800c822:	af04      	add	r7, sp, #16
 800c824:	6078      	str	r0, [r7, #4]
 800c826:	4608      	mov	r0, r1
 800c828:	4611      	mov	r1, r2
 800c82a:	461a      	mov	r2, r3
 800c82c:	4603      	mov	r3, r0
 800c82e:	70fb      	strb	r3, [r7, #3]
 800c830:	460b      	mov	r3, r1
 800c832:	70bb      	strb	r3, [r7, #2]
 800c834:	4613      	mov	r3, r2
 800c836:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c838:	2300      	movs	r3, #0
 800c83a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c846:	787c      	ldrb	r4, [r7, #1]
 800c848:	78ba      	ldrb	r2, [r7, #2]
 800c84a:	78f9      	ldrb	r1, [r7, #3]
 800c84c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c850:	9303      	str	r3, [sp, #12]
 800c852:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c854:	9302      	str	r3, [sp, #8]
 800c856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c858:	9301      	str	r3, [sp, #4]
 800c85a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	4623      	mov	r3, r4
 800c862:	f7f5 fd75 	bl	8002350 <HAL_HCD_HC_SubmitRequest>
 800c866:	4603      	mov	r3, r0
 800c868:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c86a:	7bfb      	ldrb	r3, [r7, #15]
 800c86c:	4618      	mov	r0, r3
 800c86e:	f000 f86f 	bl	800c950 <USBH_Get_USB_Status>
 800c872:	4603      	mov	r3, r0
 800c874:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c876:	7bbb      	ldrb	r3, [r7, #14]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3714      	adds	r7, #20
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd90      	pop	{r4, r7, pc}

0800c880 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	460b      	mov	r3, r1
 800c88a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c892:	78fa      	ldrb	r2, [r7, #3]
 800c894:	4611      	mov	r1, r2
 800c896:	4618      	mov	r0, r3
 800c898:	f7f6 f81e 	bl	80028d8 <HAL_HCD_HC_GetURBState>
 800c89c:	4603      	mov	r3, r0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b082      	sub	sp, #8
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d103      	bne.n	800c8c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c8bc:	78fb      	ldrb	r3, [r7, #3]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f000 f872 	bl	800c9a8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c8c4:	20c8      	movs	r0, #200	; 0xc8
 800c8c6:	f7f4 fd83 	bl	80013d0 <HAL_Delay>
  return USBH_OK;
 800c8ca:	2300      	movs	r3, #0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3708      	adds	r7, #8
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	460b      	mov	r3, r1
 800c8de:	70fb      	strb	r3, [r7, #3]
 800c8e0:	4613      	mov	r3, r2
 800c8e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c8ec:	78fa      	ldrb	r2, [r7, #3]
 800c8ee:	68f9      	ldr	r1, [r7, #12]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	4413      	add	r3, r2
 800c8f6:	00db      	lsls	r3, r3, #3
 800c8f8:	440b      	add	r3, r1
 800c8fa:	333b      	adds	r3, #59	; 0x3b
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00a      	beq.n	800c918 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c902:	78fa      	ldrb	r2, [r7, #3]
 800c904:	68f9      	ldr	r1, [r7, #12]
 800c906:	4613      	mov	r3, r2
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	4413      	add	r3, r2
 800c90c:	00db      	lsls	r3, r3, #3
 800c90e:	440b      	add	r3, r1
 800c910:	3350      	adds	r3, #80	; 0x50
 800c912:	78ba      	ldrb	r2, [r7, #2]
 800c914:	701a      	strb	r2, [r3, #0]
 800c916:	e009      	b.n	800c92c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c918:	78fa      	ldrb	r2, [r7, #3]
 800c91a:	68f9      	ldr	r1, [r7, #12]
 800c91c:	4613      	mov	r3, r2
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	4413      	add	r3, r2
 800c922:	00db      	lsls	r3, r3, #3
 800c924:	440b      	add	r3, r1
 800c926:	3351      	adds	r3, #81	; 0x51
 800c928:	78ba      	ldrb	r2, [r7, #2]
 800c92a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3714      	adds	r7, #20
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr

0800c93a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b082      	sub	sp, #8
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f7f4 fd44 	bl	80013d0 <HAL_Delay>
}
 800c948:	bf00      	nop
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c950:	b480      	push	{r7}
 800c952:	b085      	sub	sp, #20
 800c954:	af00      	add	r7, sp, #0
 800c956:	4603      	mov	r3, r0
 800c958:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c95a:	2300      	movs	r3, #0
 800c95c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c95e:	79fb      	ldrb	r3, [r7, #7]
 800c960:	2b03      	cmp	r3, #3
 800c962:	d817      	bhi.n	800c994 <USBH_Get_USB_Status+0x44>
 800c964:	a201      	add	r2, pc, #4	; (adr r2, 800c96c <USBH_Get_USB_Status+0x1c>)
 800c966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c96a:	bf00      	nop
 800c96c:	0800c97d 	.word	0x0800c97d
 800c970:	0800c983 	.word	0x0800c983
 800c974:	0800c989 	.word	0x0800c989
 800c978:	0800c98f 	.word	0x0800c98f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c97c:	2300      	movs	r3, #0
 800c97e:	73fb      	strb	r3, [r7, #15]
    break;
 800c980:	e00b      	b.n	800c99a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c982:	2302      	movs	r3, #2
 800c984:	73fb      	strb	r3, [r7, #15]
    break;
 800c986:	e008      	b.n	800c99a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c988:	2301      	movs	r3, #1
 800c98a:	73fb      	strb	r3, [r7, #15]
    break;
 800c98c:	e005      	b.n	800c99a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c98e:	2302      	movs	r3, #2
 800c990:	73fb      	strb	r3, [r7, #15]
    break;
 800c992:	e002      	b.n	800c99a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c994:	2302      	movs	r3, #2
 800c996:	73fb      	strb	r3, [r7, #15]
    break;
 800c998:	bf00      	nop
  }
  return usb_status;
 800c99a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3714      	adds	r7, #20
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c9b2:	79fb      	ldrb	r3, [r7, #7]
 800c9b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c9b6:	79fb      	ldrb	r3, [r7, #7]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d102      	bne.n	800c9c2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	73fb      	strb	r3, [r7, #15]
 800c9c0:	e001      	b.n	800c9c6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c9c6:	7bfb      	ldrb	r3, [r7, #15]
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	2101      	movs	r1, #1
 800c9cc:	4803      	ldr	r0, [pc, #12]	; (800c9dc <MX_DriverVbusFS+0x34>)
 800c9ce:	f7f5 fb89 	bl	80020e4 <HAL_GPIO_WritePin>
}
 800c9d2:	bf00      	nop
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	40020800 	.word	0x40020800

0800c9e0 <__errno>:
 800c9e0:	4b01      	ldr	r3, [pc, #4]	; (800c9e8 <__errno+0x8>)
 800c9e2:	6818      	ldr	r0, [r3, #0]
 800c9e4:	4770      	bx	lr
 800c9e6:	bf00      	nop
 800c9e8:	20000030 	.word	0x20000030

0800c9ec <__libc_init_array>:
 800c9ec:	b570      	push	{r4, r5, r6, lr}
 800c9ee:	4e0d      	ldr	r6, [pc, #52]	; (800ca24 <__libc_init_array+0x38>)
 800c9f0:	4c0d      	ldr	r4, [pc, #52]	; (800ca28 <__libc_init_array+0x3c>)
 800c9f2:	1ba4      	subs	r4, r4, r6
 800c9f4:	10a4      	asrs	r4, r4, #2
 800c9f6:	2500      	movs	r5, #0
 800c9f8:	42a5      	cmp	r5, r4
 800c9fa:	d109      	bne.n	800ca10 <__libc_init_array+0x24>
 800c9fc:	4e0b      	ldr	r6, [pc, #44]	; (800ca2c <__libc_init_array+0x40>)
 800c9fe:	4c0c      	ldr	r4, [pc, #48]	; (800ca30 <__libc_init_array+0x44>)
 800ca00:	f000 f8f6 	bl	800cbf0 <_init>
 800ca04:	1ba4      	subs	r4, r4, r6
 800ca06:	10a4      	asrs	r4, r4, #2
 800ca08:	2500      	movs	r5, #0
 800ca0a:	42a5      	cmp	r5, r4
 800ca0c:	d105      	bne.n	800ca1a <__libc_init_array+0x2e>
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
 800ca10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ca14:	4798      	blx	r3
 800ca16:	3501      	adds	r5, #1
 800ca18:	e7ee      	b.n	800c9f8 <__libc_init_array+0xc>
 800ca1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ca1e:	4798      	blx	r3
 800ca20:	3501      	adds	r5, #1
 800ca22:	e7f2      	b.n	800ca0a <__libc_init_array+0x1e>
 800ca24:	0800cd08 	.word	0x0800cd08
 800ca28:	0800cd08 	.word	0x0800cd08
 800ca2c:	0800cd08 	.word	0x0800cd08
 800ca30:	0800cd0c 	.word	0x0800cd0c

0800ca34 <malloc>:
 800ca34:	4b02      	ldr	r3, [pc, #8]	; (800ca40 <malloc+0xc>)
 800ca36:	4601      	mov	r1, r0
 800ca38:	6818      	ldr	r0, [r3, #0]
 800ca3a:	f000 b86d 	b.w	800cb18 <_malloc_r>
 800ca3e:	bf00      	nop
 800ca40:	20000030 	.word	0x20000030

0800ca44 <free>:
 800ca44:	4b02      	ldr	r3, [pc, #8]	; (800ca50 <free+0xc>)
 800ca46:	4601      	mov	r1, r0
 800ca48:	6818      	ldr	r0, [r3, #0]
 800ca4a:	f000 b817 	b.w	800ca7c <_free_r>
 800ca4e:	bf00      	nop
 800ca50:	20000030 	.word	0x20000030

0800ca54 <memcpy>:
 800ca54:	b510      	push	{r4, lr}
 800ca56:	1e43      	subs	r3, r0, #1
 800ca58:	440a      	add	r2, r1
 800ca5a:	4291      	cmp	r1, r2
 800ca5c:	d100      	bne.n	800ca60 <memcpy+0xc>
 800ca5e:	bd10      	pop	{r4, pc}
 800ca60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca68:	e7f7      	b.n	800ca5a <memcpy+0x6>

0800ca6a <memset>:
 800ca6a:	4402      	add	r2, r0
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d100      	bne.n	800ca74 <memset+0xa>
 800ca72:	4770      	bx	lr
 800ca74:	f803 1b01 	strb.w	r1, [r3], #1
 800ca78:	e7f9      	b.n	800ca6e <memset+0x4>
	...

0800ca7c <_free_r>:
 800ca7c:	b538      	push	{r3, r4, r5, lr}
 800ca7e:	4605      	mov	r5, r0
 800ca80:	2900      	cmp	r1, #0
 800ca82:	d045      	beq.n	800cb10 <_free_r+0x94>
 800ca84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca88:	1f0c      	subs	r4, r1, #4
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	bfb8      	it	lt
 800ca8e:	18e4      	addlt	r4, r4, r3
 800ca90:	f000 f8ac 	bl	800cbec <__malloc_lock>
 800ca94:	4a1f      	ldr	r2, [pc, #124]	; (800cb14 <_free_r+0x98>)
 800ca96:	6813      	ldr	r3, [r2, #0]
 800ca98:	4610      	mov	r0, r2
 800ca9a:	b933      	cbnz	r3, 800caaa <_free_r+0x2e>
 800ca9c:	6063      	str	r3, [r4, #4]
 800ca9e:	6014      	str	r4, [r2, #0]
 800caa0:	4628      	mov	r0, r5
 800caa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caa6:	f000 b8a2 	b.w	800cbee <__malloc_unlock>
 800caaa:	42a3      	cmp	r3, r4
 800caac:	d90c      	bls.n	800cac8 <_free_r+0x4c>
 800caae:	6821      	ldr	r1, [r4, #0]
 800cab0:	1862      	adds	r2, r4, r1
 800cab2:	4293      	cmp	r3, r2
 800cab4:	bf04      	itt	eq
 800cab6:	681a      	ldreq	r2, [r3, #0]
 800cab8:	685b      	ldreq	r3, [r3, #4]
 800caba:	6063      	str	r3, [r4, #4]
 800cabc:	bf04      	itt	eq
 800cabe:	1852      	addeq	r2, r2, r1
 800cac0:	6022      	streq	r2, [r4, #0]
 800cac2:	6004      	str	r4, [r0, #0]
 800cac4:	e7ec      	b.n	800caa0 <_free_r+0x24>
 800cac6:	4613      	mov	r3, r2
 800cac8:	685a      	ldr	r2, [r3, #4]
 800caca:	b10a      	cbz	r2, 800cad0 <_free_r+0x54>
 800cacc:	42a2      	cmp	r2, r4
 800cace:	d9fa      	bls.n	800cac6 <_free_r+0x4a>
 800cad0:	6819      	ldr	r1, [r3, #0]
 800cad2:	1858      	adds	r0, r3, r1
 800cad4:	42a0      	cmp	r0, r4
 800cad6:	d10b      	bne.n	800caf0 <_free_r+0x74>
 800cad8:	6820      	ldr	r0, [r4, #0]
 800cada:	4401      	add	r1, r0
 800cadc:	1858      	adds	r0, r3, r1
 800cade:	4282      	cmp	r2, r0
 800cae0:	6019      	str	r1, [r3, #0]
 800cae2:	d1dd      	bne.n	800caa0 <_free_r+0x24>
 800cae4:	6810      	ldr	r0, [r2, #0]
 800cae6:	6852      	ldr	r2, [r2, #4]
 800cae8:	605a      	str	r2, [r3, #4]
 800caea:	4401      	add	r1, r0
 800caec:	6019      	str	r1, [r3, #0]
 800caee:	e7d7      	b.n	800caa0 <_free_r+0x24>
 800caf0:	d902      	bls.n	800caf8 <_free_r+0x7c>
 800caf2:	230c      	movs	r3, #12
 800caf4:	602b      	str	r3, [r5, #0]
 800caf6:	e7d3      	b.n	800caa0 <_free_r+0x24>
 800caf8:	6820      	ldr	r0, [r4, #0]
 800cafa:	1821      	adds	r1, r4, r0
 800cafc:	428a      	cmp	r2, r1
 800cafe:	bf04      	itt	eq
 800cb00:	6811      	ldreq	r1, [r2, #0]
 800cb02:	6852      	ldreq	r2, [r2, #4]
 800cb04:	6062      	str	r2, [r4, #4]
 800cb06:	bf04      	itt	eq
 800cb08:	1809      	addeq	r1, r1, r0
 800cb0a:	6021      	streq	r1, [r4, #0]
 800cb0c:	605c      	str	r4, [r3, #4]
 800cb0e:	e7c7      	b.n	800caa0 <_free_r+0x24>
 800cb10:	bd38      	pop	{r3, r4, r5, pc}
 800cb12:	bf00      	nop
 800cb14:	200049c4 	.word	0x200049c4

0800cb18 <_malloc_r>:
 800cb18:	b570      	push	{r4, r5, r6, lr}
 800cb1a:	1ccd      	adds	r5, r1, #3
 800cb1c:	f025 0503 	bic.w	r5, r5, #3
 800cb20:	3508      	adds	r5, #8
 800cb22:	2d0c      	cmp	r5, #12
 800cb24:	bf38      	it	cc
 800cb26:	250c      	movcc	r5, #12
 800cb28:	2d00      	cmp	r5, #0
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	db01      	blt.n	800cb32 <_malloc_r+0x1a>
 800cb2e:	42a9      	cmp	r1, r5
 800cb30:	d903      	bls.n	800cb3a <_malloc_r+0x22>
 800cb32:	230c      	movs	r3, #12
 800cb34:	6033      	str	r3, [r6, #0]
 800cb36:	2000      	movs	r0, #0
 800cb38:	bd70      	pop	{r4, r5, r6, pc}
 800cb3a:	f000 f857 	bl	800cbec <__malloc_lock>
 800cb3e:	4a21      	ldr	r2, [pc, #132]	; (800cbc4 <_malloc_r+0xac>)
 800cb40:	6814      	ldr	r4, [r2, #0]
 800cb42:	4621      	mov	r1, r4
 800cb44:	b991      	cbnz	r1, 800cb6c <_malloc_r+0x54>
 800cb46:	4c20      	ldr	r4, [pc, #128]	; (800cbc8 <_malloc_r+0xb0>)
 800cb48:	6823      	ldr	r3, [r4, #0]
 800cb4a:	b91b      	cbnz	r3, 800cb54 <_malloc_r+0x3c>
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	f000 f83d 	bl	800cbcc <_sbrk_r>
 800cb52:	6020      	str	r0, [r4, #0]
 800cb54:	4629      	mov	r1, r5
 800cb56:	4630      	mov	r0, r6
 800cb58:	f000 f838 	bl	800cbcc <_sbrk_r>
 800cb5c:	1c43      	adds	r3, r0, #1
 800cb5e:	d124      	bne.n	800cbaa <_malloc_r+0x92>
 800cb60:	230c      	movs	r3, #12
 800cb62:	6033      	str	r3, [r6, #0]
 800cb64:	4630      	mov	r0, r6
 800cb66:	f000 f842 	bl	800cbee <__malloc_unlock>
 800cb6a:	e7e4      	b.n	800cb36 <_malloc_r+0x1e>
 800cb6c:	680b      	ldr	r3, [r1, #0]
 800cb6e:	1b5b      	subs	r3, r3, r5
 800cb70:	d418      	bmi.n	800cba4 <_malloc_r+0x8c>
 800cb72:	2b0b      	cmp	r3, #11
 800cb74:	d90f      	bls.n	800cb96 <_malloc_r+0x7e>
 800cb76:	600b      	str	r3, [r1, #0]
 800cb78:	50cd      	str	r5, [r1, r3]
 800cb7a:	18cc      	adds	r4, r1, r3
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	f000 f836 	bl	800cbee <__malloc_unlock>
 800cb82:	f104 000b 	add.w	r0, r4, #11
 800cb86:	1d23      	adds	r3, r4, #4
 800cb88:	f020 0007 	bic.w	r0, r0, #7
 800cb8c:	1ac3      	subs	r3, r0, r3
 800cb8e:	d0d3      	beq.n	800cb38 <_malloc_r+0x20>
 800cb90:	425a      	negs	r2, r3
 800cb92:	50e2      	str	r2, [r4, r3]
 800cb94:	e7d0      	b.n	800cb38 <_malloc_r+0x20>
 800cb96:	428c      	cmp	r4, r1
 800cb98:	684b      	ldr	r3, [r1, #4]
 800cb9a:	bf16      	itet	ne
 800cb9c:	6063      	strne	r3, [r4, #4]
 800cb9e:	6013      	streq	r3, [r2, #0]
 800cba0:	460c      	movne	r4, r1
 800cba2:	e7eb      	b.n	800cb7c <_malloc_r+0x64>
 800cba4:	460c      	mov	r4, r1
 800cba6:	6849      	ldr	r1, [r1, #4]
 800cba8:	e7cc      	b.n	800cb44 <_malloc_r+0x2c>
 800cbaa:	1cc4      	adds	r4, r0, #3
 800cbac:	f024 0403 	bic.w	r4, r4, #3
 800cbb0:	42a0      	cmp	r0, r4
 800cbb2:	d005      	beq.n	800cbc0 <_malloc_r+0xa8>
 800cbb4:	1a21      	subs	r1, r4, r0
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	f000 f808 	bl	800cbcc <_sbrk_r>
 800cbbc:	3001      	adds	r0, #1
 800cbbe:	d0cf      	beq.n	800cb60 <_malloc_r+0x48>
 800cbc0:	6025      	str	r5, [r4, #0]
 800cbc2:	e7db      	b.n	800cb7c <_malloc_r+0x64>
 800cbc4:	200049c4 	.word	0x200049c4
 800cbc8:	200049c8 	.word	0x200049c8

0800cbcc <_sbrk_r>:
 800cbcc:	b538      	push	{r3, r4, r5, lr}
 800cbce:	4c06      	ldr	r4, [pc, #24]	; (800cbe8 <_sbrk_r+0x1c>)
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	4605      	mov	r5, r0
 800cbd4:	4608      	mov	r0, r1
 800cbd6:	6023      	str	r3, [r4, #0]
 800cbd8:	f7f4 fb42 	bl	8001260 <_sbrk>
 800cbdc:	1c43      	adds	r3, r0, #1
 800cbde:	d102      	bne.n	800cbe6 <_sbrk_r+0x1a>
 800cbe0:	6823      	ldr	r3, [r4, #0]
 800cbe2:	b103      	cbz	r3, 800cbe6 <_sbrk_r+0x1a>
 800cbe4:	602b      	str	r3, [r5, #0]
 800cbe6:	bd38      	pop	{r3, r4, r5, pc}
 800cbe8:	200052dc 	.word	0x200052dc

0800cbec <__malloc_lock>:
 800cbec:	4770      	bx	lr

0800cbee <__malloc_unlock>:
 800cbee:	4770      	bx	lr

0800cbf0 <_init>:
 800cbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf2:	bf00      	nop
 800cbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbf6:	bc08      	pop	{r3}
 800cbf8:	469e      	mov	lr, r3
 800cbfa:	4770      	bx	lr

0800cbfc <_fini>:
 800cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfe:	bf00      	nop
 800cc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc02:	bc08      	pop	{r3}
 800cc04:	469e      	mov	lr, r3
 800cc06:	4770      	bx	lr
